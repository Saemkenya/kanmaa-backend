// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type SearchResult interface {
	IsSearchResult()
}

type Accountant struct {
	ID                 string                     `json:"id"`
	Salute             *string                    `json:"salute"`
	Name               *string                    `json:"name"`
	IDno               *string                    `json:"IDno"`
	NHIFno             *string                    `json:"NHIFno"`
	Cell               *string                    `json:"cell"`
	Email              *string                    `json:"email"`
	Gender             *string                    `json:"gender"`
	Roles              *string                    `json:"roles"`
	SemiFormal         *bool                      `json:"semiFormal"`
	ThumbNail          *string                    `json:"thumbNail"`
	AddrPoBox          *string                    `json:"addrPoBox"`
	AddrPostalCode     *string                    `json:"addrPostalCode"`
	AddrDistrict       *string                    `json:"addrDistrict"`
	AddrCounty         *string                    `json:"addrCounty"`
	AddrNationality    *string                    `json:"addrNationality"`
	IPAddress          *string                    `json:"ipAddress"`
	CreatedAt          *time.Time                 `json:"createdAt"`
	AuthorizedPayments *PaymentsConnection        `json:"authorizedPayments"`
	Archives           *ArchivesConnection        `json:"archives"`
	CheckinCheckouts   *CheckinCheckoutConnection `json:"checkinCheckouts"`
	Pass               *Pass                      `json:"pass"`
	School             *School                    `json:"school"`
}

type AccountantsConnection struct {
	TotalCount int                `json:"totalCount"`
	Edges      []*AccountantsEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
}

type AccountantsEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Accountant `json:"node"`
}

type Admin struct {
	ID                string                     `json:"id"`
	Salute            *string                    `json:"salute"`
	Name              *string                    `json:"name"`
	IDno              *string                    `json:"iDno"`
	Cell              *string                    `json:"cell"`
	Email             *string                    `json:"email"`
	Gender            *string                    `json:"gender"`
	Roles             *string                    `json:"roles"`
	SemiFormal        *bool                      `json:"semiFormal"`
	ThumbNail         *string                    `json:"thumbNail"`
	AddrPoBox         *string                    `json:"addrPoBox"`
	AddrPostalCode    *string                    `json:"addrPostalCode"`
	AddrDistrict      *string                    `json:"addrDistrict"`
	AddrCounty        *string                    `json:"addrCounty"`
	AddrNationality   *string                    `json:"addrNationality"`
	IPAddress         *string                    `json:"ipAddress"`
	CreatedAt         *time.Time                 `json:"createdAt"`
	Visitors          *VisitorsConnection        `json:"visitors"`
	AuthorizedWorkers *CheckinCheckoutConnection `json:"authorizedWorkers"`
	Messages          *MessagesConnection        `json:"messages"`
	Archives          *ArchivesConnection        `json:"archives"`
	CheckinCheckouts  *CheckinCheckoutConnection `json:"checkinCheckouts"`
	Pass              *Pass                      `json:"pass"`
	School            *School                    `json:"school"`
}

type AdminsConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*AdminsEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type AdminsEdge struct {
	Cursor string `json:"cursor"`
	Node   *Admin `json:"node"`
}

type Announcement struct {
	ID          string           `json:"id"`
	Topic       *string          `json:"topic"`
	By          *User            `json:"by"`
	Message     *string          `json:"message"`
	Receipients *UsersConnection `json:"receipients"`
	School      *School          `json:"school"`
	CreatedAt   *time.Time       `json:"createdAt"`
}

func (Announcement) IsSearchResult() {}

type AnnouncementConnection struct {
	TotalCount int                 `json:"totalCount"`
	Edges      []*AnnouncementEdge `json:"edges"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

type AnnouncementEdge struct {
	Cursor string        `json:"cursor"`
	Node   *Announcement `json:"node"`
}

type Archive struct {
	ID            string     `json:"id"`
	Type          *string    `json:"type"`
	Field1        *string    `json:"field1"`
	Field2        *string    `json:"field2"`
	Field3        *string    `json:"field3"`
	Field4        *string    `json:"field4"`
	Field5        *string    `json:"field5"`
	Field6        *string    `json:"field6"`
	Field7        *string    `json:"field7"`
	Field8        *string    `json:"field8"`
	Field9        *string    `json:"field9"`
	Field10       *string    `json:"field10"`
	Field11       *string    `json:"field11"`
	Field12       *string    `json:"field12"`
	Field13       *string    `json:"field13"`
	Field14       *string    `json:"field14"`
	Field15       *string    `json:"field15"`
	Field16       *string    `json:"field16"`
	Field17       *string    `json:"field17"`
	Field18       *string    `json:"field18"`
	Field19       *string    `json:"field19"`
	Field20       *string    `json:"field20"`
	DeletedByName *string    `json:"deletedByName"`
	DeletedByMail *string    `json:"deletedByMail"`
	CreatedAt     *time.Time `json:"createdAt"`
	School        *School    `json:"School"`
}

type ArchivesConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*ArchivesEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type ArchivesEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Archive `json:"node"`
}

type Attendance struct {
	ID           string      `json:"id"`
	Student      *Student    `json:"student"`
	Lesson       *Lesson     `json:"lesson"`
	Present      *bool       `json:"present"`
	Confirmed    *bool       `json:"confirmed"`
	Confirmation *StaticFile `json:"confirmation"`
	School       *School     `json:"school"`
	CreatedAt    *time.Time  `json:"createdAt"`
}

func (Attendance) IsSearchResult() {}

type AttendanceConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*AttendanceEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type AttendanceEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Attendance `json:"node"`
}

type Book struct {
	ID        string           `json:"id"`
	Name      *string          `json:"name"`
	Isbn      *string          `json:"isbn"`
	Authors   *string          `json:"authors"`
	Revision  *string          `json:"revision"`
	Lends     *LendsConnection `json:"lends"`
	School    *School          `json:"school"`
	CreatedAt *time.Time       `json:"createdAt"`
}

func (Book) IsSearchResult() {}

type BooksConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*BooksEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type BooksEdge struct {
	Cursor string `json:"cursor"`
	Node   *Book  `json:"node"`
}

type CheckinCheckout struct {
	ID           string     `json:"id"`
	Worker       *User      `json:"worker"`
	TimeIn       *time.Time `json:"timeIn"`
	InSchool     *bool      `json:"inSchool"`
	TimeOut      *time.Time `json:"timeOut"`
	AuthorizedBy *Admin     `json:"authorizedBy"`
	School       *School    `json:"school"`
	CreatedAt    *time.Time `json:"createdAt"`
}

type CheckinCheckoutConnection struct {
	TotalCount int                    `json:"totalCount"`
	Edges      []*CheckinCheckoutEdge `json:"edges"`
	PageInfo   *PageInfo              `json:"pageInfo"`
}

type CheckinCheckoutEdge struct {
	Cursor string           `json:"cursor"`
	Node   *CheckinCheckout `json:"node"`
}

type Culture struct {
	ID           string     `json:"id"`
	Title        *string    `json:"title"`
	Instructions *string    `json:"instructions"`
	Story        *string    `json:"story"`
	Quiz         *string    `json:"quiz"`
	Lessons      *string    `json:"lessons"`
	Culture      *string    `json:"culture"`
	Grade        *Grade     `json:"grade"`
	School       *School    `json:"school"`
	CreatedAt    *time.Time `json:"createdAt"`
}

func (Culture) IsSearchResult() {}

type CulturesConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*CulturesEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type CulturesEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Culture `json:"node"`
}

type Department struct {
	ID        string              `json:"id"`
	Name      *string             `json:"name"`
	Hod       *Tutor              `json:"hod"`
	Subjects  *SubjectsConnection `json:"subjects"`
	Tutors    *TutorsConnection   `json:"tutors"`
	School    *School             `json:"school"`
	CreatedAt *time.Time          `json:"createdAt"`
}

func (Department) IsSearchResult() {}

type DepartmentsConnection struct {
	TotalCount int                `json:"totalCount"`
	Edges      []*DepartmentsEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
}

type DepartmentsEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Department `json:"node"`
}

type DiariesConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*DiariesEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type DiariesEdge struct {
	Cursor string `json:"cursor"`
	Node   *Diary `json:"node"`
}

type Diary struct {
	ID        string               `json:"id"`
	Remarks   *string              `json:"remarks"`
	Student   *Student             `json:"student"`
	Request   *string              `json:"request"`
	Tutor     *Tutor               `json:"tutor"`
	SeenBy    *GuardiansConnection `json:"seenBy"`
	School    *School              `json:"school"`
	CreatedAt *time.Time           `json:"createdAt"`
}

type DispensedProduct struct {
	ID          string              `json:"id"`
	Product     *Product            `json:"product"`
	Quantity    *float64            `json:"quantity"`
	Category    ProductCategoryEnum `json:"category"`
	DispenseTo  *User               `json:"dispenseTo"`
	DispensedBy *Storekeeper        `json:"dispensedBy"`
	School      *School             `json:"school"`
	CreatedAt   *time.Time          `json:"createdAt"`
}

type DispensedProductsConnection struct {
	TotalCount int                      `json:"totalCount"`
	Edges      []*DispensedProductsEdge `json:"edges"`
	PageInfo   *PageInfo                `json:"pageInfo"`
}

type DispensedProductsEdge struct {
	Cursor string            `json:"cursor"`
	Node   *DispensedProduct `json:"node"`
}

type Essene struct {
	ID        string     `json:"id"`
	User      *User      `json:"user"`
	CreatedAt *time.Time `json:"createdAt"`
	School    *School    `json:"school"`
}

type EssenesConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*EssenesEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type EssenesEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Essene `json:"node"`
}

type Exam struct {
	ID        string            `json:"id"`
	Name      *string           `json:"name"`
	Date      *string           `json:"date"`
	Grade     *Grade            `json:"grade"`
	Scores    *ScoresConnection `json:"scores"`
	CreatedAt *time.Time        `json:"createdAt"`
	School    *School           `json:"school"`
}

func (Exam) IsSearchResult() {}

type ExamsConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*ExamsEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type ExamsEdge struct {
	Cursor string `json:"cursor"`
	Node   *Exam  `json:"node"`
}

type Fee struct {
	ID        string     `json:"id"`
	Grade     *Grade     `json:"grade"`
	Year      *string    `json:"year"`
	Semester  *string    `json:"semester"`
	Amount    *float64   `json:"amount"`
	School    *School    `json:"school"`
	CreatedAt *time.Time `json:"createdAt"`
}

func (Fee) IsSearchResult() {}

type FeesConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*FeesEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type FeesEdge struct {
	Cursor string `json:"cursor"`
	Node   *Fee   `json:"node"`
}

type Grade struct {
	ID              string                         `json:"id"`
	Name            *string                        `json:"name"`
	Stream          *string                        `json:"stream"`
	ClassTeacher    *Tutor                         `json:"classTeacher"`
	Motto           *string                        `json:"motto"`
	Fees            *FeesConnection                `json:"fees"`
	Students        *StudentsConnection            `json:"students"`
	StudentsInClass *StudentinStudentoutConnection `json:"studentsInClass"`
	Lessons         *LessonsConnection             `json:"lessons"`
	Exams           *ExamsConnection               `json:"exams"`
	TimeTables      *TimeTablesConnection          `json:"timeTables"`
	Cultures        *CulturesConnection            `json:"cultures"`
	School          *School                        `json:"school"`
	CreatedAt       *time.Time                     `json:"createdAt"`
}

func (Grade) IsSearchResult() {}

type GradesConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*GradesEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type GradesEdge struct {
	Cursor string `json:"cursor"`
	Node   *Grade `json:"node"`
}

type Guardian struct {
	ID              string              `json:"id"`
	Salute          *string             `json:"salute"`
	Name            *string             `json:"name"`
	IDno            *string             `json:"iDno"`
	NHIFno          *string             `json:"nHIFno"`
	Cell            *string             `json:"cell"`
	Email           *string             `json:"email"`
	Gender          *string             `json:"gender"`
	Roles           *string             `json:"roles"`
	AddrPoBox       *string             `json:"addrPoBox"`
	AddrPostalCode  *string             `json:"addrPostalCode"`
	AddrDistrict    *string             `json:"addrDistrict"`
	AddrCounty      *string             `json:"addrCounty"`
	AddrNationality *string             `json:"addrNationality"`
	IPAddress       *string             `json:"ipAddress"`
	CreatedAt       *time.Time          `json:"createdAt"`
	Students        *StudentsConnection `json:"students"`
	Payments        *PaymentsConnection `json:"payments"`
	Visits          *VisitorsConnection `json:"visits"`
	Messages        *MessagesConnection `json:"messages"`
	ViwedDiaries    *DiariesConnection  `json:"viwedDiaries"`
	Archives        *ArchivesConnection `json:"archives"`
	School          *School             `json:"school"`
}

type GuardiansConnection struct {
	TotalCount int              `json:"totalCount"`
	Edges      []*GuardiansEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
}

type GuardiansEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Guardian `json:"node"`
}

type Lend struct {
	ID           string     `json:"id"`
	ReceivedOn   *string    `json:"received_on"`
	DueOn        *string    `json:"due_on"`
	HandedOverOn *string    `json:"handed_over_on"`
	HandedOver   *bool      `json:"handed_over"`
	Librarian    *Librarian `json:"librarian"`
	Book         *Book      `json:"book"`
	Condition    *string    `json:"condition"`
	Student      *Student   `json:"student"`
	School       *School    `json:"school"`
	CreatedAt    *time.Time `json:"createdAt"`
}

func (Lend) IsSearchResult() {}

type LendsConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*LendsEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type LendsEdge struct {
	Cursor string `json:"cursor"`
	Node   *Lend  `json:"node"`
}

type Lesson struct {
	ID        string                 `json:"id"`
	Name      *string                `json:"name"`
	Date      *time.Time             `json:"date"`
	TimeDate  *string                `json:"timeDate"`
	Start     *string                `json:"start"`
	Stop      *string                `json:"stop"`
	Duration  *float64               `json:"duration"`
	Done      *bool                  `json:"done"`
	Files     *StaticFilesConnection `json:"files"`
	Remarks   *string                `json:"remarks"`
	Subject   *Subject               `json:"subject"`
	Topic     *Topic                 `json:"topic"`
	Tutor     *User                  `json:"tutor"`
	Grade     *Grade                 `json:"grade"`
	School    *School                `json:"school"`
	CreatedAt *time.Time             `json:"createdAt"`
}

func (Lesson) IsSearchResult() {}

type LessonsConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*LessonsEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type LessonsEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Lesson `json:"node"`
}

type Librarian struct {
	ID               string                     `json:"id"`
	Salute           *string                    `json:"salute"`
	Name             *string                    `json:"name"`
	IDno             *string                    `json:"iDno"`
	NHIFno           *string                    `json:"nHIFno"`
	Cell             *string                    `json:"cell"`
	Email            *string                    `json:"email"`
	Gender           *string                    `json:"gender"`
	Roles            *string                    `json:"roles"`
	SemiFormal       *bool                      `json:"semiFormal"`
	ThumbNail        *string                    `json:"thumbNail"`
	AddrPoBox        *string                    `json:"addrPoBox"`
	AddrPostalCode   *string                    `json:"addrPostalCode"`
	AddrDistrict     *string                    `json:"addrDistrict"`
	AddrCounty       *string                    `json:"addrCounty"`
	AddrNationality  *string                    `json:"addrNationality"`
	IPAddress        *string                    `json:"ipAddress"`
	CreatedAt        *time.Time                 `json:"createdAt"`
	LendsAuthorized  *LendsConnection           `json:"lendsAuthorized"`
	Archives         *ArchivesConnection        `json:"archives"`
	CheckinCheckouts *CheckinCheckoutConnection `json:"checkinCheckouts"`
	Pass             *Pass                      `json:"pass"`
	School           *School                    `json:"school"`
}

type LibrariansConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*LibrariansEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type LibrariansEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Librarian `json:"node"`
}

type Manager struct {
	ID                 string                     `json:"id"`
	Salute             *string                    `json:"salute"`
	Name               *string                    `json:"name"`
	IDno               *string                    `json:"iDno"`
	NHIFno             *string                    `json:"nHIFno"`
	Cell               *string                    `json:"cell"`
	Email              *string                    `json:"email"`
	Gender             *string                    `json:"gender"`
	Roles              *string                    `json:"roles"`
	SemiFormal         *bool                      `json:"semiFormal"`
	ThumbNail          *string                    `json:"thumbNail"`
	AddrPoBox          *string                    `json:"addrPoBox"`
	AddrPostalCode     *string                    `json:"addrPostalCode"`
	AddrDistrict       *string                    `json:"addrDistrict"`
	AddrCounty         *string                    `json:"addrCounty"`
	AddrNationality    *string                    `json:"addrNationality"`
	IPAddress          *string                    `json:"ipAddress"`
	Messages           *MessagesConnection        `json:"messages"`
	AuthorizedPayments *PaymentsConnection        `json:"authorizedPayments"`
	CreatedAt          *time.Time                 `json:"createdAt"`
	Archives           *ArchivesConnection        `json:"archives"`
	CheckinCheckouts   *CheckinCheckoutConnection `json:"checkinCheckouts"`
	Pass               *Pass                      `json:"pass"`
	School             *School                    `json:"school"`
}

type ManagersConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*ManagersEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type ManagersEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Manager `json:"node"`
}

type Message struct {
	ID         string     `json:"id"`
	Topic      *string    `json:"topic"`
	Text       *string    `json:"text"`
	ReturnUser *User      `json:"returnUser"`
	Thread     *string    `json:"thread"`
	Delivered  *bool      `json:"delivered"`
	School     *School    `json:"school"`
	CreatedAt  *time.Time `json:"createdAt"`
}

func (Message) IsSearchResult() {}

type MessagesConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*MessagesEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type MessagesEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Message `json:"node"`
}

type Newsletter struct {
	ID          string                 `json:"id"`
	MainTopic   *string                `json:"mainTopic"`
	TopicOne    *string                `json:"topicOne"`
	TextOne     *string                `json:"textOne"`
	TopicTwo    *string                `json:"topicTwo"`
	TextTwo     *string                `json:"textTwo"`
	TopicThree  *string                `json:"topicThree"`
	TextThree   *string                `json:"textThree"`
	TopicFour   *string                `json:"topicFour"`
	TextFour    *string                `json:"textFour"`
	TopicFive   *string                `json:"topicFive"`
	TextFive    *string                `json:"textFive"`
	StaticFiles *StaticFilesConnection `json:"staticFiles"`
	RubberStamp *StaticFile            `json:"rubberStamp"`
	School      *School                `json:"school"`
	CreatedAt   *time.Time             `json:"createdAt"`
}

type NewsletterConnection struct {
	TotalCount int                `json:"totalCount"`
	Edges      []*NewslettersEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
}

type NewslettersEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Newsletter `json:"node"`
}

type PageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Pass struct {
	Worker *Staff  `json:"worker"`
	Pass   *string `json:"pass"`
	Active *bool   `json:"active"`
	School *School `json:"school"`
}

type PassesConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*PassesEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type PassesEdge struct {
	Cursor string `json:"cursor"`
	Node   *Pass  `json:"node"`
}

type Payment struct {
	ID              string     `json:"id"`
	Paymentype      *string    `json:"paymentype"`
	Payingfor       *string    `json:"payingfor"`
	Receiveruser    *User      `json:"receiveruser"`
	Receiverstudent *Student   `json:"receiverstudent"`
	Amount          *float64   `json:"amount"`
	Date            *string    `json:"date"`
	Account         *string    `json:"account"`
	Payee           *User      `json:"payee"`
	Status          *Status    `json:"status"`
	School          *School    `json:"school"`
	CreatedAt       *time.Time `json:"createdAt"`
}

func (Payment) IsSearchResult() {}

type PaymentsConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*PaymentsEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type PaymentsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Payment `json:"node"`
}

type Product struct {
	ID             string                       `json:"id"`
	Name           *string                      `json:"name"`
	Cost           *float64                     `json:"cost"`
	Quantity       *float64                     `json:"quantity"`
	Supplier       *Supplier                    `json:"supplier"`
	Category       *ProductCategoryEnum         `json:"category"`
	ReceivedOn     *time.Time                   `json:"receivedOn"`
	ReceivedBy     *Storekeeper                 `json:"receivedBy"`
	AllowedMinimum *float64                     `json:"allowedMinimum"`
	Dispensed      *DispensedProductsConnection `json:"dispensed"`
	School         *School                      `json:"school"`
	CreatedAt      *time.Time                   `json:"createdAt"`
}

func (Product) IsSearchResult() {}

type ProductsConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*ProductsEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type ProductsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Product `json:"node"`
}

type School struct {
	ID               string                         `json:"id"`
	Name             *string                        `json:"name"`
	Motto            *string                        `json:"motto"`
	Assets           *string                        `json:"assets"`
	Phone            *string                        `json:"phone"`
	Email            *string                        `json:"email"`
	Website          *string                        `json:"website"`
	AddrPoBox        *string                        `json:"addrPoBox"`
	AddrPostalCode   *string                        `json:"addrPostalCode"`
	AddrTown         *string                        `json:"addrTown"`
	AddrCounty       *string                        `json:"addrCounty"`
	AddrCountry      *string                        `json:"addrCountry"`
	Announcements    *AnnouncementConnection        `json:"announcements"`
	Administrators   *AdminsConnection              `json:"administrators"`
	Managers         *ManagersConnection            `json:"managers"`
	Accountants      *AccountantsConnection         `json:"accountants"`
	Librarians       *LibrariansConnection          `json:"librarians"`
	Tutors           *TutorsConnection              `json:"tutors"`
	Storekeepers     *StorekeepersConnection        `json:"storekeepers"`
	Guardians        *GuardiansConnection           `json:"guardians"`
	Suppliers        *SuppliersConnection           `json:"suppliers"`
	Staff            *StaffConnection               `json:"staff"`
	Payments         *PaymentsConnection            `json:"payments"`
	Grades           *GradesConnection              `json:"grades"`
	Examinations     *ExamsConnection               `json:"examinations"`
	Books            *BooksConnection               `json:"books"`
	Store            *ProductsConnection            `json:"store"`
	Departments      *DepartmentsConnection         `json:"departments"`
	Timetables       *TimeTablesConnection          `json:"timetables"`
	Students         *StudentsConnection            `json:"students"`
	StudentsInSchool *StudentinStudentoutConnection `json:"studentsInSchool"`
	StudentDiaries   *DiariesConnection             `json:"studentDiaries"`
	WorkersInSchool  *CheckinCheckoutConnection     `json:"workersInSchool"`
	Visitors         *VisitorsConnection            `json:"visitors"`
	SuggestionBox    *ThreadsConnection             `json:"suggestionBox"`
	Lessons          *LessonsConnection             `json:"lessons"`
	Fees             *FeesConnection                `json:"fees"`
	Cultures         *CulturesConnection            `json:"cultures"`
	Newsletters      *NewsletterConnection          `json:"newsletters"`
	Passes           *PassesConnection              `json:"passes"`
	Essenes          *EssenesConnection             `json:"essenes"`
	Archives         *ArchivesConnection            `json:"archives"`
	CreatedAt        *time.Time                     `json:"createdAt"`
}

type SchoolConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*SchoolEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type SchoolEdge struct {
	Cursor string  `json:"cursor"`
	Node   *School `json:"node"`
}

type Score struct {
	ID        string     `json:"id"`
	Score     *float64   `json:"score"`
	Student   *Student   `json:"student"`
	Subject   *Subject   `json:"subject"`
	Exam      *Exam      `json:"exam"`
	CreatedAt *time.Time `json:"createdAt"`
}

func (Score) IsSearchResult() {}

type ScoresConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*ScoresEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type ScoresEdge struct {
	Cursor string `json:"cursor"`
	Node   *Score `json:"node"`
}

type Staff struct {
	ID              string     `json:"id"`
	Salute          *string    `json:"salute"`
	Name            *string    `json:"name"`
	IDno            *string    `json:"iDno"`
	NHIFno          *string    `json:"nHIFno"`
	Cell            *string    `json:"cell"`
	Email           *string    `json:"email"`
	Roles           *string    `json:"roles"`
	SemiFormal      *bool      `json:"semiFormal"`
	ThumbNail       *string    `json:"thumbNail"`
	AddrPoBox       *string    `json:"addrPoBox"`
	AddrPostalCode  *string    `json:"addrPostalCode"`
	AddrDistrict    *string    `json:"addrDistrict"`
	AddrCounty      *string    `json:"addrCounty"`
	AddrNationality *string    `json:"addrNationality"`
	IPAddress       *string    `json:"ipAddress"`
	CreatedAt       *time.Time `json:"createdAt"`
	Staff           *bool      `json:"staff"`
	Pass            *Pass      `json:"pass"`
	School          *School    `json:"school"`
}

type StaffConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*StaffEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type StaffEdge struct {
	Cursor string `json:"cursor"`
	Node   *Staff `json:"node"`
}

type StaticFile struct {
	ID         string      `json:"id"`
	FileURI    *string     `json:"fileURI"`
	FileType   *string     `json:"fileType"`
	Lesson     *Lesson     `json:"lesson"`
	Newsletter *Newsletter `json:"newsletter"`
	Uploader   *User       `json:"uploader"`
	CreatedAt  *time.Time  `json:"createdAt"`
	School     *School     `json:"school"`
}

type StaticFilesConnection struct {
	TotalCount int                `json:"totalCount"`
	Edges      []*StaticFilesEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
}

type StaticFilesEdge struct {
	Cursor string      `json:"cursor"`
	Node   *StaticFile `json:"node"`
}

type Status struct {
	ID          string     `json:"id"`
	Balance     *float64   `json:"balance"`
	Confirmed   *bool      `json:"confirmed"`
	ConfirmedOn *time.Time `json:"confirmedOn"`
	ConfirmedBy *string    `json:"confirmedBy"`
	CreatedAt   *time.Time `json:"createdAt"`
	School      *School    `json:"school"`
}

type StatusConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*StatusEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type StatusEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Status `json:"node"`
}

type Storekeeper struct {
	ID                string                       `json:"id"`
	Salute            *string                      `json:"salute"`
	Name              *string                      `json:"name"`
	IDno              *string                      `json:"iDno"`
	NHIFno            *string                      `json:"nHIFno"`
	Cell              *string                      `json:"cell"`
	Email             *string                      `json:"email"`
	Gender            *string                      `json:"gender"`
	Roles             *string                      `json:"roles"`
	SemiFormal        *bool                        `json:"semiFormal"`
	ThumbNail         *string                      `json:"thumbNail"`
	AddrPoBox         *string                      `json:"addrPoBox"`
	AddrPostalCode    *string                      `json:"addrPostalCode"`
	AddrDistrict      *string                      `json:"addrDistrict"`
	AddrCounty        *string                      `json:"addrCounty"`
	AddrNationality   *string                      `json:"addrNationality"`
	IPAddress         *string                      `json:"ipAddress"`
	CreatedAt         *time.Time                   `json:"createdAt"`
	Products          *ProductsConnection          `json:"products"`
	ProductsDispensed *DispensedProductsConnection `json:"productsDispensed"`
	Archives          *ArchivesConnection          `json:"archives"`
	CheckinCheckouts  *CheckinCheckoutConnection   `json:"checkinCheckouts"`
	Pass              *Pass                        `json:"pass"`
	School            *School                      `json:"school"`
}

type StorekeepersConnection struct {
	TotalCount int                 `json:"totalCount"`
	Edges      []*StorekeepersEdge `json:"edges"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

type StorekeepersEdge struct {
	Cursor string       `json:"cursor"`
	Node   *Storekeeper `json:"node"`
}

type Student struct {
	ID            string                         `json:"id"`
	Name          *string                        `json:"name"`
	NemisNo       *string                        `json:"nemisNo"`
	NhifStatus    *bool                          `json:"nhifStatus"`
	BCertNo       *string                        `json:"bCertNo"`
	NickName      *string                        `json:"nickName"`
	Dob           *time.Time                     `json:"dob"`
	Hobies        *string                        `json:"hobies"`
	RoleModels    *string                        `json:"roleModels"`
	Careers       *string                        `json:"careers"`
	Motto         *string                        `json:"motto"`
	BloodGroup    *string                        `json:"bloodGroup"`
	BestFriend    *string                        `json:"bestFriend"`
	Languages     *string                        `json:"languages"`
	Game          *string                        `json:"game"`
	Subject       *string                        `json:"subject"`
	Book          *string                        `json:"book"`
	Quote         *string                        `json:"quote"`
	Animal        *string                        `json:"animal"`
	Device        *string                        `json:"device"`
	Thumbnail     *string                        `json:"thumbnail"`
	CreatedAt     *time.Time                     `json:"createdAt"`
	Guardians     *UsersConnection               `json:"guardians"`
	Grade         *Grade                         `json:"grade"`
	Payments      *PaymentsConnection            `json:"payments"`
	Attendance    *AttendanceConnection          `json:"attendance"`
	RoleCall      *StudentinStudentoutConnection `json:"roleCall"`
	Lends         *LendsConnection               `json:"lends"`
	Scores        *ScoresConnection              `json:"scores"`
	Diaries       *DiariesConnection             `json:"diaries"`
	Sharemeal     *bool                          `json:"sharemeal"`
	Greetstranger *bool                          `json:"greetstranger"`
	Firstaider    *bool                          `json:"firstaider"`
	School        *School                        `json:"school"`
}

func (Student) IsSearchResult() {}

type StudentinStudentout struct {
	ID        string     `json:"id"`
	Student   *Student   `json:"student"`
	TimeIn    *time.Time `json:"timeIn"`
	InSchool  *bool      `json:"inSchool"`
	TimeOut   *time.Time `json:"timeOut"`
	School    *School    `json:"school"`
	CreatedAt *time.Time `json:"createdAt"`
}

type StudentinStudentoutConnection struct {
	TotalCount int                        `json:"totalCount"`
	Edges      []*StudentinStudentoutEdge `json:"edges"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
}

type StudentinStudentoutEdge struct {
	Cursor string               `json:"cursor"`
	Node   *StudentinStudentout `json:"node"`
}

type StudentsConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*StudentsEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type StudentsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Student `json:"node"`
}

type Subject struct {
	ID         string            `json:"id"`
	Name       *string           `json:"name"`
	Department *Department       `json:"department"`
	Scores     *ScoresConnection `json:"scores"`
	School     *School           `json:"school"`
	CreatedAt  *time.Time        `json:"createdAt"`
}

func (Subject) IsSearchResult() {}

type SubjectsConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*SubjectsEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type SubjectsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Subject `json:"node"`
}

type Supplier struct {
	ID              string              `json:"id"`
	Salute          *string             `json:"salute"`
	Name            *string             `json:"name"`
	IDno            *string             `json:"iDno"`
	NHIFno          *string             `json:"nHIFno"`
	Cell            *string             `json:"cell"`
	Email           *string             `json:"email"`
	Gender          *string             `json:"gender"`
	Roles           *string             `json:"roles"`
	SemiFormal      *bool               `json:"semiFormal"`
	ThumbNail       *string             `json:"thumbNail"`
	AddrPoBox       *string             `json:"addrPoBox"`
	AddrPostalCode  *string             `json:"addrPostalCode"`
	AddrDistrict    *string             `json:"addrDistrict"`
	AddrCounty      *string             `json:"addrCounty"`
	AddrNationality *string             `json:"addrNationality"`
	IPAddress       *string             `json:"ipAddress"`
	CreatedAt       *time.Time          `json:"createdAt"`
	Products        *ProductsConnection `json:"products"`
	Payments        *PaymentsConnection `json:"payments"`
	Visits          *VisitorsConnection `json:"visits"`
	School          *School             `json:"school"`
}

type SuppliersConnection struct {
	TotalCount int              `json:"totalCount"`
	Edges      []*SuppliersEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
}

type SuppliersEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Supplier `json:"node"`
}

type Thread struct {
	ID        string              `json:"id"`
	New       *bool               `json:"new"`
	Messages  *MessagesConnection `json:"messages"`
	School    *School             `json:"school"`
	CreatedAt *time.Time          `json:"createdAt"`
}

type ThreadsConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ThreadsEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ThreadsEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Thread `json:"node"`
}

type TimeTable struct {
	ID        string     `json:"id"`
	Day       string     `json:"day"`
	Done      bool       `json:"done"`
	Lesson1   *Lesson    `json:"lesson1"`
	Lesson2   *Lesson    `json:"lesson2"`
	Lesson3   *Lesson    `json:"lesson3"`
	Lesson4   *Lesson    `json:"lesson4"`
	Lesson5   *Lesson    `json:"lesson5"`
	Lesson6   *Lesson    `json:"lesson6"`
	Lesson7   *Lesson    `json:"lesson7"`
	Lesson8   *Lesson    `json:"lesson8"`
	Grade     *Grade     `json:"grade"`
	School    *School    `json:"school"`
	CreatedAt *time.Time `json:"createdAt"`
}

func (TimeTable) IsSearchResult() {}

type TimeTablesConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*TimeTablesEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type TimeTablesEdge struct {
	Cursor string     `json:"cursor"`
	Node   *TimeTable `json:"node"`
}

type Topic struct {
	ID                  string     `json:"id"`
	Strand              *string    `json:"strand"`
	SubStrand           *string    `json:"subStrand"`
	OutComes            *string    `json:"outComes"`
	Experiences         *string    `json:"experiences"`
	Inquiries           *string    `json:"inquiries"`
	Competencies        *string    `json:"competencies"`
	LifeSkills          *string    `json:"lifeSkills"`
	ESddrr              *string    `json:"eSDDRR"`
	Values              *string    `json:"values"`
	OtherAreas          *string    `json:"otherAreas"`
	CommunityActivities *string    `json:"communityActivities"`
	NonFormalActivity   *string    `json:"nonFormalActivity"`
	Assessment          *string    `json:"assessment"`
	School              *School    `json:"school"`
	CreatedAt           *time.Time `json:"createdAt"`
}

func (Topic) IsSearchResult() {}

type TopicsConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*TopicsEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type TopicsEdge struct {
	Cursor string `json:"cursor"`
	Node   *Topic `json:"node"`
}

type Tutor struct {
	ID               string                     `json:"id"`
	Salute           *string                    `json:"salute"`
	Name             *string                    `json:"name"`
	IDno             *string                    `json:"iDno"`
	NHIFno           *string                    `json:"nHIFno"`
	Cell             *string                    `json:"cell"`
	Email            *string                    `json:"email"`
	Gender           *string                    `json:"gender"`
	Roles            *string                    `json:"roles"`
	SemiFormal       *bool                      `json:"semiFormal"`
	ThumbNail        *string                    `json:"thumbNail"`
	AddrPoBox        *string                    `json:"addrPoBox"`
	AddrPostalCode   *string                    `json:"addrPostalCode"`
	AddrDistrict     *string                    `json:"addrDistrict"`
	AddrCounty       *string                    `json:"addrCounty"`
	AddrNationality  *string                    `json:"addrNationality"`
	IPAddress        *string                    `json:"ipAddress"`
	CreatedAt        *time.Time                 `json:"createdAt"`
	TimeTableLessons *LessonsConnection         `json:"timeTableLessons"`
	Diaries          *DiariesConnection         `json:"diaries"`
	Archives         *ArchivesConnection        `json:"archives"`
	CheckinCheckouts *CheckinCheckoutConnection `json:"checkinCheckouts"`
	Pass             *Pass                      `json:"pass"`
	School           *School                    `json:"school"`
}

type TutorsConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []*TutorsEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
}

type TutorsEdge struct {
	Cursor string `json:"cursor"`
	Node   *Tutor `json:"node"`
}

type User struct {
	ID              string              `json:"id"`
	Salute          *string             `json:"salute"`
	Name            *string             `json:"name"`
	IDno            *string             `json:"iDno"`
	NHIFno          *string             `json:"nHIFno"`
	Cell            *string             `json:"cell"`
	Email           *string             `json:"email"`
	Gender          *string             `json:"gender"`
	Roles           *string             `json:"roles"`
	SemiFormal      *bool               `json:"semiFormal"`
	ThumbNail       *string             `json:"thumbNail"`
	AddrPoBox       *string             `json:"addrPoBox"`
	AddrPostalCode  *string             `json:"addrPostalCode"`
	AddrDistrict    *string             `json:"addrDistrict"`
	AddrCounty      *string             `json:"addrCounty"`
	AddrNationality *string             `json:"addrNationality"`
	IPAddress       *string             `json:"ipAddress"`
	CreatedAt       *time.Time          `json:"createdAt"`
	Students        *StudentsConnection `json:"students"`
	Payments        *PaymentsConnection `json:"payments"`
	Messages        *MessagesConnection `json:"messages"`
	Essenes         *EssenesConnection  `json:"essenes"`
	School          *School             `json:"school"`
}

func (User) IsSearchResult() {}

type UsersConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*UsersEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type UsersEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type Visitor struct {
	ID           string     `json:"id"`
	Salute       *string    `json:"salute"`
	Name         *string    `json:"name"`
	IDno         *string    `json:"iDno"`
	Cell         *string    `json:"cell"`
	Email        *string    `json:"email"`
	Visiting     *string    `json:"visiting"`
	Purpose      *string    `json:"purpose"`
	Vehicle      *string    `json:"vehicle"`
	Belongings   *string    `json:"belongings"`
	TimeIn       *time.Time `json:"timeIn"`
	TimeOut      *time.Time `json:"timeOut"`
	ThumbScan    *string    `json:"thumbScan"`
	VisitingFreq *float64   `json:"visitingFreq"`
	AuthorizedBy *Admin     `json:"authorizedBy"`
	CreatedAt    *time.Time `json:"createdAt"`
	School       *School    `json:"school"`
}

func (Visitor) IsSearchResult() {}

type VisitorsConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*VisitorsEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type VisitorsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Visitor `json:"node"`
}

type AccEnum string

const (
	AccEnumMPesa   AccEnum = "mPesa"
	AccEnumEquitel AccEnum = "Equitel"
	AccEnumVisa    AccEnum = "VISA"
	AccEnumBurser  AccEnum = "Burser"
)

var AllAccEnum = []AccEnum{
	AccEnumMPesa,
	AccEnumEquitel,
	AccEnumVisa,
	AccEnumBurser,
}

func (e AccEnum) IsValid() bool {
	switch e {
	case AccEnumMPesa, AccEnumEquitel, AccEnumVisa, AccEnumBurser:
		return true
	}
	return false
}

func (e AccEnum) String() string {
	return string(e)
}

func (e *AccEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid accEnum", str)
	}
	return nil
}

func (e AccEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArchiveTypeEnum string

const (
	ArchiveTypeEnumUser          ArchiveTypeEnum = "User"
	ArchiveTypeEnumStudent       ArchiveTypeEnum = "Student"
	ArchiveTypeEnumAnnounce      ArchiveTypeEnum = "Announce"
	ArchiveTypeEnumAttend        ArchiveTypeEnum = "Attend"
	ArchiveTypeEnumBook          ArchiveTypeEnum = "Book"
	ArchiveTypeEnumCulture       ArchiveTypeEnum = "Culture"
	ArchiveTypeEnumStudentDiary  ArchiveTypeEnum = "StudentDiary"
	ArchiveTypeEnumDept          ArchiveTypeEnum = "Dept"
	ArchiveTypeEnumExam          ArchiveTypeEnum = "Exam"
	ArchiveTypeEnumFee           ArchiveTypeEnum = "Fee"
	ArchiveTypeEnumGrade         ArchiveTypeEnum = "Grade"
	ArchiveTypeEnumLend          ArchiveTypeEnum = "Lend"
	ArchiveTypeEnumLesson        ArchiveTypeEnum = "Lesson"
	ArchiveTypeEnumMessage       ArchiveTypeEnum = "Message"
	ArchiveTypeEnumNewsletter    ArchiveTypeEnum = "Newsletter"
	ArchiveTypeEnumPayment       ArchiveTypeEnum = "Payment"
	ArchiveTypeEnumProduct       ArchiveTypeEnum = "Product"
	ArchiveTypeEnumDispensedProd ArchiveTypeEnum = "DispensedProd"
	ArchiveTypeEnumScore         ArchiveTypeEnum = "Score"
	ArchiveTypeEnumStatus        ArchiveTypeEnum = "Status"
	ArchiveTypeEnumSubject       ArchiveTypeEnum = "Subject"
	ArchiveTypeEnumTimetable     ArchiveTypeEnum = "Timetable"
	ArchiveTypeEnumTopic         ArchiveTypeEnum = "Topic"
	ArchiveTypeEnumVisitor       ArchiveTypeEnum = "Visitor"
)

var AllArchiveTypeEnum = []ArchiveTypeEnum{
	ArchiveTypeEnumUser,
	ArchiveTypeEnumStudent,
	ArchiveTypeEnumAnnounce,
	ArchiveTypeEnumAttend,
	ArchiveTypeEnumBook,
	ArchiveTypeEnumCulture,
	ArchiveTypeEnumStudentDiary,
	ArchiveTypeEnumDept,
	ArchiveTypeEnumExam,
	ArchiveTypeEnumFee,
	ArchiveTypeEnumGrade,
	ArchiveTypeEnumLend,
	ArchiveTypeEnumLesson,
	ArchiveTypeEnumMessage,
	ArchiveTypeEnumNewsletter,
	ArchiveTypeEnumPayment,
	ArchiveTypeEnumProduct,
	ArchiveTypeEnumDispensedProd,
	ArchiveTypeEnumScore,
	ArchiveTypeEnumStatus,
	ArchiveTypeEnumSubject,
	ArchiveTypeEnumTimetable,
	ArchiveTypeEnumTopic,
	ArchiveTypeEnumVisitor,
}

func (e ArchiveTypeEnum) IsValid() bool {
	switch e {
	case ArchiveTypeEnumUser, ArchiveTypeEnumStudent, ArchiveTypeEnumAnnounce, ArchiveTypeEnumAttend, ArchiveTypeEnumBook, ArchiveTypeEnumCulture, ArchiveTypeEnumStudentDiary, ArchiveTypeEnumDept, ArchiveTypeEnumExam, ArchiveTypeEnumFee, ArchiveTypeEnumGrade, ArchiveTypeEnumLend, ArchiveTypeEnumLesson, ArchiveTypeEnumMessage, ArchiveTypeEnumNewsletter, ArchiveTypeEnumPayment, ArchiveTypeEnumProduct, ArchiveTypeEnumDispensedProd, ArchiveTypeEnumScore, ArchiveTypeEnumStatus, ArchiveTypeEnumSubject, ArchiveTypeEnumTimetable, ArchiveTypeEnumTopic, ArchiveTypeEnumVisitor:
		return true
	}
	return false
}

func (e ArchiveTypeEnum) String() string {
	return string(e)
}

func (e *ArchiveTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArchiveTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid archiveTypeEnum", str)
	}
	return nil
}

func (e ArchiveTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ConditionEnum string

const (
	ConditionEnumBetterThanHanded ConditionEnum = "BetterThanHanded"
	ConditionEnumAsHanded         ConditionEnum = "AsHanded"
	ConditionEnumSlightlyDamaged  ConditionEnum = "SlightlyDamaged"
	ConditionEnumNeedsRepair      ConditionEnum = "NeedsRepair"
	ConditionEnumBeyondRepair     ConditionEnum = "BeyondRepair"
)

var AllConditionEnum = []ConditionEnum{
	ConditionEnumBetterThanHanded,
	ConditionEnumAsHanded,
	ConditionEnumSlightlyDamaged,
	ConditionEnumNeedsRepair,
	ConditionEnumBeyondRepair,
}

func (e ConditionEnum) IsValid() bool {
	switch e {
	case ConditionEnumBetterThanHanded, ConditionEnumAsHanded, ConditionEnumSlightlyDamaged, ConditionEnumNeedsRepair, ConditionEnumBeyondRepair:
		return true
	}
	return false
}

func (e ConditionEnum) String() string {
	return string(e)
}

func (e *ConditionEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConditionEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid conditionEnum", str)
	}
	return nil
}

func (e ConditionEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeptEnum string

const (
	DeptEnumLanguagesDept  DeptEnum = "LanguagesDept"
	DeptEnumStemDept       DeptEnum = "StemDept"
	DeptEnumHumanitiesDept DeptEnum = "HumanitiesDept"
	DeptEnumArtsDept       DeptEnum = "ArtsDept"
)

var AllDeptEnum = []DeptEnum{
	DeptEnumLanguagesDept,
	DeptEnumStemDept,
	DeptEnumHumanitiesDept,
	DeptEnumArtsDept,
}

func (e DeptEnum) IsValid() bool {
	switch e {
	case DeptEnumLanguagesDept, DeptEnumStemDept, DeptEnumHumanitiesDept, DeptEnumArtsDept:
		return true
	}
	return false
}

func (e DeptEnum) String() string {
	return string(e)
}

func (e *DeptEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeptEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid deptEnum", str)
	}
	return nil
}

func (e DeptEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FileTypeEnum string

const (
	FileTypeEnumLessonFile             FileTypeEnum = "LessonFile"
	FileTypeEnumNewsletterFile         FileTypeEnum = "NewsletterFile"
	FileTypeEnumAttendanceConfirmedGif FileTypeEnum = "AttendanceConfirmedGIF"
	FileTypeEnumUserThumb              FileTypeEnum = "UserThumb"
	FileTypeEnumStudentThumb           FileTypeEnum = "StudentThumb"
)

var AllFileTypeEnum = []FileTypeEnum{
	FileTypeEnumLessonFile,
	FileTypeEnumNewsletterFile,
	FileTypeEnumAttendanceConfirmedGif,
	FileTypeEnumUserThumb,
	FileTypeEnumStudentThumb,
}

func (e FileTypeEnum) IsValid() bool {
	switch e {
	case FileTypeEnumLessonFile, FileTypeEnumNewsletterFile, FileTypeEnumAttendanceConfirmedGif, FileTypeEnumUserThumb, FileTypeEnumStudentThumb:
		return true
	}
	return false
}

func (e FileTypeEnum) String() string {
	return string(e)
}

func (e *FileTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid fileTypeEnum", str)
	}
	return nil
}

func (e FileTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GenderEnum string

const (
	GenderEnumMale     GenderEnum = "MALE"
	GenderEnumFemale   GenderEnum = "FEMALE"
	GenderEnumIntersex GenderEnum = "INTERSEX"
)

var AllGenderEnum = []GenderEnum{
	GenderEnumMale,
	GenderEnumFemale,
	GenderEnumIntersex,
}

func (e GenderEnum) IsValid() bool {
	switch e {
	case GenderEnumMale, GenderEnumFemale, GenderEnumIntersex:
		return true
	}
	return false
}

func (e GenderEnum) String() string {
	return string(e)
}

func (e *GenderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid genderEnum", str)
	}
	return nil
}

func (e GenderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GradeEnum string

const (
	GradeEnumPrePrimaryOne GradeEnum = "Pre_Primary_One"
	GradeEnumPrePrimaryTwo GradeEnum = "Pre_Primary_Two"
	GradeEnumFirstGrade    GradeEnum = "First_Grade"
	GradeEnumSecondGrade   GradeEnum = "Second_Grade"
	GradeEnumThirdGrade    GradeEnum = "Third_Grade"
	GradeEnumFourthGrade   GradeEnum = "Fourth_Grade"
	GradeEnumFifthGrade    GradeEnum = "Fifth_Grade"
	GradeEnumSixthGrade    GradeEnum = "Sixth_Grade"
)

var AllGradeEnum = []GradeEnum{
	GradeEnumPrePrimaryOne,
	GradeEnumPrePrimaryTwo,
	GradeEnumFirstGrade,
	GradeEnumSecondGrade,
	GradeEnumThirdGrade,
	GradeEnumFourthGrade,
	GradeEnumFifthGrade,
	GradeEnumSixthGrade,
}

func (e GradeEnum) IsValid() bool {
	switch e {
	case GradeEnumPrePrimaryOne, GradeEnumPrePrimaryTwo, GradeEnumFirstGrade, GradeEnumSecondGrade, GradeEnumThirdGrade, GradeEnumFourthGrade, GradeEnumFifthGrade, GradeEnumSixthGrade:
		return true
	}
	return false
}

func (e GradeEnum) String() string {
	return string(e)
}

func (e *GradeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GradeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid gradeEnum", str)
	}
	return nil
}

func (e GradeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentForEnum string

const (
	PaymentForEnumSchoolFees PaymentForEnum = "schoolFees"
	PaymentForEnumSalary     PaymentForEnum = "salary"
	PaymentForEnumSupplies   PaymentForEnum = "supplies"
	PaymentForEnumPettyCash  PaymentForEnum = "pettyCash"
	PaymentForEnumRefund     PaymentForEnum = "refund"
)

var AllPaymentForEnum = []PaymentForEnum{
	PaymentForEnumSchoolFees,
	PaymentForEnumSalary,
	PaymentForEnumSupplies,
	PaymentForEnumPettyCash,
	PaymentForEnumRefund,
}

func (e PaymentForEnum) IsValid() bool {
	switch e {
	case PaymentForEnumSchoolFees, PaymentForEnumSalary, PaymentForEnumSupplies, PaymentForEnumPettyCash, PaymentForEnumRefund:
		return true
	}
	return false
}

func (e PaymentForEnum) String() string {
	return string(e)
}

func (e *PaymentForEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentForEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid paymentForEnum", str)
	}
	return nil
}

func (e PaymentForEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentTypeEnum string

const (
	PaymentTypeEnumExpenditure PaymentTypeEnum = "expenditure"
	PaymentTypeEnumIncome      PaymentTypeEnum = "income"
	PaymentTypeEnumRefund      PaymentTypeEnum = "refund"
)

var AllPaymentTypeEnum = []PaymentTypeEnum{
	PaymentTypeEnumExpenditure,
	PaymentTypeEnumIncome,
	PaymentTypeEnumRefund,
}

func (e PaymentTypeEnum) IsValid() bool {
	switch e {
	case PaymentTypeEnumExpenditure, PaymentTypeEnumIncome, PaymentTypeEnumRefund:
		return true
	}
	return false
}

func (e PaymentTypeEnum) String() string {
	return string(e)
}

func (e *PaymentTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid paymentTypeEnum", str)
	}
	return nil
}

func (e PaymentTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PeriodEnum string

const (
	PeriodEnumLesson1_900am930am    PeriodEnum = "Lesson1_900am_930am"
	PeriodEnumLesson2_930am1000am   PeriodEnum = "Lesson2_930am_1000am"
	PeriodEnumLesson3_1030am1100pm  PeriodEnum = "Lesson3_1030am_1100pm"
	PeriodEnumLesson4_1100pm11300pm PeriodEnum = "Lesson4_1100pm_11300pm"
	PeriodEnumLesson5_1130pm1200pm  PeriodEnum = "Lesson5_1130pm_1200pm"
	PeriodEnumLesson6_100pm130pm    PeriodEnum = "Lesson6_100pm_130pm"
	PeriodEnumLesson7_130pm200pm    PeriodEnum = "Lesson7_130pm_200pm"
	PeriodEnumLesson8_230pm300pm    PeriodEnum = "Lesson8_230pm_300pm"
)

var AllPeriodEnum = []PeriodEnum{
	PeriodEnumLesson1_900am930am,
	PeriodEnumLesson2_930am1000am,
	PeriodEnumLesson3_1030am1100pm,
	PeriodEnumLesson4_1100pm11300pm,
	PeriodEnumLesson5_1130pm1200pm,
	PeriodEnumLesson6_100pm130pm,
	PeriodEnumLesson7_130pm200pm,
	PeriodEnumLesson8_230pm300pm,
}

func (e PeriodEnum) IsValid() bool {
	switch e {
	case PeriodEnumLesson1_900am930am, PeriodEnumLesson2_930am1000am, PeriodEnumLesson3_1030am1100pm, PeriodEnumLesson4_1100pm11300pm, PeriodEnumLesson5_1130pm1200pm, PeriodEnumLesson6_100pm130pm, PeriodEnumLesson7_130pm200pm, PeriodEnumLesson8_230pm300pm:
		return true
	}
	return false
}

func (e PeriodEnum) String() string {
	return string(e)
}

func (e *PeriodEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PeriodEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid periodEnum", str)
	}
	return nil
}

func (e PeriodEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductCategoryEnum string

const (
	ProductCategoryEnumStationary ProductCategoryEnum = "Stationary"
	ProductCategoryEnumKitchen    ProductCategoryEnum = "Kitchen"
	ProductCategoryEnumWelfare    ProductCategoryEnum = "Welfare"
	ProductCategoryEnumOthers     ProductCategoryEnum = "Others"
)

var AllProductCategoryEnum = []ProductCategoryEnum{
	ProductCategoryEnumStationary,
	ProductCategoryEnumKitchen,
	ProductCategoryEnumWelfare,
	ProductCategoryEnumOthers,
}

func (e ProductCategoryEnum) IsValid() bool {
	switch e {
	case ProductCategoryEnumStationary, ProductCategoryEnumKitchen, ProductCategoryEnumWelfare, ProductCategoryEnumOthers:
		return true
	}
	return false
}

func (e ProductCategoryEnum) String() string {
	return string(e)
}

func (e *ProductCategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductCategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid productCategoryEnum", str)
	}
	return nil
}

func (e ProductCategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RolesEnum string

const (
	RolesEnumAdmin       RolesEnum = "Admin"
	RolesEnumAccountant  RolesEnum = "Accountant"
	RolesEnumGuardian    RolesEnum = "Guardian"
	RolesEnumLibrarian   RolesEnum = "Librarian"
	RolesEnumManager     RolesEnum = "Manager"
	RolesEnumStoreKeeper RolesEnum = "StoreKeeper"
	RolesEnumTutor       RolesEnum = "Tutor"
	RolesEnumSupplier    RolesEnum = "Supplier"
)

var AllRolesEnum = []RolesEnum{
	RolesEnumAdmin,
	RolesEnumAccountant,
	RolesEnumGuardian,
	RolesEnumLibrarian,
	RolesEnumManager,
	RolesEnumStoreKeeper,
	RolesEnumTutor,
	RolesEnumSupplier,
}

func (e RolesEnum) IsValid() bool {
	switch e {
	case RolesEnumAdmin, RolesEnumAccountant, RolesEnumGuardian, RolesEnumLibrarian, RolesEnumManager, RolesEnumStoreKeeper, RolesEnumTutor, RolesEnumSupplier:
		return true
	}
	return false
}

func (e RolesEnum) String() string {
	return string(e)
}

func (e *RolesEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RolesEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid rolesEnum", str)
	}
	return nil
}

func (e RolesEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SaluteEnum string

const (
	SaluteEnumMr   SaluteEnum = "Mr"
	SaluteEnumMrs  SaluteEnum = "Mrs"
	SaluteEnumMiss SaluteEnum = "Miss"
	SaluteEnumDr   SaluteEnum = "Dr"
	SaluteEnumPst  SaluteEnum = "Pst"
	SaluteEnumEng  SaluteEnum = "Eng"
	SaluteEnumProf SaluteEnum = "Prof"
	SaluteEnumSir  SaluteEnum = "Sir"
)

var AllSaluteEnum = []SaluteEnum{
	SaluteEnumMr,
	SaluteEnumMrs,
	SaluteEnumMiss,
	SaluteEnumDr,
	SaluteEnumPst,
	SaluteEnumEng,
	SaluteEnumProf,
	SaluteEnumSir,
}

func (e SaluteEnum) IsValid() bool {
	switch e {
	case SaluteEnumMr, SaluteEnumMrs, SaluteEnumMiss, SaluteEnumDr, SaluteEnumPst, SaluteEnumEng, SaluteEnumProf, SaluteEnumSir:
		return true
	}
	return false
}

func (e SaluteEnum) String() string {
	return string(e)
}

func (e *SaluteEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SaluteEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid saluteEnum", str)
	}
	return nil
}

func (e SaluteEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SenesterEnum string

const (
	SenesterEnumTermOne   SenesterEnum = "TermOne"
	SenesterEnumTermTwo   SenesterEnum = "TermTwo"
	SenesterEnumTermThree SenesterEnum = "TermThree"
)

var AllSenesterEnum = []SenesterEnum{
	SenesterEnumTermOne,
	SenesterEnumTermTwo,
	SenesterEnumTermThree,
}

func (e SenesterEnum) IsValid() bool {
	switch e {
	case SenesterEnumTermOne, SenesterEnumTermTwo, SenesterEnumTermThree:
		return true
	}
	return false
}

func (e SenesterEnum) String() string {
	return string(e)
}

func (e *SenesterEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SenesterEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid senesterEnum", str)
	}
	return nil
}

func (e SenesterEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubjectEnum string

const (
	SubjectEnumLanguageActivitiesPp1            SubjectEnum = "Language_Activities_PP1"
	SubjectEnumMathematicalActivitiesPp1        SubjectEnum = "Mathematical_Activities_PP1"
	SubjectEnumEnvironmentalActivitiesPp1       SubjectEnum = "Environmental_Activities_PP1"
	SubjectEnumPsychomotorCreativeActivitiesPp1 SubjectEnum = "Psychomotor_Creative_Activities_PP1"
	SubjectEnumChristianReligiousActivitiesPp1  SubjectEnum = "Christian_Religious_Activities_PP1"
	SubjectEnumIslamicReligiousActivitiesPp1    SubjectEnum = "Islamic_Religious_Activities_PP1"
	SubjectEnumHinduReligiousActivitiesPp1      SubjectEnum = "Hindu_Religious_Activities_PP1"
	SubjectEnumPastoralProgrammeInstructionPp1  SubjectEnum = "Pastoral_Programme_Instruction_PP1"
	SubjectEnumLanguageActivitiesPp2            SubjectEnum = "Language_Activities_PP2"
	SubjectEnumMathematicalActivitiesPp2        SubjectEnum = "Mathematical_Activities_PP2"
	SubjectEnumEnvironmentalActivitiesPp2       SubjectEnum = "Environmental_Activities_PP2"
	SubjectEnumPsychomotorCreativeActivitiesPp2 SubjectEnum = "Psychomotor_Creative_Activities_PP2"
	SubjectEnumChristianReligiousActivitiesPp2  SubjectEnum = "Christian_Religious_Activities_PP2"
	SubjectEnumIslamicReligiousActivitiesPp2    SubjectEnum = "Islamic_Religious_Activities_PP2"
	SubjectEnumHinduReligiousActivitiesPp2      SubjectEnum = "Hindu_Religious_Activities_PP2"
	SubjectEnumPastoralProgrammeInstructionPp2  SubjectEnum = "Pastoral_Programme_Instruction_PP2"
	SubjectEnumLiteracyActivitiesGrd1           SubjectEnum = "Literacy_Activities_GRD1"
	SubjectEnumKiswahiliLanguageActivitiesGrd1  SubjectEnum = "Kiswahili_Language_Activities_GRD1"
	SubjectEnumKenyaSignLanguageGrd1            SubjectEnum = "Kenya_Sign_Language_GRD1"
	SubjectEnumEnglishLanguageActivitiesGrd1    SubjectEnum = "English_Language_Activities_GRD1"
	SubjectEnumMathematicalActivitiesGrd1       SubjectEnum = "Mathematical_Activities_GRD1"
	SubjectEnumEnvironmentalActivitiesGrd1      SubjectEnum = "Environmental_Activities_GRD1"
	SubjectEnumHygieneNutritionActivitiesGrd1   SubjectEnum = "Hygiene_Nutrition_Activities_GRD1"
	SubjectEnumMovementCreativeActivitiesGrd1   SubjectEnum = "Movement_Creative_Activities_GRD1"
	SubjectEnumChristianReligiousActivitiesGrd1 SubjectEnum = "Christian_Religious_Activities_GRD1"
	SubjectEnumIslamicReligiousActivitiesGrd1   SubjectEnum = "Islamic_Religious_Activities_GRD1"
	SubjectEnumHinduReligiousActivitiesGrd1     SubjectEnum = "Hindu_Religious_Activities_GRD1"
	SubjectEnumPastoralProgrammeInstructionGrd1 SubjectEnum = "Pastoral_Programme_Instruction_GRD1"
	SubjectEnumLiteracyActivitiesGrd2           SubjectEnum = "Literacy_Activities_GRD2"
	SubjectEnumKiswahiliLanguageActivitiesGrd2  SubjectEnum = "Kiswahili_Language_Activities_GRD2"
	SubjectEnumKenyaSignLanguageGrd2            SubjectEnum = "Kenya_Sign_Language_GRD2"
	SubjectEnumEnglishLanguageActivitiesGrd2    SubjectEnum = "English_Language_Activities_GRD2"
	SubjectEnumMathematicalActivitiesGrd2       SubjectEnum = "Mathematical_Activities_GRD2"
	SubjectEnumEnvironmentalActivitiesGrd2      SubjectEnum = "Environmental_Activities_GRD2"
	SubjectEnumHygieneNutritionActivitiesGrd2   SubjectEnum = "Hygiene_Nutrition_Activities_GRD2"
	SubjectEnumMovementCreativeActivitiesGrd2   SubjectEnum = "Movement_Creative_Activities_GRD2"
	SubjectEnumChristianReligiousActivitiesGrd2 SubjectEnum = "Christian_Religious_Activities_GRD2"
	SubjectEnumIslamicReligiousActivitiesGrd2   SubjectEnum = "Islamic_Religious_Activities_GRD2"
	SubjectEnumHinduReligiousActivitiesGrd2     SubjectEnum = "Hindu_Religious_Activities_GRD2"
	SubjectEnumPastoralProgrammeInstructionGrd2 SubjectEnum = "Pastoral_Programme_Instruction_GRD2"
	SubjectEnumLiteracyActivitiesGrd3           SubjectEnum = "Literacy_Activities_GRD3"
	SubjectEnumKiswahiliLanguageActivitiesGrd3  SubjectEnum = "Kiswahili_Language_Activities_GRD3"
	SubjectEnumKenyaSignLanguageGrd3            SubjectEnum = "Kenya_Sign_Language_GRD3"
	SubjectEnumEnglishLanguageActivitiesGrd3    SubjectEnum = "English_Language_Activities_GRD3"
	SubjectEnumMathematicalActivitiesGrd3       SubjectEnum = "Mathematical_Activities_GRD3"
	SubjectEnumEnvironmentalActivitiesGrd3      SubjectEnum = "Environmental_Activities_GRD3"
	SubjectEnumHygieneNutritionActivitiesGrd3   SubjectEnum = "Hygiene_Nutrition_Activities_GRD3"
	SubjectEnumMovementCreativeActivitiesGrd3   SubjectEnum = "Movement_Creative_Activities_GRD3"
	SubjectEnumChristianReligiousActivitiesGrd3 SubjectEnum = "Christian_Religious_Activities_GRD3"
	SubjectEnumIslamicReligiousActivitiesGrd3   SubjectEnum = "Islamic_Religious_Activities_GRD3"
	SubjectEnumHinduReligiousActivitiesGrd3     SubjectEnum = "Hindu_Religious_Activities_GRD3"
	SubjectEnumPastoralProgrammeInstructionGrd3 SubjectEnum = "Pastoral_Programme_Instruction_GRD3"
	SubjectEnumIndigeniousActivitiesGrd4        SubjectEnum = "Indigenious_Activities_GRD4"
	SubjectEnumKiswahiliLanguageActivitiesGrd4  SubjectEnum = "Kiswahili_Language_Activities_GRD4"
	SubjectEnumKenyaSignLanguageGrd4            SubjectEnum = "Kenya_Sign_Language_GRD4"
	SubjectEnumEnglishLanguageActivitiesGrd4    SubjectEnum = "English_Language_Activities_GRD4"
	SubjectEnumGermanLanguageActivitiesGrd4     SubjectEnum = "German_Language_Activities_GRD4"
	SubjectEnumFrenchLanguageActivitiesGrd4     SubjectEnum = "French_Language_Activities_GRD4"
	SubjectEnumMandarinLanguageActivitiesGrd4   SubjectEnum = "Mandarin_Language_Activities_GRD4"
	SubjectEnumArabicLanguageActivitiesGrd4     SubjectEnum = "Arabic_Language_Activities_GRD4"
	SubjectEnumMathematicalActivitiesGrd4       SubjectEnum = "Mathematical_Activities_GRD4"
	SubjectEnumScienceTechnologyActivitiesGrd4  SubjectEnum = "Science_Technology_Activities_GRD4"
	SubjectEnumHomeScienceActivitiesGrd4        SubjectEnum = "Home_Science_Activities_GRD4"
	SubjectEnumArtCraftActivitiesGrd4           SubjectEnum = "Art_Craft_Activities_GRD4"
	SubjectEnumMusicActivitiesGrd4              SubjectEnum = "Music_Activities_GRD4"
	SubjectEnumSocialActivitiesGrd4             SubjectEnum = "Social_Activities_GRD4"
	SubjectEnumAgricultureActivitiesGrd4        SubjectEnum = "Agriculture_Activities_GRD4"
	SubjectEnumPhysicalHealthActivitiesGrd4     SubjectEnum = "Physical_Health_Activities_GRD4"
	SubjectEnumChristianReligiousActivitiesGrd4 SubjectEnum = "Christian_Religious_Activities_GRD4"
	SubjectEnumIslamicReligiousActivitiesGrd4   SubjectEnum = "Islamic_Religious_Activities_GRD4"
	SubjectEnumHinduReligiousActivitiesGrd4     SubjectEnum = "Hindu_Religious_Activities_GRD4"
	SubjectEnumPastoralProgrammeInstructionGrd4 SubjectEnum = "Pastoral_Programme_Instruction_GRD4"
	SubjectEnumIndigeniousActivitiesGrd5        SubjectEnum = "Indigenious_Activities_GRD5"
	SubjectEnumKiswahiliLanguageActivitiesGrd5  SubjectEnum = "Kiswahili_Language_Activities_GRD5"
	SubjectEnumKenyaSignLanguageGrd5            SubjectEnum = "Kenya_Sign_Language_GRD5"
	SubjectEnumEnglishLanguageActivitiesGrd5    SubjectEnum = "English_Language_Activities_GRD5"
	SubjectEnumGermanLanguageActivitiesGrd5     SubjectEnum = "German_Language_Activities_GRD5"
	SubjectEnumFrenchLanguageActivitiesGrd5     SubjectEnum = "French_Language_Activities_GRD5"
	SubjectEnumMandarinLanguageActivitiesGrd5   SubjectEnum = "Mandarin_Language_Activities_GRD5"
	SubjectEnumArabicLanguageActivitiesGrd5     SubjectEnum = "Arabic_Language_Activities_GRD5"
	SubjectEnumMathematicalActivitiesGrd5       SubjectEnum = "Mathematical_Activities_GRD5"
	SubjectEnumScienceTechnologyActivitiesGrd5  SubjectEnum = "Science_Technology_Activities_GRD5"
	SubjectEnumHomeScienceActivitiesGrd5        SubjectEnum = "Home_Science_Activities_GRD5"
	SubjectEnumArtCraftActivitiesGrd5           SubjectEnum = "Art_Craft_Activities_GRD5"
	SubjectEnumMusicActivitiesGrd5              SubjectEnum = "Music_Activities_GRD5"
	SubjectEnumSocialActivitiesGrd5             SubjectEnum = "Social_Activities_GRD5"
	SubjectEnumAgricultureActivitiesGrd5        SubjectEnum = "Agriculture_Activities_GRD5"
	SubjectEnumPhysicalHealthActivitiesGrd5     SubjectEnum = "Physical_Health_Activities_GRD5"
	SubjectEnumChristianReligiousActivitiesGrd5 SubjectEnum = "Christian_Religious_Activities_GRD5"
	SubjectEnumIslamicReligiousActivitiesGrd5   SubjectEnum = "Islamic_Religious_Activities_GRD5"
	SubjectEnumHinduReligiousActivitiesGrd5     SubjectEnum = "Hindu_Religious_Activities_GRD5"
	SubjectEnumPastoralProgrammeInstructionGrd5 SubjectEnum = "Pastoral_Programme_Instruction_GRD5"
	SubjectEnumIndigeniousActivitiesGrd6        SubjectEnum = "Indigenious_Activities_GRD6"
	SubjectEnumKiswahiliLanguageActivitiesGrd6  SubjectEnum = "Kiswahili_Language_Activities_GRD6"
	SubjectEnumKenyaSignLanguageGrd6            SubjectEnum = "Kenya_Sign_Language_GRD6"
	SubjectEnumEnglishLanguageActivitiesGrd6    SubjectEnum = "English_Language_Activities_GRD6"
	SubjectEnumGermanLanguageActivitiesGrd6     SubjectEnum = "German_Language_Activities_GRD6"
	SubjectEnumFrenchLanguageActivitiesGrd6     SubjectEnum = "French_Language_Activities_GRD6"
	SubjectEnumMandarinLanguageActivitiesGrd6   SubjectEnum = "Mandarin_Language_Activities_GRD6"
	SubjectEnumArabicLanguageActivitiesGrd6     SubjectEnum = "Arabic_Language_Activities_GRD6"
	SubjectEnumMathematicalActivitiesGrd6       SubjectEnum = "Mathematical_Activities_GRD6"
	SubjectEnumScienceTechnologyActivitiesGrd6  SubjectEnum = "Science_Technology_Activities_GRD6"
	SubjectEnumHomeScienceActivitiesGrd6        SubjectEnum = "Home_Science_Activities_GRD6"
	SubjectEnumArtCraftActivitiesGrd6           SubjectEnum = "Art_Craft_Activities_GRD6"
	SubjectEnumMusicActivitiesGrd6              SubjectEnum = "Music_Activities_GRD6"
	SubjectEnumSocialActivitiesGrd6             SubjectEnum = "Social_Activities_GRD6"
	SubjectEnumAgricultureActivitiesGrd6        SubjectEnum = "Agriculture_Activities_GRD6"
	SubjectEnumPhysicalHealthActivitiesGrd6     SubjectEnum = "Physical_Health_Activities_GRD6"
	SubjectEnumChristianReligiousActivitiesGrd6 SubjectEnum = "Christian_Religious_Activities_GRD6"
	SubjectEnumIslamicReligiousActivitiesGrd6   SubjectEnum = "Islamic_Religious_Activities_GRD6"
	SubjectEnumHinduReligiousActivitiesGrd6     SubjectEnum = "Hindu_Religious_Activities_GRD6"
	SubjectEnumPastoralProgrammeInstructionGrd6 SubjectEnum = "Pastoral_Programme_Instruction_GRD6"
)

var AllSubjectEnum = []SubjectEnum{
	SubjectEnumLanguageActivitiesPp1,
	SubjectEnumMathematicalActivitiesPp1,
	SubjectEnumEnvironmentalActivitiesPp1,
	SubjectEnumPsychomotorCreativeActivitiesPp1,
	SubjectEnumChristianReligiousActivitiesPp1,
	SubjectEnumIslamicReligiousActivitiesPp1,
	SubjectEnumHinduReligiousActivitiesPp1,
	SubjectEnumPastoralProgrammeInstructionPp1,
	SubjectEnumLanguageActivitiesPp2,
	SubjectEnumMathematicalActivitiesPp2,
	SubjectEnumEnvironmentalActivitiesPp2,
	SubjectEnumPsychomotorCreativeActivitiesPp2,
	SubjectEnumChristianReligiousActivitiesPp2,
	SubjectEnumIslamicReligiousActivitiesPp2,
	SubjectEnumHinduReligiousActivitiesPp2,
	SubjectEnumPastoralProgrammeInstructionPp2,
	SubjectEnumLiteracyActivitiesGrd1,
	SubjectEnumKiswahiliLanguageActivitiesGrd1,
	SubjectEnumKenyaSignLanguageGrd1,
	SubjectEnumEnglishLanguageActivitiesGrd1,
	SubjectEnumMathematicalActivitiesGrd1,
	SubjectEnumEnvironmentalActivitiesGrd1,
	SubjectEnumHygieneNutritionActivitiesGrd1,
	SubjectEnumMovementCreativeActivitiesGrd1,
	SubjectEnumChristianReligiousActivitiesGrd1,
	SubjectEnumIslamicReligiousActivitiesGrd1,
	SubjectEnumHinduReligiousActivitiesGrd1,
	SubjectEnumPastoralProgrammeInstructionGrd1,
	SubjectEnumLiteracyActivitiesGrd2,
	SubjectEnumKiswahiliLanguageActivitiesGrd2,
	SubjectEnumKenyaSignLanguageGrd2,
	SubjectEnumEnglishLanguageActivitiesGrd2,
	SubjectEnumMathematicalActivitiesGrd2,
	SubjectEnumEnvironmentalActivitiesGrd2,
	SubjectEnumHygieneNutritionActivitiesGrd2,
	SubjectEnumMovementCreativeActivitiesGrd2,
	SubjectEnumChristianReligiousActivitiesGrd2,
	SubjectEnumIslamicReligiousActivitiesGrd2,
	SubjectEnumHinduReligiousActivitiesGrd2,
	SubjectEnumPastoralProgrammeInstructionGrd2,
	SubjectEnumLiteracyActivitiesGrd3,
	SubjectEnumKiswahiliLanguageActivitiesGrd3,
	SubjectEnumKenyaSignLanguageGrd3,
	SubjectEnumEnglishLanguageActivitiesGrd3,
	SubjectEnumMathematicalActivitiesGrd3,
	SubjectEnumEnvironmentalActivitiesGrd3,
	SubjectEnumHygieneNutritionActivitiesGrd3,
	SubjectEnumMovementCreativeActivitiesGrd3,
	SubjectEnumChristianReligiousActivitiesGrd3,
	SubjectEnumIslamicReligiousActivitiesGrd3,
	SubjectEnumHinduReligiousActivitiesGrd3,
	SubjectEnumPastoralProgrammeInstructionGrd3,
	SubjectEnumIndigeniousActivitiesGrd4,
	SubjectEnumKiswahiliLanguageActivitiesGrd4,
	SubjectEnumKenyaSignLanguageGrd4,
	SubjectEnumEnglishLanguageActivitiesGrd4,
	SubjectEnumGermanLanguageActivitiesGrd4,
	SubjectEnumFrenchLanguageActivitiesGrd4,
	SubjectEnumMandarinLanguageActivitiesGrd4,
	SubjectEnumArabicLanguageActivitiesGrd4,
	SubjectEnumMathematicalActivitiesGrd4,
	SubjectEnumScienceTechnologyActivitiesGrd4,
	SubjectEnumHomeScienceActivitiesGrd4,
	SubjectEnumArtCraftActivitiesGrd4,
	SubjectEnumMusicActivitiesGrd4,
	SubjectEnumSocialActivitiesGrd4,
	SubjectEnumAgricultureActivitiesGrd4,
	SubjectEnumPhysicalHealthActivitiesGrd4,
	SubjectEnumChristianReligiousActivitiesGrd4,
	SubjectEnumIslamicReligiousActivitiesGrd4,
	SubjectEnumHinduReligiousActivitiesGrd4,
	SubjectEnumPastoralProgrammeInstructionGrd4,
	SubjectEnumIndigeniousActivitiesGrd5,
	SubjectEnumKiswahiliLanguageActivitiesGrd5,
	SubjectEnumKenyaSignLanguageGrd5,
	SubjectEnumEnglishLanguageActivitiesGrd5,
	SubjectEnumGermanLanguageActivitiesGrd5,
	SubjectEnumFrenchLanguageActivitiesGrd5,
	SubjectEnumMandarinLanguageActivitiesGrd5,
	SubjectEnumArabicLanguageActivitiesGrd5,
	SubjectEnumMathematicalActivitiesGrd5,
	SubjectEnumScienceTechnologyActivitiesGrd5,
	SubjectEnumHomeScienceActivitiesGrd5,
	SubjectEnumArtCraftActivitiesGrd5,
	SubjectEnumMusicActivitiesGrd5,
	SubjectEnumSocialActivitiesGrd5,
	SubjectEnumAgricultureActivitiesGrd5,
	SubjectEnumPhysicalHealthActivitiesGrd5,
	SubjectEnumChristianReligiousActivitiesGrd5,
	SubjectEnumIslamicReligiousActivitiesGrd5,
	SubjectEnumHinduReligiousActivitiesGrd5,
	SubjectEnumPastoralProgrammeInstructionGrd5,
	SubjectEnumIndigeniousActivitiesGrd6,
	SubjectEnumKiswahiliLanguageActivitiesGrd6,
	SubjectEnumKenyaSignLanguageGrd6,
	SubjectEnumEnglishLanguageActivitiesGrd6,
	SubjectEnumGermanLanguageActivitiesGrd6,
	SubjectEnumFrenchLanguageActivitiesGrd6,
	SubjectEnumMandarinLanguageActivitiesGrd6,
	SubjectEnumArabicLanguageActivitiesGrd6,
	SubjectEnumMathematicalActivitiesGrd6,
	SubjectEnumScienceTechnologyActivitiesGrd6,
	SubjectEnumHomeScienceActivitiesGrd6,
	SubjectEnumArtCraftActivitiesGrd6,
	SubjectEnumMusicActivitiesGrd6,
	SubjectEnumSocialActivitiesGrd6,
	SubjectEnumAgricultureActivitiesGrd6,
	SubjectEnumPhysicalHealthActivitiesGrd6,
	SubjectEnumChristianReligiousActivitiesGrd6,
	SubjectEnumIslamicReligiousActivitiesGrd6,
	SubjectEnumHinduReligiousActivitiesGrd6,
	SubjectEnumPastoralProgrammeInstructionGrd6,
}

func (e SubjectEnum) IsValid() bool {
	switch e {
	case SubjectEnumLanguageActivitiesPp1, SubjectEnumMathematicalActivitiesPp1, SubjectEnumEnvironmentalActivitiesPp1, SubjectEnumPsychomotorCreativeActivitiesPp1, SubjectEnumChristianReligiousActivitiesPp1, SubjectEnumIslamicReligiousActivitiesPp1, SubjectEnumHinduReligiousActivitiesPp1, SubjectEnumPastoralProgrammeInstructionPp1, SubjectEnumLanguageActivitiesPp2, SubjectEnumMathematicalActivitiesPp2, SubjectEnumEnvironmentalActivitiesPp2, SubjectEnumPsychomotorCreativeActivitiesPp2, SubjectEnumChristianReligiousActivitiesPp2, SubjectEnumIslamicReligiousActivitiesPp2, SubjectEnumHinduReligiousActivitiesPp2, SubjectEnumPastoralProgrammeInstructionPp2, SubjectEnumLiteracyActivitiesGrd1, SubjectEnumKiswahiliLanguageActivitiesGrd1, SubjectEnumKenyaSignLanguageGrd1, SubjectEnumEnglishLanguageActivitiesGrd1, SubjectEnumMathematicalActivitiesGrd1, SubjectEnumEnvironmentalActivitiesGrd1, SubjectEnumHygieneNutritionActivitiesGrd1, SubjectEnumMovementCreativeActivitiesGrd1, SubjectEnumChristianReligiousActivitiesGrd1, SubjectEnumIslamicReligiousActivitiesGrd1, SubjectEnumHinduReligiousActivitiesGrd1, SubjectEnumPastoralProgrammeInstructionGrd1, SubjectEnumLiteracyActivitiesGrd2, SubjectEnumKiswahiliLanguageActivitiesGrd2, SubjectEnumKenyaSignLanguageGrd2, SubjectEnumEnglishLanguageActivitiesGrd2, SubjectEnumMathematicalActivitiesGrd2, SubjectEnumEnvironmentalActivitiesGrd2, SubjectEnumHygieneNutritionActivitiesGrd2, SubjectEnumMovementCreativeActivitiesGrd2, SubjectEnumChristianReligiousActivitiesGrd2, SubjectEnumIslamicReligiousActivitiesGrd2, SubjectEnumHinduReligiousActivitiesGrd2, SubjectEnumPastoralProgrammeInstructionGrd2, SubjectEnumLiteracyActivitiesGrd3, SubjectEnumKiswahiliLanguageActivitiesGrd3, SubjectEnumKenyaSignLanguageGrd3, SubjectEnumEnglishLanguageActivitiesGrd3, SubjectEnumMathematicalActivitiesGrd3, SubjectEnumEnvironmentalActivitiesGrd3, SubjectEnumHygieneNutritionActivitiesGrd3, SubjectEnumMovementCreativeActivitiesGrd3, SubjectEnumChristianReligiousActivitiesGrd3, SubjectEnumIslamicReligiousActivitiesGrd3, SubjectEnumHinduReligiousActivitiesGrd3, SubjectEnumPastoralProgrammeInstructionGrd3, SubjectEnumIndigeniousActivitiesGrd4, SubjectEnumKiswahiliLanguageActivitiesGrd4, SubjectEnumKenyaSignLanguageGrd4, SubjectEnumEnglishLanguageActivitiesGrd4, SubjectEnumGermanLanguageActivitiesGrd4, SubjectEnumFrenchLanguageActivitiesGrd4, SubjectEnumMandarinLanguageActivitiesGrd4, SubjectEnumArabicLanguageActivitiesGrd4, SubjectEnumMathematicalActivitiesGrd4, SubjectEnumScienceTechnologyActivitiesGrd4, SubjectEnumHomeScienceActivitiesGrd4, SubjectEnumArtCraftActivitiesGrd4, SubjectEnumMusicActivitiesGrd4, SubjectEnumSocialActivitiesGrd4, SubjectEnumAgricultureActivitiesGrd4, SubjectEnumPhysicalHealthActivitiesGrd4, SubjectEnumChristianReligiousActivitiesGrd4, SubjectEnumIslamicReligiousActivitiesGrd4, SubjectEnumHinduReligiousActivitiesGrd4, SubjectEnumPastoralProgrammeInstructionGrd4, SubjectEnumIndigeniousActivitiesGrd5, SubjectEnumKiswahiliLanguageActivitiesGrd5, SubjectEnumKenyaSignLanguageGrd5, SubjectEnumEnglishLanguageActivitiesGrd5, SubjectEnumGermanLanguageActivitiesGrd5, SubjectEnumFrenchLanguageActivitiesGrd5, SubjectEnumMandarinLanguageActivitiesGrd5, SubjectEnumArabicLanguageActivitiesGrd5, SubjectEnumMathematicalActivitiesGrd5, SubjectEnumScienceTechnologyActivitiesGrd5, SubjectEnumHomeScienceActivitiesGrd5, SubjectEnumArtCraftActivitiesGrd5, SubjectEnumMusicActivitiesGrd5, SubjectEnumSocialActivitiesGrd5, SubjectEnumAgricultureActivitiesGrd5, SubjectEnumPhysicalHealthActivitiesGrd5, SubjectEnumChristianReligiousActivitiesGrd5, SubjectEnumIslamicReligiousActivitiesGrd5, SubjectEnumHinduReligiousActivitiesGrd5, SubjectEnumPastoralProgrammeInstructionGrd5, SubjectEnumIndigeniousActivitiesGrd6, SubjectEnumKiswahiliLanguageActivitiesGrd6, SubjectEnumKenyaSignLanguageGrd6, SubjectEnumEnglishLanguageActivitiesGrd6, SubjectEnumGermanLanguageActivitiesGrd6, SubjectEnumFrenchLanguageActivitiesGrd6, SubjectEnumMandarinLanguageActivitiesGrd6, SubjectEnumArabicLanguageActivitiesGrd6, SubjectEnumMathematicalActivitiesGrd6, SubjectEnumScienceTechnologyActivitiesGrd6, SubjectEnumHomeScienceActivitiesGrd6, SubjectEnumArtCraftActivitiesGrd6, SubjectEnumMusicActivitiesGrd6, SubjectEnumSocialActivitiesGrd6, SubjectEnumAgricultureActivitiesGrd6, SubjectEnumPhysicalHealthActivitiesGrd6, SubjectEnumChristianReligiousActivitiesGrd6, SubjectEnumIslamicReligiousActivitiesGrd6, SubjectEnumHinduReligiousActivitiesGrd6, SubjectEnumPastoralProgrammeInstructionGrd6:
		return true
	}
	return false
}

func (e SubjectEnum) String() string {
	return string(e)
}

func (e *SubjectEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubjectEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subjectEnum", str)
	}
	return nil
}

func (e SubjectEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
