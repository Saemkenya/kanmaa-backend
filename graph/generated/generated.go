// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"kanmaa-backend/graph/model"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Accountant struct {
		AddrCounty         func(childComplexity int) int
		AddrDistrict       func(childComplexity int) int
		AddrNationality    func(childComplexity int) int
		AddrPoBox          func(childComplexity int) int
		AddrPostalCode     func(childComplexity int) int
		Archives           func(childComplexity int, objType *model.ArchiveTypeEnum) int
		AuthorizedPayments func(childComplexity int) int
		Cell               func(childComplexity int) int
		CheckinCheckouts   func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Email              func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		IDno               func(childComplexity int) int
		IPAddress          func(childComplexity int) int
		NHIFno             func(childComplexity int) int
		Name               func(childComplexity int) int
		Pass               func(childComplexity int) int
		Roles              func(childComplexity int) int
		Salute             func(childComplexity int) int
		School             func(childComplexity int) int
		SemiFormal         func(childComplexity int) int
		ThumbNail          func(childComplexity int) int
	}

	AccountantsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccountantsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Admin struct {
		AddrCounty        func(childComplexity int) int
		AddrDistrict      func(childComplexity int) int
		AddrNationality   func(childComplexity int) int
		AddrPoBox         func(childComplexity int) int
		AddrPostalCode    func(childComplexity int) int
		Archives          func(childComplexity int, objType *model.ArchiveTypeEnum) int
		AuthorizedWorkers func(childComplexity int) int
		Cell              func(childComplexity int) int
		CheckinCheckouts  func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Email             func(childComplexity int) int
		Gender            func(childComplexity int) int
		ID                func(childComplexity int) int
		IDno              func(childComplexity int) int
		IPAddress         func(childComplexity int) int
		Messages          func(childComplexity int) int
		Name              func(childComplexity int) int
		Pass              func(childComplexity int) int
		Roles             func(childComplexity int) int
		Salute            func(childComplexity int) int
		School            func(childComplexity int) int
		SemiFormal        func(childComplexity int) int
		ThumbNail         func(childComplexity int) int
		Visitors          func(childComplexity int) int
	}

	AdminsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AdminsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Announcement struct {
		By          func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Message     func(childComplexity int) int
		Receipients func(childComplexity int) int
		School      func(childComplexity int) int
		Topic       func(childComplexity int) int
	}

	AnnouncementConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AnnouncementEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Archive struct {
		CreatedAt     func(childComplexity int) int
		DeletedByMail func(childComplexity int) int
		DeletedByName func(childComplexity int) int
		Field1        func(childComplexity int) int
		Field10       func(childComplexity int) int
		Field11       func(childComplexity int) int
		Field12       func(childComplexity int) int
		Field13       func(childComplexity int) int
		Field14       func(childComplexity int) int
		Field15       func(childComplexity int) int
		Field16       func(childComplexity int) int
		Field17       func(childComplexity int) int
		Field18       func(childComplexity int) int
		Field19       func(childComplexity int) int
		Field2        func(childComplexity int) int
		Field20       func(childComplexity int) int
		Field3        func(childComplexity int) int
		Field4        func(childComplexity int) int
		Field5        func(childComplexity int) int
		Field6        func(childComplexity int) int
		Field7        func(childComplexity int) int
		Field8        func(childComplexity int) int
		Field9        func(childComplexity int) int
		ID            func(childComplexity int) int
		School        func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ArchivesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ArchivesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Attendance struct {
		Confirmation func(childComplexity int) int
		Confirmed    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Lesson       func(childComplexity int) int
		Present      func(childComplexity int) int
		School       func(childComplexity int) int
		Student      func(childComplexity int) int
	}

	AttendanceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AttendanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Book struct {
		Authors   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Isbn      func(childComplexity int) int
		Lends     func(childComplexity int) int
		Name      func(childComplexity int) int
		Revision  func(childComplexity int) int
		School    func(childComplexity int) int
	}

	BooksConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BooksEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CheckinCheckout struct {
		AuthorizedBy func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		InSchool     func(childComplexity int) int
		School       func(childComplexity int) int
		TimeIn       func(childComplexity int) int
		TimeOut      func(childComplexity int) int
		Worker       func(childComplexity int) int
	}

	CheckinCheckoutConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CheckinCheckoutEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Culture struct {
		CreatedAt    func(childComplexity int) int
		Culture      func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		Instructions func(childComplexity int) int
		Lessons      func(childComplexity int) int
		Quiz         func(childComplexity int) int
		School       func(childComplexity int) int
		Story        func(childComplexity int) int
		Title        func(childComplexity int) int
	}

	CulturesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CulturesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Department struct {
		CreatedAt func(childComplexity int) int
		Hod       func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		School    func(childComplexity int) int
		Subjects  func(childComplexity int) int
		Tutors    func(childComplexity int) int
	}

	DepartmentsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DepartmentsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DiariesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DiariesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Diary struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Remarks   func(childComplexity int) int
		Request   func(childComplexity int) int
		School    func(childComplexity int) int
		SeenBy    func(childComplexity int) int
		Student   func(childComplexity int) int
		Tutor     func(childComplexity int) int
	}

	DispensedProduct struct {
		Category    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DispenseTo  func(childComplexity int) int
		DispensedBy func(childComplexity int) int
		ID          func(childComplexity int) int
		Product     func(childComplexity int) int
		Quantity    func(childComplexity int) int
		School      func(childComplexity int) int
	}

	DispensedProductsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DispensedProductsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Essene struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		School    func(childComplexity int) int
		User      func(childComplexity int) int
	}

	EssenesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EssenesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Exam struct {
		CreatedAt func(childComplexity int) int
		Date      func(childComplexity int) int
		Grade     func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		School    func(childComplexity int) int
		Scores    func(childComplexity int) int
	}

	ExamsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ExamsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Fee struct {
		Amount    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Grade     func(childComplexity int) int
		ID        func(childComplexity int) int
		School    func(childComplexity int) int
		Semester  func(childComplexity int) int
		Year      func(childComplexity int) int
	}

	FeesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FeesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Grade struct {
		ClassTeacher    func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Cultures        func(childComplexity int) int
		Exams           func(childComplexity int) int
		Fees            func(childComplexity int) int
		ID              func(childComplexity int) int
		Lessons         func(childComplexity int) int
		Motto           func(childComplexity int) int
		Name            func(childComplexity int) int
		School          func(childComplexity int) int
		Stream          func(childComplexity int) int
		Students        func(childComplexity int, first *int, after *string) int
		StudentsInClass func(childComplexity int) int
		TimeTables      func(childComplexity int) int
	}

	GradesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GradesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Guardian struct {
		AddrCounty      func(childComplexity int) int
		AddrDistrict    func(childComplexity int) int
		AddrNationality func(childComplexity int) int
		AddrPoBox       func(childComplexity int) int
		AddrPostalCode  func(childComplexity int) int
		Archives        func(childComplexity int, objType *model.ArchiveTypeEnum) int
		Cell            func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Email           func(childComplexity int) int
		Gender          func(childComplexity int) int
		ID              func(childComplexity int) int
		IDno            func(childComplexity int) int
		IPAddress       func(childComplexity int) int
		Messages        func(childComplexity int) int
		NHIFno          func(childComplexity int) int
		Name            func(childComplexity int) int
		Payments        func(childComplexity int) int
		Roles           func(childComplexity int) int
		Salute          func(childComplexity int) int
		School          func(childComplexity int) int
		Students        func(childComplexity int) int
		Visits          func(childComplexity int) int
		ViwedDiaries    func(childComplexity int) int
	}

	GuardiansConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	GuardiansEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Lend struct {
		Book         func(childComplexity int) int
		Condition    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DueOn        func(childComplexity int) int
		HandedOver   func(childComplexity int) int
		HandedOverOn func(childComplexity int) int
		ID           func(childComplexity int) int
		Librarian    func(childComplexity int) int
		ReceivedOn   func(childComplexity int) int
		School       func(childComplexity int) int
		Student      func(childComplexity int) int
	}

	LendsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LendsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Lesson struct {
		CreatedAt func(childComplexity int) int
		Date      func(childComplexity int) int
		Done      func(childComplexity int) int
		Duration  func(childComplexity int) int
		Files     func(childComplexity int) int
		Grade     func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Remarks   func(childComplexity int) int
		School    func(childComplexity int) int
		Start     func(childComplexity int) int
		Stop      func(childComplexity int) int
		Subject   func(childComplexity int) int
		TimeDate  func(childComplexity int) int
		Topic     func(childComplexity int) int
		Tutor     func(childComplexity int) int
	}

	LessonsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LessonsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Librarian struct {
		AddrCounty       func(childComplexity int) int
		AddrDistrict     func(childComplexity int) int
		AddrNationality  func(childComplexity int) int
		AddrPoBox        func(childComplexity int) int
		AddrPostalCode   func(childComplexity int) int
		Archives         func(childComplexity int, objType *model.ArchiveTypeEnum) int
		Cell             func(childComplexity int) int
		CheckinCheckouts func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Email            func(childComplexity int) int
		Gender           func(childComplexity int) int
		ID               func(childComplexity int) int
		IDno             func(childComplexity int) int
		IPAddress        func(childComplexity int) int
		LendsAuthorized  func(childComplexity int) int
		NHIFno           func(childComplexity int) int
		Name             func(childComplexity int) int
		Pass             func(childComplexity int) int
		Roles            func(childComplexity int) int
		Salute           func(childComplexity int) int
		School           func(childComplexity int) int
		SemiFormal       func(childComplexity int) int
		ThumbNail        func(childComplexity int) int
	}

	LibrariansConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LibrariansEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Manager struct {
		AddrCounty         func(childComplexity int) int
		AddrDistrict       func(childComplexity int) int
		AddrNationality    func(childComplexity int) int
		AddrPoBox          func(childComplexity int) int
		AddrPostalCode     func(childComplexity int) int
		Archives           func(childComplexity int, objType *model.ArchiveTypeEnum) int
		AuthorizedPayments func(childComplexity int) int
		Cell               func(childComplexity int) int
		CheckinCheckouts   func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Email              func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		IDno               func(childComplexity int) int
		IPAddress          func(childComplexity int) int
		Messages           func(childComplexity int) int
		NHIFno             func(childComplexity int) int
		Name               func(childComplexity int) int
		Pass               func(childComplexity int) int
		Roles              func(childComplexity int) int
		Salute             func(childComplexity int) int
		School             func(childComplexity int) int
		SemiFormal         func(childComplexity int) int
		ThumbNail          func(childComplexity int) int
	}

	ManagersConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ManagersEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Message struct {
		CreatedAt  func(childComplexity int) int
		Delivered  func(childComplexity int) int
		ID         func(childComplexity int) int
		ReturnUser func(childComplexity int) int
		School     func(childComplexity int) int
		Text       func(childComplexity int) int
		Thread     func(childComplexity int) int
		Topic      func(childComplexity int) int
	}

	MessagesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MessagesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		AddBook               func(childComplexity int, name string, isbn string, authors string, revision string, school string) int
		AddDepartment         func(childComplexity int, name model.DeptEnum, hod string, school string) int
		AddExam               func(childComplexity int, name string, date string, grade model.GradeEnum, school string) int
		AddFee                func(childComplexity int, grade model.GradeEnum, year string, amount float64, semester string, school string) int
		AddFile               func(childComplexity int, file graphql.Upload, fileType model.FileTypeEnum, requiredByID string, uploader string, fileURI string, schoolEmail string) int
		AddGrade              func(childComplexity int, name model.GradeEnum, stream string, classTeacher string, motto string, schoolEmail string) int
		AddLesson             func(childComplexity int, name string, date string, timeDate model.PeriodEnum, tutorEmail string, grade model.GradeEnum, subject model.SubjectEnum, start string, stop string, duration float64, done bool, remarks string, school string) int
		AddProduct            func(childComplexity int, name string, cost float64, quantity float64, supplier string, category model.ProductCategoryEnum, receivedOn string, receivedBy string, allowedMinimum float64, schoolEmail string) int
		AddRole               func(childComplexity int, userEmail string, roleName model.RolesEnum) int
		AddSchool             func(childComplexity int, name string, motto string, phone string, email string, website string, addrPoBox string, addrPostalCode string, addrTown string, addrCounty string, addrCountry string) int
		AddScore              func(childComplexity int, score float64, studentNemis string, subject model.SubjectEnum, examID string, schoolEmail string) int
		AddStudent            func(childComplexity int, name string, nemisNo string, nhifStatus bool, bCertNo string, nickName string, dob time.Time, hoby1 string, hoby2 string, hoby3 string, roleModel1 string, roleModel2 string, roleModel3 string, career1 string, career2 string, career3 string, motto string, bloodGroup string, bestFriend string, language1 string, language2 string, language3 string, game string, subject string, book string, quote string, animal string, device string, grade model.GradeEnum, school string, parent string, fees float64, sharemeal bool, greetstranger bool, firstaider bool) int
		AddStudentGuardian    func(childComplexity int, studentNemis string, guardianEmail string, schoolEmail string) int
		AddSubject            func(childComplexity int, name model.SubjectEnum, department model.DeptEnum, schoolEmail string) int
		AddTimeTable          func(childComplexity int, day string, lesson1 string, lesson2 string, lesson3 string, lesson4 string, lesson5 string, lesson6 string, lesson7 string, lesson8 string, grade model.GradeEnum, schoolEmail string) int
		AddTopic              func(childComplexity int, lesson string, strand string, subStrand string, outComes string, experiences string, inquiries string, competencies string, lifeSkills string, esddrr string, values string, otherAreas string, communityActivities string, nonFormalActivity string, assessment string, schoolEmail string) int
		AddUser               func(childComplexity int, email string, password string, salute model.SaluteEnum, name string, iDno string, nHIFno string, cell string, gender model.GenderEnum, school string, addrPoBox string, addrPostalCode string, addrDistrict string, addrCounty string, addrNationality string) int
		AttendLesson          func(childComplexity int, nemisID string, lessonID string, school string) int
		ConfirmLessonAttended func(childComplexity int, attendanceID string, studentGif graphql.Upload) int
		ConfirmPayment        func(childComplexity int, payID string, email string) int
		DelAnnounceUserConn   func(childComplexity int, connID string) int
		DelAnnouncement       func(childComplexity int, announcementID string, deletedByName string, deletedByMail string) int
		DelAttendance         func(childComplexity int, attendanceID string, deletedByName string, deletedByMail string) int
		DelBook               func(childComplexity int, bookID string, deletedByName string, deletedByMail string) int
		DelCico               func(childComplexity int, cicoID string, deletedByName string, deletedByMail string) int
		DelDepartment         func(childComplexity int, deptID string, deletedByName string, deletedByMail string) int
		DelDiary              func(childComplexity int, diaryID string, deletedByName string, deletedByMail string) int
		DelDispensedProduct   func(childComplexity int, disProductID string, deletedByName string, deletedByMail string) int
		DelEssene             func(childComplexity int, esseneID string) int
		DelExam               func(childComplexity int, examID string, deletedByName string, deletedByMail string) int
		DelFee                func(childComplexity int, feeID string, deletedByName string, deletedByMail string) int
		DelGrade              func(childComplexity int, gradeID string, deletedByName string, deletedByMail string) int
		DelLend               func(childComplexity int, lendID string, deletedByName string, deletedByMail string) int
		DelLesson             func(childComplexity int, lssnID string, deletedByName string, deletedByMail string) int
		DelMessage            func(childComplexity int, msgID string, deletedByName string, deletedByMail string) int
		DelParentingCulture   func(childComplexity int, parentingCultureID string, deletedByName string, deletedByMail string) int
		DelPayment            func(childComplexity int, payID string, deletedByName string, deletedByMail string) int
		DelProduct            func(childComplexity int, prodID string, deletedByName string, deletedByMail string) int
		DelSchool             func(childComplexity int, schoolID string) int
		DelScore              func(childComplexity int, scoreID string, deletedByName string, deletedByMail string) int
		DelSiso               func(childComplexity int, sisoID string, deletedByName string, deletedByMail string) int
		DelStudent            func(childComplexity int, nemisID string, deletedByName string, deletedByMail string) int
		DelSubject            func(childComplexity int, subjectID string, deletedByName string, deletedByMail string) int
		DelThread             func(childComplexity int, threadID string) int
		DelTimeTable          func(childComplexity int, ttableID string, deletedByName string, deletedByMail string) int
		DelUser               func(childComplexity int, userEmail string, deletedByName string, deletedByMail string) int
		DelUserDiaryConn      func(childComplexity int, connID string) int
		DelVisitor            func(childComplexity int, visitorID string, deletedByName string, deletedByMail string) int
		DispenseProduct       func(childComplexity int, name string, category string, quantity float64, dispenseTo string, dispensedBy string, schoolEmail string) int
		EditAnnouncement      func(childComplexity int, announcementID string, topic *string, announcerEmail *string, message *string) int
		EditBook              func(childComplexity int, bookID string, name *string, isbn *string, authors *string, revision *string) int
		EditCulture           func(childComplexity int, parentingCultureID string, storyTitle *string, instructions *string, story *string, quiz *string, lessonsLearnt *string, cultureTaught *string, gradeToReceive *model.GradeEnum) int
		EditDepartment        func(childComplexity int, deptID string, name *model.DeptEnum, hodEmail *string) int
		EditDiary             func(childComplexity int, diaryID string, remarks *string, studentNemis *string, request *string, tutorEmail *string) int
		EditDispensedProduct  func(childComplexity int, disProductID string, productName *string, quantity *float64, category *model.ProductCategoryEnum, dispensedTo *string, dispensedBy *string) int
		EditExam              func(childComplexity int, examID string, name *string, date *time.Time, gradeName *model.GradeEnum) int
		EditFee               func(childComplexity int, feeID string, grade *model.GradeEnum, year *string, amount *float64, semester *model.SenesterEnum) int
		EditGrade             func(childComplexity int, gradeID string, name *model.GradeEnum, stream *string, classTeacher *string, gradeMotto *string) int
		EditLesson            func(childComplexity int, lssnID string, name *string, date *time.Time, timedate *model.PeriodEnum, grade *model.GradeEnum, subject *model.SubjectEnum, start *time.Time, stop *time.Time, duration *float64, done *bool, remarks *string, tutorEmail *string) int
		EditMessage           func(childComplexity int, msgID string, topic *string, text *string, userEmail *string, threadID *string) int
		EditNewsletter        func(childComplexity int, newsletterID string, mainTopic *string, topicOne *string, textOne *string, topicTwo *string, textTwo *string, topicThree *string, textThree *string, topicFour *string, textFour *string, topicFive *string, textFive *string, rubberStampURL *string) int
		EditPayment           func(childComplexity int, payID string, paymentType *model.PaymentTypeEnum, payingFor *model.PaymentForEnum, receiverEmailNemisid *string, amount *float64, date *time.Time, account *model.AccEnum, payeeEmail *string) int
		EditProduct           func(childComplexity int, prodID string, name *string, cost *float64, quantity *float64, supplier *string, category *model.ProductCategoryEnum, receivedOn *string, receivedBy *string, minimumQty *float64) int
		EditSchool            func(childComplexity int, schoolID string, name *string, motto *string, phone *string, email *string, website *string, poBox *string, poCode *string, district *string, county *string, country *string) int
		EditScore             func(childComplexity int, scoreID string, score *float64, studentNemisID *string, subject *model.SubjectEnum, examID *string) int
		EditStudent           func(childComplexity int, stdID string, name *string, nemisNo *string, nhif *string, bCertNo *string, nickName *string, dateOfBirth *time.Time, hoby1 *string, hoby2 *string, hoby3 *string, roleModel1 *string, roleModel2 *string, roleModel3 *string, career1 *string, career2 *string, career3 *string, personalMotto *string, bloodGroup *string, bestFriend *string, language1 *string, language2 *string, language3 *string, quickAnswer1 *string, quickAnswer2 *string, quickAnswer3 *string, favGame *string, favSubject *string, favBook *string, favQuote *string, favAnimal *string, favAnimation *string, favDevice *string) int
		EditSubject           func(childComplexity int, subjectID string, name *model.SubjectEnum, departmentName *model.DeptEnum, weeklyLessons *float64, lessonDuration *float64) int
		EditTimeTable         func(childComplexity int, ttableID string, day *string, done *bool, lesson1id *string, lesson2id *string, lesson3id *string, lesson4id *string, lesson5id *string, lesson6id *string, lesson7id *string, lesson8id *string, grade *model.GradeEnum) int
		EditUser              func(childComplexity int, userID string, salute *model.SaluteEnum, name *string, iDno *string, nhifNo *string, cell *string, email *string, password *string, poBox *string, poCode *string, district *string, county *string, nationality *string, roles *model.RolesEnum) int
		EditVisitor           func(childComplexity int, visitorID string, salute *model.SaluteEnum, name *string, iDno *string, cell *string, email *string, visitingOffice *string, purpose *string, vehicle *string, belongings *string, timeIn *time.Time, timeOut *time.Time, thumbScan *string, visitingFreq *float64, authBy *string) int
		LendOut               func(childComplexity int, bookIsbn string, receivedOn string, dueOn string, student string, librarian string, school string) int
		NewCulture            func(childComplexity int, title string, instructions string, story string, quiz string, lessons string, culture string, grade model.GradeEnum, schoolEmail string) int
		NewDiary              func(childComplexity int, tutorRemarks string, student string, schoolRequest string, tutorMail string, schoolEmail string) int
		NewEssene             func(childComplexity int, userMail string, schoolEmail string) int
		NewPayment            func(childComplexity int, paytype model.PaymentTypeEnum, payFor model.PaymentForEnum, receiver string, amount float64, date string, account model.AccEnum, payeemail string, school string) int
		NewVisitor            func(childComplexity int, salute string, name string, iDno string, cell string, email string, visiting string, purpose string, vehicle string, belongings string, visitingFreq float64, authorizedBy string, schoolEmail string) int
		PromoteStudent        func(childComplexity int, grade model.GradeEnum, studentNemisID string, schoolEmail string) int
		ReadAnnouncement      func(childComplexity int, announceID string, user string, read bool, schoolEmail string) int
		ReceiveBook           func(childComplexity int, lendID string, condition model.ConditionEnum) int
		RestoreRoles          func(childComplexity int, userEmail string) int
		SendAnnouncement      func(childComplexity int, topic string, by string, message string, schoolEmail string) int
		SendMessage           func(childComplexity int, topic string, text string, user string, thread string, school string) int
		StaffCheckin          func(childComplexity int, workerEmail string, authorizedBy string, schoolEmail string) int
		StaffCheckout         func(childComplexity int, cicoID string) int
		StudentCheckin        func(childComplexity int, nemisID string, schoolEmail string) int
		StudentCheckout       func(childComplexity int, sisoID string) int
		ViewDiary             func(childComplexity int, guardianEmail string, diaryID string, schoolEmail string) int
		VisitorCheckout       func(childComplexity int, visitorID string) int
	}

	Newsletter struct {
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		MainTopic   func(childComplexity int) int
		RubberStamp func(childComplexity int) int
		School      func(childComplexity int) int
		StaticFiles func(childComplexity int) int
		TextFive    func(childComplexity int) int
		TextFour    func(childComplexity int) int
		TextOne     func(childComplexity int) int
		TextThree   func(childComplexity int) int
		TextTwo     func(childComplexity int) int
		TopicFive   func(childComplexity int) int
		TopicFour   func(childComplexity int) int
		TopicOne    func(childComplexity int) int
		TopicThree  func(childComplexity int) int
		TopicTwo    func(childComplexity int) int
	}

	NewsletterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NewslettersEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor   func(childComplexity int) int
		HasNextPage func(childComplexity int) int
		StartCursor func(childComplexity int) int
	}

	Pass struct {
		Active func(childComplexity int) int
		Pass   func(childComplexity int) int
		School func(childComplexity int) int
		Worker func(childComplexity int) int
	}

	PassesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PassesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Payment struct {
		Account         func(childComplexity int) int
		Amount          func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Date            func(childComplexity int) int
		ID              func(childComplexity int) int
		Payee           func(childComplexity int) int
		Payingfor       func(childComplexity int) int
		Paymentype      func(childComplexity int) int
		Receiverstudent func(childComplexity int) int
		Receiveruser    func(childComplexity int) int
		School          func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	PaymentsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PaymentsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Product struct {
		AllowedMinimum func(childComplexity int) int
		Category       func(childComplexity int) int
		Cost           func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Dispensed      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Quantity       func(childComplexity int) int
		ReceivedBy     func(childComplexity int) int
		ReceivedOn     func(childComplexity int) int
		School         func(childComplexity int) int
		Supplier       func(childComplexity int) int
	}

	ProductsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		GetQr           func(childComplexity int, email string, password string) int
		School          func(childComplexity int, email string) int
		Search          func(childComplexity int, text string) int
		StartTimeKeeper func(childComplexity int, school string, clearPasses bool) int
		User            func(childComplexity int, email string) int
		Users           func(childComplexity int, first *int, after *string) int
	}

	School struct {
		Accountants      func(childComplexity int) int
		AddrCountry      func(childComplexity int) int
		AddrCounty       func(childComplexity int) int
		AddrPoBox        func(childComplexity int) int
		AddrPostalCode   func(childComplexity int) int
		AddrTown         func(childComplexity int) int
		Administrators   func(childComplexity int) int
		Announcements    func(childComplexity int) int
		Archives         func(childComplexity int, objType *model.ArchiveTypeEnum) int
		Assets           func(childComplexity int) int
		Books            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Cultures         func(childComplexity int) int
		Departments      func(childComplexity int) int
		Email            func(childComplexity int) int
		Essenes          func(childComplexity int) int
		Examinations     func(childComplexity int) int
		Fees             func(childComplexity int) int
		Grades           func(childComplexity int) int
		Guardians        func(childComplexity int) int
		ID               func(childComplexity int) int
		Lessons          func(childComplexity int) int
		Librarians       func(childComplexity int) int
		Managers         func(childComplexity int) int
		Motto            func(childComplexity int) int
		Name             func(childComplexity int) int
		Newsletters      func(childComplexity int) int
		Passes           func(childComplexity int) int
		Payments         func(childComplexity int) int
		Phone            func(childComplexity int) int
		Staff            func(childComplexity int) int
		Store            func(childComplexity int) int
		Storekeepers     func(childComplexity int) int
		StudentDiaries   func(childComplexity int) int
		Students         func(childComplexity int) int
		StudentsInSchool func(childComplexity int) int
		SuggestionBox    func(childComplexity int) int
		Suppliers        func(childComplexity int) int
		Timetables       func(childComplexity int) int
		Tutors           func(childComplexity int) int
		Visitors         func(childComplexity int) int
		Website          func(childComplexity int) int
		WorkersInSchool  func(childComplexity int) int
	}

	SchoolConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SchoolEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Score struct {
		CreatedAt func(childComplexity int) int
		Exam      func(childComplexity int) int
		ID        func(childComplexity int) int
		Score     func(childComplexity int) int
		Student   func(childComplexity int) int
		Subject   func(childComplexity int) int
	}

	ScoresConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ScoresEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Staff struct {
		AddrCounty      func(childComplexity int) int
		AddrDistrict    func(childComplexity int) int
		AddrNationality func(childComplexity int) int
		AddrPoBox       func(childComplexity int) int
		AddrPostalCode  func(childComplexity int) int
		Cell            func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Email           func(childComplexity int) int
		ID              func(childComplexity int) int
		IDno            func(childComplexity int) int
		IPAddress       func(childComplexity int) int
		NHIFno          func(childComplexity int) int
		Name            func(childComplexity int) int
		Pass            func(childComplexity int) int
		Roles           func(childComplexity int) int
		Salute          func(childComplexity int) int
		School          func(childComplexity int) int
		SemiFormal      func(childComplexity int) int
		Staff           func(childComplexity int) int
		ThumbNail       func(childComplexity int) int
	}

	StaffConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StaffEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StaticFile struct {
		CreatedAt  func(childComplexity int) int
		FileType   func(childComplexity int) int
		FileURI    func(childComplexity int) int
		ID         func(childComplexity int) int
		Lesson     func(childComplexity int) int
		Newsletter func(childComplexity int) int
		School     func(childComplexity int) int
		Uploader   func(childComplexity int) int
	}

	StaticFilesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StaticFilesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Status struct {
		Balance     func(childComplexity int) int
		Confirmed   func(childComplexity int) int
		ConfirmedBy func(childComplexity int) int
		ConfirmedOn func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		School      func(childComplexity int) int
	}

	StatusConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StatusEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Storekeeper struct {
		AddrCounty        func(childComplexity int) int
		AddrDistrict      func(childComplexity int) int
		AddrNationality   func(childComplexity int) int
		AddrPoBox         func(childComplexity int) int
		AddrPostalCode    func(childComplexity int) int
		Archives          func(childComplexity int, objType *model.ArchiveTypeEnum) int
		Cell              func(childComplexity int) int
		CheckinCheckouts  func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Email             func(childComplexity int) int
		Gender            func(childComplexity int) int
		ID                func(childComplexity int) int
		IDno              func(childComplexity int) int
		IPAddress         func(childComplexity int) int
		NHIFno            func(childComplexity int) int
		Name              func(childComplexity int) int
		Pass              func(childComplexity int) int
		Products          func(childComplexity int) int
		ProductsDispensed func(childComplexity int) int
		Roles             func(childComplexity int) int
		Salute            func(childComplexity int) int
		School            func(childComplexity int) int
		SemiFormal        func(childComplexity int) int
		ThumbNail         func(childComplexity int) int
	}

	StorekeepersConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StorekeepersEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Student struct {
		Animal        func(childComplexity int) int
		Attendance    func(childComplexity int) int
		BCertNo       func(childComplexity int) int
		BestFriend    func(childComplexity int) int
		BloodGroup    func(childComplexity int) int
		Book          func(childComplexity int) int
		Careers       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Device        func(childComplexity int) int
		Diaries       func(childComplexity int) int
		Dob           func(childComplexity int) int
		Firstaider    func(childComplexity int) int
		Game          func(childComplexity int) int
		Grade         func(childComplexity int) int
		Greetstranger func(childComplexity int) int
		Guardians     func(childComplexity int) int
		Hobies        func(childComplexity int) int
		ID            func(childComplexity int) int
		Languages     func(childComplexity int) int
		Lends         func(childComplexity int) int
		Motto         func(childComplexity int) int
		Name          func(childComplexity int) int
		NemisNo       func(childComplexity int) int
		NhifStatus    func(childComplexity int) int
		NickName      func(childComplexity int) int
		Payments      func(childComplexity int) int
		Quote         func(childComplexity int) int
		RoleCall      func(childComplexity int) int
		RoleModels    func(childComplexity int) int
		School        func(childComplexity int) int
		Scores        func(childComplexity int) int
		Sharemeal     func(childComplexity int) int
		Subject       func(childComplexity int) int
		Thumbnail     func(childComplexity int) int
	}

	StudentinStudentout struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		InSchool  func(childComplexity int) int
		School    func(childComplexity int) int
		Student   func(childComplexity int) int
		TimeIn    func(childComplexity int) int
		TimeOut   func(childComplexity int) int
	}

	StudentinStudentoutConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StudentinStudentoutEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StudentsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StudentsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Subject struct {
		CreatedAt  func(childComplexity int) int
		Department func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		School     func(childComplexity int) int
		Scores     func(childComplexity int) int
	}

	SubjectsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SubjectsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Subscription struct {
		AnnounceAdded       func(childComplexity int) int
		AttendanceConfirmed func(childComplexity int) int
		BookAdded           func(childComplexity int) int
		BookLentout         func(childComplexity int) int
		BookReceivedBack    func(childComplexity int) int
		DiaryAdded          func(childComplexity int) int
		DiarySeen           func(childComplexity int) int
		ExamScored          func(childComplexity int) int
		ItemArchived        func(childComplexity int) int
		LessonAdded         func(childComplexity int) int
		LessonAttended      func(childComplexity int) int
		NewsletterAdded     func(childComplexity int) int
		NuLessonIn5         func(childComplexity int) int
		PaymentConfirmed    func(childComplexity int) int
		PaymentMade         func(childComplexity int) int
		ProductAdded        func(childComplexity int) int
		ProductDispensed    func(childComplexity int) int
		StudentAdded        func(childComplexity int) int
		StudentHasArrived   func(childComplexity int) int
		StudentHasDeparted  func(childComplexity int) int
		UserAdded           func(childComplexity int) int
		VisitorCheckedin    func(childComplexity int) int
		VisitorCheckedout   func(childComplexity int) int
		WorkerHasArrived    func(childComplexity int) int
		WorkerHasDeparted   func(childComplexity int) int
	}

	Supplier struct {
		AddrCounty      func(childComplexity int) int
		AddrDistrict    func(childComplexity int) int
		AddrNationality func(childComplexity int) int
		AddrPoBox       func(childComplexity int) int
		AddrPostalCode  func(childComplexity int) int
		Cell            func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Email           func(childComplexity int) int
		Gender          func(childComplexity int) int
		ID              func(childComplexity int) int
		IDno            func(childComplexity int) int
		IPAddress       func(childComplexity int) int
		NHIFno          func(childComplexity int) int
		Name            func(childComplexity int) int
		Payments        func(childComplexity int) int
		Products        func(childComplexity int) int
		Roles           func(childComplexity int) int
		Salute          func(childComplexity int) int
		School          func(childComplexity int) int
		SemiFormal      func(childComplexity int) int
		ThumbNail       func(childComplexity int) int
		Visits          func(childComplexity int) int
	}

	SuppliersConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SuppliersEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Thread struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Messages  func(childComplexity int) int
		New       func(childComplexity int) int
		School    func(childComplexity int) int
	}

	ThreadsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ThreadsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TimeTable struct {
		CreatedAt func(childComplexity int) int
		Day       func(childComplexity int) int
		Done      func(childComplexity int) int
		Grade     func(childComplexity int) int
		ID        func(childComplexity int) int
		Lesson1   func(childComplexity int) int
		Lesson2   func(childComplexity int) int
		Lesson3   func(childComplexity int) int
		Lesson4   func(childComplexity int) int
		Lesson5   func(childComplexity int) int
		Lesson6   func(childComplexity int) int
		Lesson7   func(childComplexity int) int
		Lesson8   func(childComplexity int) int
		School    func(childComplexity int) int
	}

	TimeTablesConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TimeTablesEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Topic struct {
		Assessment          func(childComplexity int) int
		CommunityActivities func(childComplexity int) int
		Competencies        func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ESddrr              func(childComplexity int) int
		Experiences         func(childComplexity int) int
		ID                  func(childComplexity int) int
		Inquiries           func(childComplexity int) int
		LifeSkills          func(childComplexity int) int
		NonFormalActivity   func(childComplexity int) int
		OtherAreas          func(childComplexity int) int
		OutComes            func(childComplexity int) int
		School              func(childComplexity int) int
		Strand              func(childComplexity int) int
		SubStrand           func(childComplexity int) int
		Values              func(childComplexity int) int
	}

	TopicsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TopicsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Tutor struct {
		AddrCounty       func(childComplexity int) int
		AddrDistrict     func(childComplexity int) int
		AddrNationality  func(childComplexity int) int
		AddrPoBox        func(childComplexity int) int
		AddrPostalCode   func(childComplexity int) int
		Archives         func(childComplexity int, objType *model.ArchiveTypeEnum) int
		Cell             func(childComplexity int) int
		CheckinCheckouts func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Diaries          func(childComplexity int) int
		Email            func(childComplexity int) int
		Gender           func(childComplexity int) int
		ID               func(childComplexity int) int
		IDno             func(childComplexity int) int
		IPAddress        func(childComplexity int) int
		NHIFno           func(childComplexity int) int
		Name             func(childComplexity int) int
		Pass             func(childComplexity int) int
		Roles            func(childComplexity int) int
		Salute           func(childComplexity int) int
		School           func(childComplexity int) int
		SemiFormal       func(childComplexity int) int
		ThumbNail        func(childComplexity int) int
		TimeTableLessons func(childComplexity int) int
	}

	TutorsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TutorsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	User struct {
		AddrCounty      func(childComplexity int) int
		AddrDistrict    func(childComplexity int) int
		AddrNationality func(childComplexity int) int
		AddrPoBox       func(childComplexity int) int
		AddrPostalCode  func(childComplexity int) int
		Cell            func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Email           func(childComplexity int) int
		Essenes         func(childComplexity int) int
		Gender          func(childComplexity int) int
		ID              func(childComplexity int) int
		IDno            func(childComplexity int) int
		IPAddress       func(childComplexity int) int
		Messages        func(childComplexity int) int
		NHIFno          func(childComplexity int) int
		Name            func(childComplexity int) int
		Payments        func(childComplexity int, first *int, after *string) int
		Roles           func(childComplexity int) int
		Salute          func(childComplexity int) int
		School          func(childComplexity int) int
		SemiFormal      func(childComplexity int) int
		Students        func(childComplexity int) int
		ThumbNail       func(childComplexity int) int
	}

	UsersConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UsersEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Visitor struct {
		AuthorizedBy func(childComplexity int) int
		Belongings   func(childComplexity int) int
		Cell         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		IDno         func(childComplexity int) int
		Name         func(childComplexity int) int
		Purpose      func(childComplexity int) int
		Salute       func(childComplexity int) int
		School       func(childComplexity int) int
		ThumbScan    func(childComplexity int) int
		TimeIn       func(childComplexity int) int
		TimeOut      func(childComplexity int) int
		Vehicle      func(childComplexity int) int
		Visiting     func(childComplexity int) int
		VisitingFreq func(childComplexity int) int
	}

	VisitorsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VisitorsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type MutationResolver interface {
	AddFile(ctx context.Context, file graphql.Upload, fileType model.FileTypeEnum, requiredByID string, uploader string, fileURI string, schoolEmail string) (*model.StaticFile, error)
	AddUser(ctx context.Context, email string, password string, salute model.SaluteEnum, name string, iDno string, nHIFno string, cell string, gender model.GenderEnum, school string, addrPoBox string, addrPostalCode string, addrDistrict string, addrCounty string, addrNationality string) (*model.User, error)
	AddStudent(ctx context.Context, name string, nemisNo string, nhifStatus bool, bCertNo string, nickName string, dob time.Time, hoby1 string, hoby2 string, hoby3 string, roleModel1 string, roleModel2 string, roleModel3 string, career1 string, career2 string, career3 string, motto string, bloodGroup string, bestFriend string, language1 string, language2 string, language3 string, game string, subject string, book string, quote string, animal string, device string, grade model.GradeEnum, school string, parent string, fees float64, sharemeal bool, greetstranger bool, firstaider bool) (*model.Student, error)
	AddSchool(ctx context.Context, name string, motto string, phone string, email string, website string, addrPoBox string, addrPostalCode string, addrTown string, addrCounty string, addrCountry string) (*model.School, error)
	AddDepartment(ctx context.Context, name model.DeptEnum, hod string, school string) (*model.Department, error)
	AddSubject(ctx context.Context, name model.SubjectEnum, department model.DeptEnum, schoolEmail string) (*model.Subject, error)
	AddGrade(ctx context.Context, name model.GradeEnum, stream string, classTeacher string, motto string, schoolEmail string) (*model.Grade, error)
	AddLesson(ctx context.Context, name string, date string, timeDate model.PeriodEnum, tutorEmail string, grade model.GradeEnum, subject model.SubjectEnum, start string, stop string, duration float64, done bool, remarks string, school string) (*model.Lesson, error)
	AddTopic(ctx context.Context, lesson string, strand string, subStrand string, outComes string, experiences string, inquiries string, competencies string, lifeSkills string, esddrr string, values string, otherAreas string, communityActivities string, nonFormalActivity string, assessment string, schoolEmail string) (*model.Lesson, error)
	AddBook(ctx context.Context, name string, isbn string, authors string, revision string, school string) (*model.Book, error)
	LendOut(ctx context.Context, bookIsbn string, receivedOn string, dueOn string, student string, librarian string, school string) (*model.Lend, error)
	ReceiveBook(ctx context.Context, lendID string, condition model.ConditionEnum) (*model.Lend, error)
	AddFee(ctx context.Context, grade model.GradeEnum, year string, amount float64, semester string, school string) (*model.Fee, error)
	NewPayment(ctx context.Context, paytype model.PaymentTypeEnum, payFor model.PaymentForEnum, receiver string, amount float64, date string, account model.AccEnum, payeemail string, school string) (*model.Payment, error)
	AddExam(ctx context.Context, name string, date string, grade model.GradeEnum, school string) (*model.Exam, error)
	AddScore(ctx context.Context, score float64, studentNemis string, subject model.SubjectEnum, examID string, schoolEmail string) (*model.Score, error)
	AddTimeTable(ctx context.Context, day string, lesson1 string, lesson2 string, lesson3 string, lesson4 string, lesson5 string, lesson6 string, lesson7 string, lesson8 string, grade model.GradeEnum, schoolEmail string) (*model.TimeTable, error)
	NewVisitor(ctx context.Context, salute string, name string, iDno string, cell string, email string, visiting string, purpose string, vehicle string, belongings string, visitingFreq float64, authorizedBy string, schoolEmail string) (*model.Visitor, error)
	NewDiary(ctx context.Context, tutorRemarks string, student string, schoolRequest string, tutorMail string, schoolEmail string) (*model.Diary, error)
	ViewDiary(ctx context.Context, guardianEmail string, diaryID string, schoolEmail string) (*model.Diary, error)
	AddProduct(ctx context.Context, name string, cost float64, quantity float64, supplier string, category model.ProductCategoryEnum, receivedOn string, receivedBy string, allowedMinimum float64, schoolEmail string) (*model.Product, error)
	DispenseProduct(ctx context.Context, name string, category string, quantity float64, dispenseTo string, dispensedBy string, schoolEmail string) (*model.Product, error)
	NewCulture(ctx context.Context, title string, instructions string, story string, quiz string, lessons string, culture string, grade model.GradeEnum, schoolEmail string) (*model.Culture, error)
	NewEssene(ctx context.Context, userMail string, schoolEmail string) (*model.Essene, error)
	StudentCheckin(ctx context.Context, nemisID string, schoolEmail string) (*model.StudentinStudentout, error)
	StudentCheckout(ctx context.Context, sisoID string) (*model.StudentinStudentout, error)
	StaffCheckin(ctx context.Context, workerEmail string, authorizedBy string, schoolEmail string) (*model.CheckinCheckout, error)
	StaffCheckout(ctx context.Context, cicoID string) (*model.CheckinCheckout, error)
	SendAnnouncement(ctx context.Context, topic string, by string, message string, schoolEmail string) (*model.Announcement, error)
	ReadAnnouncement(ctx context.Context, announceID string, user string, read bool, schoolEmail string) (*model.Announcement, error)
	SendMessage(ctx context.Context, topic string, text string, user string, thread string, school string) (*model.Message, error)
	VisitorCheckout(ctx context.Context, visitorID string) (*model.Visitor, error)
	AddRole(ctx context.Context, userEmail string, roleName model.RolesEnum) (*model.User, error)
	RestoreRoles(ctx context.Context, userEmail string) (*model.User, error)
	PromoteStudent(ctx context.Context, grade model.GradeEnum, studentNemisID string, schoolEmail string) (*model.Student, error)
	ConfirmPayment(ctx context.Context, payID string, email string) (*model.Payment, error)
	ConfirmLessonAttended(ctx context.Context, attendanceID string, studentGif graphql.Upload) (*model.Attendance, error)
	AttendLesson(ctx context.Context, nemisID string, lessonID string, school string) (*model.Attendance, error)
	AddStudentGuardian(ctx context.Context, studentNemis string, guardianEmail string, schoolEmail string) (*model.Student, error)
	DelAnnouncement(ctx context.Context, announcementID string, deletedByName string, deletedByMail string) (*bool, error)
	DelAnnounceUserConn(ctx context.Context, connID string) (*bool, error)
	DelAttendance(ctx context.Context, attendanceID string, deletedByName string, deletedByMail string) (*bool, error)
	DelBook(ctx context.Context, bookID string, deletedByName string, deletedByMail string) (*bool, error)
	DelCico(ctx context.Context, cicoID string, deletedByName string, deletedByMail string) (*bool, error)
	DelSiso(ctx context.Context, sisoID string, deletedByName string, deletedByMail string) (*bool, error)
	DelParentingCulture(ctx context.Context, parentingCultureID string, deletedByName string, deletedByMail string) (*bool, error)
	DelDepartment(ctx context.Context, deptID string, deletedByName string, deletedByMail string) (*bool, error)
	DelDiary(ctx context.Context, diaryID string, deletedByName string, deletedByMail string) (*bool, error)
	DelUserDiaryConn(ctx context.Context, connID string) (*bool, error)
	DelDispensedProduct(ctx context.Context, disProductID string, deletedByName string, deletedByMail string) (*bool, error)
	DelProduct(ctx context.Context, prodID string, deletedByName string, deletedByMail string) (*bool, error)
	DelEssene(ctx context.Context, esseneID string) (*bool, error)
	DelExam(ctx context.Context, examID string, deletedByName string, deletedByMail string) (*bool, error)
	DelFee(ctx context.Context, feeID string, deletedByName string, deletedByMail string) (*bool, error)
	DelGrade(ctx context.Context, gradeID string, deletedByName string, deletedByMail string) (*bool, error)
	DelLend(ctx context.Context, lendID string, deletedByName string, deletedByMail string) (*bool, error)
	DelLesson(ctx context.Context, lssnID string, deletedByName string, deletedByMail string) (*bool, error)
	DelMessage(ctx context.Context, msgID string, deletedByName string, deletedByMail string) (*bool, error)
	DelPayment(ctx context.Context, payID string, deletedByName string, deletedByMail string) (*bool, error)
	DelSchool(ctx context.Context, schoolID string) (*bool, error)
	DelScore(ctx context.Context, scoreID string, deletedByName string, deletedByMail string) (*bool, error)
	DelStudent(ctx context.Context, nemisID string, deletedByName string, deletedByMail string) (*bool, error)
	DelSubject(ctx context.Context, subjectID string, deletedByName string, deletedByMail string) (*bool, error)
	DelThread(ctx context.Context, threadID string) (*bool, error)
	DelTimeTable(ctx context.Context, ttableID string, deletedByName string, deletedByMail string) (*bool, error)
	DelUser(ctx context.Context, userEmail string, deletedByName string, deletedByMail string) (*bool, error)
	DelVisitor(ctx context.Context, visitorID string, deletedByName string, deletedByMail string) (*bool, error)
	EditAnnouncement(ctx context.Context, announcementID string, topic *string, announcerEmail *string, message *string) (*model.Announcement, error)
	EditBook(ctx context.Context, bookID string, name *string, isbn *string, authors *string, revision *string) (*model.Book, error)
	EditCulture(ctx context.Context, parentingCultureID string, storyTitle *string, instructions *string, story *string, quiz *string, lessonsLearnt *string, cultureTaught *string, gradeToReceive *model.GradeEnum) (*model.Culture, error)
	EditDepartment(ctx context.Context, deptID string, name *model.DeptEnum, hodEmail *string) (*model.Department, error)
	EditDiary(ctx context.Context, diaryID string, remarks *string, studentNemis *string, request *string, tutorEmail *string) (*model.Diary, error)
	EditDispensedProduct(ctx context.Context, disProductID string, productName *string, quantity *float64, category *model.ProductCategoryEnum, dispensedTo *string, dispensedBy *string) (*model.DispensedProduct, error)
	EditProduct(ctx context.Context, prodID string, name *string, cost *float64, quantity *float64, supplier *string, category *model.ProductCategoryEnum, receivedOn *string, receivedBy *string, minimumQty *float64) (*model.Product, error)
	EditExam(ctx context.Context, examID string, name *string, date *time.Time, gradeName *model.GradeEnum) (*model.Exam, error)
	EditFee(ctx context.Context, feeID string, grade *model.GradeEnum, year *string, amount *float64, semester *model.SenesterEnum) (*model.Fee, error)
	EditGrade(ctx context.Context, gradeID string, name *model.GradeEnum, stream *string, classTeacher *string, gradeMotto *string) (*model.Grade, error)
	EditNewsletter(ctx context.Context, newsletterID string, mainTopic *string, topicOne *string, textOne *string, topicTwo *string, textTwo *string, topicThree *string, textThree *string, topicFour *string, textFour *string, topicFive *string, textFive *string, rubberStampURL *string) (*model.Newsletter, error)
	EditLesson(ctx context.Context, lssnID string, name *string, date *time.Time, timedate *model.PeriodEnum, grade *model.GradeEnum, subject *model.SubjectEnum, start *time.Time, stop *time.Time, duration *float64, done *bool, remarks *string, tutorEmail *string) (*model.Lesson, error)
	EditMessage(ctx context.Context, msgID string, topic *string, text *string, userEmail *string, threadID *string) (*model.Message, error)
	EditPayment(ctx context.Context, payID string, paymentType *model.PaymentTypeEnum, payingFor *model.PaymentForEnum, receiverEmailNemisid *string, amount *float64, date *time.Time, account *model.AccEnum, payeeEmail *string) (*model.Payment, error)
	EditSchool(ctx context.Context, schoolID string, name *string, motto *string, phone *string, email *string, website *string, poBox *string, poCode *string, district *string, county *string, country *string) (*model.School, error)
	EditScore(ctx context.Context, scoreID string, score *float64, studentNemisID *string, subject *model.SubjectEnum, examID *string) (*model.Score, error)
	EditStudent(ctx context.Context, stdID string, name *string, nemisNo *string, nhif *string, bCertNo *string, nickName *string, dateOfBirth *time.Time, hoby1 *string, hoby2 *string, hoby3 *string, roleModel1 *string, roleModel2 *string, roleModel3 *string, career1 *string, career2 *string, career3 *string, personalMotto *string, bloodGroup *string, bestFriend *string, language1 *string, language2 *string, language3 *string, quickAnswer1 *string, quickAnswer2 *string, quickAnswer3 *string, favGame *string, favSubject *string, favBook *string, favQuote *string, favAnimal *string, favAnimation *string, favDevice *string) (*model.Student, error)
	EditSubject(ctx context.Context, subjectID string, name *model.SubjectEnum, departmentName *model.DeptEnum, weeklyLessons *float64, lessonDuration *float64) (*model.Subject, error)
	EditTimeTable(ctx context.Context, ttableID string, day *string, done *bool, lesson1id *string, lesson2id *string, lesson3id *string, lesson4id *string, lesson5id *string, lesson6id *string, lesson7id *string, lesson8id *string, grade *model.GradeEnum) (*model.TimeTable, error)
	EditUser(ctx context.Context, userID string, salute *model.SaluteEnum, name *string, iDno *string, nhifNo *string, cell *string, email *string, password *string, poBox *string, poCode *string, district *string, county *string, nationality *string, roles *model.RolesEnum) (*model.User, error)
	EditVisitor(ctx context.Context, visitorID string, salute *model.SaluteEnum, name *string, iDno *string, cell *string, email *string, visitingOffice *string, purpose *string, vehicle *string, belongings *string, timeIn *time.Time, timeOut *time.Time, thumbScan *string, visitingFreq *float64, authBy *string) (*model.Visitor, error)
}
type QueryResolver interface {
	Search(ctx context.Context, text string) ([]model.SearchResult, error)
	School(ctx context.Context, email string) (*model.School, error)
	StartTimeKeeper(ctx context.Context, school string, clearPasses bool) (*bool, error)
	GetQr(ctx context.Context, email string, password string) (string, error)
	User(ctx context.Context, email string) (*model.User, error)
	Users(ctx context.Context, first *int, after *string) (*model.UsersConnection, error)
}
type SubscriptionResolver interface {
	PaymentMade(ctx context.Context) (<-chan *model.Payment, error)
	LessonAttended(ctx context.Context) (<-chan *model.Attendance, error)
	ExamScored(ctx context.Context) (<-chan *model.Score, error)
	NuLessonIn5(ctx context.Context) (<-chan *model.Lesson, error)
	StudentHasArrived(ctx context.Context) (<-chan *model.StudentinStudentout, error)
	StudentHasDeparted(ctx context.Context) (<-chan *model.StudentinStudentout, error)
	PaymentConfirmed(ctx context.Context) (<-chan *model.Status, error)
	BookAdded(ctx context.Context) (<-chan *model.Book, error)
	BookLentout(ctx context.Context) (<-chan *model.Lend, error)
	BookReceivedBack(ctx context.Context) (<-chan *model.Lend, error)
	ProductAdded(ctx context.Context) (<-chan *model.Product, error)
	ProductDispensed(ctx context.Context) (<-chan *model.DispensedProduct, error)
	DiaryAdded(ctx context.Context) (<-chan *model.Diary, error)
	DiarySeen(ctx context.Context) (<-chan *model.Diary, error)
	WorkerHasArrived(ctx context.Context) (<-chan *model.CheckinCheckout, error)
	WorkerHasDeparted(ctx context.Context) (<-chan *model.CheckinCheckout, error)
	VisitorCheckedin(ctx context.Context) (<-chan *model.Visitor, error)
	VisitorCheckedout(ctx context.Context) (<-chan *model.Visitor, error)
	AnnounceAdded(ctx context.Context) (<-chan *model.Announcement, error)
	NewsletterAdded(ctx context.Context) (<-chan *model.Newsletter, error)
	LessonAdded(ctx context.Context) (<-chan *model.Lesson, error)
	StudentAdded(ctx context.Context) (<-chan *model.Student, error)
	UserAdded(ctx context.Context) (<-chan *model.User, error)
	ItemArchived(ctx context.Context) (<-chan *model.Archive, error)
	AttendanceConfirmed(ctx context.Context) (<-chan *model.Attendance, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Accountant.addrCounty":
		if e.complexity.Accountant.AddrCounty == nil {
			break
		}

		return e.complexity.Accountant.AddrCounty(childComplexity), true

	case "Accountant.addrDistrict":
		if e.complexity.Accountant.AddrDistrict == nil {
			break
		}

		return e.complexity.Accountant.AddrDistrict(childComplexity), true

	case "Accountant.addrNationality":
		if e.complexity.Accountant.AddrNationality == nil {
			break
		}

		return e.complexity.Accountant.AddrNationality(childComplexity), true

	case "Accountant.addrPoBox":
		if e.complexity.Accountant.AddrPoBox == nil {
			break
		}

		return e.complexity.Accountant.AddrPoBox(childComplexity), true

	case "Accountant.addrPostalCode":
		if e.complexity.Accountant.AddrPostalCode == nil {
			break
		}

		return e.complexity.Accountant.AddrPostalCode(childComplexity), true

	case "Accountant.archives":
		if e.complexity.Accountant.Archives == nil {
			break
		}

		args, err := ec.field_Accountant_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Accountant.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Accountant.authorizedPayments":
		if e.complexity.Accountant.AuthorizedPayments == nil {
			break
		}

		return e.complexity.Accountant.AuthorizedPayments(childComplexity), true

	case "Accountant.cell":
		if e.complexity.Accountant.Cell == nil {
			break
		}

		return e.complexity.Accountant.Cell(childComplexity), true

	case "Accountant.checkinCheckouts":
		if e.complexity.Accountant.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Accountant.CheckinCheckouts(childComplexity), true

	case "Accountant.createdAt":
		if e.complexity.Accountant.CreatedAt == nil {
			break
		}

		return e.complexity.Accountant.CreatedAt(childComplexity), true

	case "Accountant.email":
		if e.complexity.Accountant.Email == nil {
			break
		}

		return e.complexity.Accountant.Email(childComplexity), true

	case "Accountant.gender":
		if e.complexity.Accountant.Gender == nil {
			break
		}

		return e.complexity.Accountant.Gender(childComplexity), true

	case "Accountant.id":
		if e.complexity.Accountant.ID == nil {
			break
		}

		return e.complexity.Accountant.ID(childComplexity), true

	case "Accountant.IDno":
		if e.complexity.Accountant.IDno == nil {
			break
		}

		return e.complexity.Accountant.IDno(childComplexity), true

	case "Accountant.ipAddress":
		if e.complexity.Accountant.IPAddress == nil {
			break
		}

		return e.complexity.Accountant.IPAddress(childComplexity), true

	case "Accountant.NHIFno":
		if e.complexity.Accountant.NHIFno == nil {
			break
		}

		return e.complexity.Accountant.NHIFno(childComplexity), true

	case "Accountant.name":
		if e.complexity.Accountant.Name == nil {
			break
		}

		return e.complexity.Accountant.Name(childComplexity), true

	case "Accountant.pass":
		if e.complexity.Accountant.Pass == nil {
			break
		}

		return e.complexity.Accountant.Pass(childComplexity), true

	case "Accountant.roles":
		if e.complexity.Accountant.Roles == nil {
			break
		}

		return e.complexity.Accountant.Roles(childComplexity), true

	case "Accountant.salute":
		if e.complexity.Accountant.Salute == nil {
			break
		}

		return e.complexity.Accountant.Salute(childComplexity), true

	case "Accountant.school":
		if e.complexity.Accountant.School == nil {
			break
		}

		return e.complexity.Accountant.School(childComplexity), true

	case "Accountant.semiFormal":
		if e.complexity.Accountant.SemiFormal == nil {
			break
		}

		return e.complexity.Accountant.SemiFormal(childComplexity), true

	case "Accountant.thumbNail":
		if e.complexity.Accountant.ThumbNail == nil {
			break
		}

		return e.complexity.Accountant.ThumbNail(childComplexity), true

	case "AccountantsConnection.edges":
		if e.complexity.AccountantsConnection.Edges == nil {
			break
		}

		return e.complexity.AccountantsConnection.Edges(childComplexity), true

	case "AccountantsConnection.pageInfo":
		if e.complexity.AccountantsConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccountantsConnection.PageInfo(childComplexity), true

	case "AccountantsConnection.totalCount":
		if e.complexity.AccountantsConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccountantsConnection.TotalCount(childComplexity), true

	case "AccountantsEdge.cursor":
		if e.complexity.AccountantsEdge.Cursor == nil {
			break
		}

		return e.complexity.AccountantsEdge.Cursor(childComplexity), true

	case "AccountantsEdge.node":
		if e.complexity.AccountantsEdge.Node == nil {
			break
		}

		return e.complexity.AccountantsEdge.Node(childComplexity), true

	case "Admin.addrCounty":
		if e.complexity.Admin.AddrCounty == nil {
			break
		}

		return e.complexity.Admin.AddrCounty(childComplexity), true

	case "Admin.addrDistrict":
		if e.complexity.Admin.AddrDistrict == nil {
			break
		}

		return e.complexity.Admin.AddrDistrict(childComplexity), true

	case "Admin.addrNationality":
		if e.complexity.Admin.AddrNationality == nil {
			break
		}

		return e.complexity.Admin.AddrNationality(childComplexity), true

	case "Admin.addrPoBox":
		if e.complexity.Admin.AddrPoBox == nil {
			break
		}

		return e.complexity.Admin.AddrPoBox(childComplexity), true

	case "Admin.addrPostalCode":
		if e.complexity.Admin.AddrPostalCode == nil {
			break
		}

		return e.complexity.Admin.AddrPostalCode(childComplexity), true

	case "Admin.archives":
		if e.complexity.Admin.Archives == nil {
			break
		}

		args, err := ec.field_Admin_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Admin.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Admin.authorizedWorkers":
		if e.complexity.Admin.AuthorizedWorkers == nil {
			break
		}

		return e.complexity.Admin.AuthorizedWorkers(childComplexity), true

	case "Admin.cell":
		if e.complexity.Admin.Cell == nil {
			break
		}

		return e.complexity.Admin.Cell(childComplexity), true

	case "Admin.checkinCheckouts":
		if e.complexity.Admin.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Admin.CheckinCheckouts(childComplexity), true

	case "Admin.createdAt":
		if e.complexity.Admin.CreatedAt == nil {
			break
		}

		return e.complexity.Admin.CreatedAt(childComplexity), true

	case "Admin.email":
		if e.complexity.Admin.Email == nil {
			break
		}

		return e.complexity.Admin.Email(childComplexity), true

	case "Admin.gender":
		if e.complexity.Admin.Gender == nil {
			break
		}

		return e.complexity.Admin.Gender(childComplexity), true

	case "Admin.id":
		if e.complexity.Admin.ID == nil {
			break
		}

		return e.complexity.Admin.ID(childComplexity), true

	case "Admin.iDno":
		if e.complexity.Admin.IDno == nil {
			break
		}

		return e.complexity.Admin.IDno(childComplexity), true

	case "Admin.ipAddress":
		if e.complexity.Admin.IPAddress == nil {
			break
		}

		return e.complexity.Admin.IPAddress(childComplexity), true

	case "Admin.messages":
		if e.complexity.Admin.Messages == nil {
			break
		}

		return e.complexity.Admin.Messages(childComplexity), true

	case "Admin.name":
		if e.complexity.Admin.Name == nil {
			break
		}

		return e.complexity.Admin.Name(childComplexity), true

	case "Admin.pass":
		if e.complexity.Admin.Pass == nil {
			break
		}

		return e.complexity.Admin.Pass(childComplexity), true

	case "Admin.roles":
		if e.complexity.Admin.Roles == nil {
			break
		}

		return e.complexity.Admin.Roles(childComplexity), true

	case "Admin.salute":
		if e.complexity.Admin.Salute == nil {
			break
		}

		return e.complexity.Admin.Salute(childComplexity), true

	case "Admin.school":
		if e.complexity.Admin.School == nil {
			break
		}

		return e.complexity.Admin.School(childComplexity), true

	case "Admin.semiFormal":
		if e.complexity.Admin.SemiFormal == nil {
			break
		}

		return e.complexity.Admin.SemiFormal(childComplexity), true

	case "Admin.thumbNail":
		if e.complexity.Admin.ThumbNail == nil {
			break
		}

		return e.complexity.Admin.ThumbNail(childComplexity), true

	case "Admin.visitors":
		if e.complexity.Admin.Visitors == nil {
			break
		}

		return e.complexity.Admin.Visitors(childComplexity), true

	case "AdminsConnection.edges":
		if e.complexity.AdminsConnection.Edges == nil {
			break
		}

		return e.complexity.AdminsConnection.Edges(childComplexity), true

	case "AdminsConnection.pageInfo":
		if e.complexity.AdminsConnection.PageInfo == nil {
			break
		}

		return e.complexity.AdminsConnection.PageInfo(childComplexity), true

	case "AdminsConnection.totalCount":
		if e.complexity.AdminsConnection.TotalCount == nil {
			break
		}

		return e.complexity.AdminsConnection.TotalCount(childComplexity), true

	case "AdminsEdge.cursor":
		if e.complexity.AdminsEdge.Cursor == nil {
			break
		}

		return e.complexity.AdminsEdge.Cursor(childComplexity), true

	case "AdminsEdge.node":
		if e.complexity.AdminsEdge.Node == nil {
			break
		}

		return e.complexity.AdminsEdge.Node(childComplexity), true

	case "Announcement.by":
		if e.complexity.Announcement.By == nil {
			break
		}

		return e.complexity.Announcement.By(childComplexity), true

	case "Announcement.createdAt":
		if e.complexity.Announcement.CreatedAt == nil {
			break
		}

		return e.complexity.Announcement.CreatedAt(childComplexity), true

	case "Announcement.id":
		if e.complexity.Announcement.ID == nil {
			break
		}

		return e.complexity.Announcement.ID(childComplexity), true

	case "Announcement.message":
		if e.complexity.Announcement.Message == nil {
			break
		}

		return e.complexity.Announcement.Message(childComplexity), true

	case "Announcement.receipients":
		if e.complexity.Announcement.Receipients == nil {
			break
		}

		return e.complexity.Announcement.Receipients(childComplexity), true

	case "Announcement.school":
		if e.complexity.Announcement.School == nil {
			break
		}

		return e.complexity.Announcement.School(childComplexity), true

	case "Announcement.topic":
		if e.complexity.Announcement.Topic == nil {
			break
		}

		return e.complexity.Announcement.Topic(childComplexity), true

	case "AnnouncementConnection.edges":
		if e.complexity.AnnouncementConnection.Edges == nil {
			break
		}

		return e.complexity.AnnouncementConnection.Edges(childComplexity), true

	case "AnnouncementConnection.pageInfo":
		if e.complexity.AnnouncementConnection.PageInfo == nil {
			break
		}

		return e.complexity.AnnouncementConnection.PageInfo(childComplexity), true

	case "AnnouncementConnection.totalCount":
		if e.complexity.AnnouncementConnection.TotalCount == nil {
			break
		}

		return e.complexity.AnnouncementConnection.TotalCount(childComplexity), true

	case "AnnouncementEdge.cursor":
		if e.complexity.AnnouncementEdge.Cursor == nil {
			break
		}

		return e.complexity.AnnouncementEdge.Cursor(childComplexity), true

	case "AnnouncementEdge.node":
		if e.complexity.AnnouncementEdge.Node == nil {
			break
		}

		return e.complexity.AnnouncementEdge.Node(childComplexity), true

	case "Archive.createdAt":
		if e.complexity.Archive.CreatedAt == nil {
			break
		}

		return e.complexity.Archive.CreatedAt(childComplexity), true

	case "Archive.deletedByMail":
		if e.complexity.Archive.DeletedByMail == nil {
			break
		}

		return e.complexity.Archive.DeletedByMail(childComplexity), true

	case "Archive.deletedByName":
		if e.complexity.Archive.DeletedByName == nil {
			break
		}

		return e.complexity.Archive.DeletedByName(childComplexity), true

	case "Archive.field1":
		if e.complexity.Archive.Field1 == nil {
			break
		}

		return e.complexity.Archive.Field1(childComplexity), true

	case "Archive.field10":
		if e.complexity.Archive.Field10 == nil {
			break
		}

		return e.complexity.Archive.Field10(childComplexity), true

	case "Archive.field11":
		if e.complexity.Archive.Field11 == nil {
			break
		}

		return e.complexity.Archive.Field11(childComplexity), true

	case "Archive.field12":
		if e.complexity.Archive.Field12 == nil {
			break
		}

		return e.complexity.Archive.Field12(childComplexity), true

	case "Archive.field13":
		if e.complexity.Archive.Field13 == nil {
			break
		}

		return e.complexity.Archive.Field13(childComplexity), true

	case "Archive.field14":
		if e.complexity.Archive.Field14 == nil {
			break
		}

		return e.complexity.Archive.Field14(childComplexity), true

	case "Archive.field15":
		if e.complexity.Archive.Field15 == nil {
			break
		}

		return e.complexity.Archive.Field15(childComplexity), true

	case "Archive.field16":
		if e.complexity.Archive.Field16 == nil {
			break
		}

		return e.complexity.Archive.Field16(childComplexity), true

	case "Archive.field17":
		if e.complexity.Archive.Field17 == nil {
			break
		}

		return e.complexity.Archive.Field17(childComplexity), true

	case "Archive.field18":
		if e.complexity.Archive.Field18 == nil {
			break
		}

		return e.complexity.Archive.Field18(childComplexity), true

	case "Archive.field19":
		if e.complexity.Archive.Field19 == nil {
			break
		}

		return e.complexity.Archive.Field19(childComplexity), true

	case "Archive.field2":
		if e.complexity.Archive.Field2 == nil {
			break
		}

		return e.complexity.Archive.Field2(childComplexity), true

	case "Archive.field20":
		if e.complexity.Archive.Field20 == nil {
			break
		}

		return e.complexity.Archive.Field20(childComplexity), true

	case "Archive.field3":
		if e.complexity.Archive.Field3 == nil {
			break
		}

		return e.complexity.Archive.Field3(childComplexity), true

	case "Archive.field4":
		if e.complexity.Archive.Field4 == nil {
			break
		}

		return e.complexity.Archive.Field4(childComplexity), true

	case "Archive.field5":
		if e.complexity.Archive.Field5 == nil {
			break
		}

		return e.complexity.Archive.Field5(childComplexity), true

	case "Archive.field6":
		if e.complexity.Archive.Field6 == nil {
			break
		}

		return e.complexity.Archive.Field6(childComplexity), true

	case "Archive.field7":
		if e.complexity.Archive.Field7 == nil {
			break
		}

		return e.complexity.Archive.Field7(childComplexity), true

	case "Archive.field8":
		if e.complexity.Archive.Field8 == nil {
			break
		}

		return e.complexity.Archive.Field8(childComplexity), true

	case "Archive.field9":
		if e.complexity.Archive.Field9 == nil {
			break
		}

		return e.complexity.Archive.Field9(childComplexity), true

	case "Archive.id":
		if e.complexity.Archive.ID == nil {
			break
		}

		return e.complexity.Archive.ID(childComplexity), true

	case "Archive.School":
		if e.complexity.Archive.School == nil {
			break
		}

		return e.complexity.Archive.School(childComplexity), true

	case "Archive.type":
		if e.complexity.Archive.Type == nil {
			break
		}

		return e.complexity.Archive.Type(childComplexity), true

	case "ArchivesConnection.edges":
		if e.complexity.ArchivesConnection.Edges == nil {
			break
		}

		return e.complexity.ArchivesConnection.Edges(childComplexity), true

	case "ArchivesConnection.pageInfo":
		if e.complexity.ArchivesConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArchivesConnection.PageInfo(childComplexity), true

	case "ArchivesConnection.totalCount":
		if e.complexity.ArchivesConnection.TotalCount == nil {
			break
		}

		return e.complexity.ArchivesConnection.TotalCount(childComplexity), true

	case "ArchivesEdge.cursor":
		if e.complexity.ArchivesEdge.Cursor == nil {
			break
		}

		return e.complexity.ArchivesEdge.Cursor(childComplexity), true

	case "ArchivesEdge.node":
		if e.complexity.ArchivesEdge.Node == nil {
			break
		}

		return e.complexity.ArchivesEdge.Node(childComplexity), true

	case "Attendance.confirmation":
		if e.complexity.Attendance.Confirmation == nil {
			break
		}

		return e.complexity.Attendance.Confirmation(childComplexity), true

	case "Attendance.confirmed":
		if e.complexity.Attendance.Confirmed == nil {
			break
		}

		return e.complexity.Attendance.Confirmed(childComplexity), true

	case "Attendance.createdAt":
		if e.complexity.Attendance.CreatedAt == nil {
			break
		}

		return e.complexity.Attendance.CreatedAt(childComplexity), true

	case "Attendance.id":
		if e.complexity.Attendance.ID == nil {
			break
		}

		return e.complexity.Attendance.ID(childComplexity), true

	case "Attendance.lesson":
		if e.complexity.Attendance.Lesson == nil {
			break
		}

		return e.complexity.Attendance.Lesson(childComplexity), true

	case "Attendance.present":
		if e.complexity.Attendance.Present == nil {
			break
		}

		return e.complexity.Attendance.Present(childComplexity), true

	case "Attendance.school":
		if e.complexity.Attendance.School == nil {
			break
		}

		return e.complexity.Attendance.School(childComplexity), true

	case "Attendance.student":
		if e.complexity.Attendance.Student == nil {
			break
		}

		return e.complexity.Attendance.Student(childComplexity), true

	case "AttendanceConnection.edges":
		if e.complexity.AttendanceConnection.Edges == nil {
			break
		}

		return e.complexity.AttendanceConnection.Edges(childComplexity), true

	case "AttendanceConnection.pageInfo":
		if e.complexity.AttendanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.AttendanceConnection.PageInfo(childComplexity), true

	case "AttendanceConnection.totalCount":
		if e.complexity.AttendanceConnection.TotalCount == nil {
			break
		}

		return e.complexity.AttendanceConnection.TotalCount(childComplexity), true

	case "AttendanceEdge.cursor":
		if e.complexity.AttendanceEdge.Cursor == nil {
			break
		}

		return e.complexity.AttendanceEdge.Cursor(childComplexity), true

	case "AttendanceEdge.node":
		if e.complexity.AttendanceEdge.Node == nil {
			break
		}

		return e.complexity.AttendanceEdge.Node(childComplexity), true

	case "Book.authors":
		if e.complexity.Book.Authors == nil {
			break
		}

		return e.complexity.Book.Authors(childComplexity), true

	case "Book.createdAt":
		if e.complexity.Book.CreatedAt == nil {
			break
		}

		return e.complexity.Book.CreatedAt(childComplexity), true

	case "Book.id":
		if e.complexity.Book.ID == nil {
			break
		}

		return e.complexity.Book.ID(childComplexity), true

	case "Book.isbn":
		if e.complexity.Book.Isbn == nil {
			break
		}

		return e.complexity.Book.Isbn(childComplexity), true

	case "Book.lends":
		if e.complexity.Book.Lends == nil {
			break
		}

		return e.complexity.Book.Lends(childComplexity), true

	case "Book.name":
		if e.complexity.Book.Name == nil {
			break
		}

		return e.complexity.Book.Name(childComplexity), true

	case "Book.revision":
		if e.complexity.Book.Revision == nil {
			break
		}

		return e.complexity.Book.Revision(childComplexity), true

	case "Book.school":
		if e.complexity.Book.School == nil {
			break
		}

		return e.complexity.Book.School(childComplexity), true

	case "BooksConnection.edges":
		if e.complexity.BooksConnection.Edges == nil {
			break
		}

		return e.complexity.BooksConnection.Edges(childComplexity), true

	case "BooksConnection.pageInfo":
		if e.complexity.BooksConnection.PageInfo == nil {
			break
		}

		return e.complexity.BooksConnection.PageInfo(childComplexity), true

	case "BooksConnection.totalCount":
		if e.complexity.BooksConnection.TotalCount == nil {
			break
		}

		return e.complexity.BooksConnection.TotalCount(childComplexity), true

	case "BooksEdge.cursor":
		if e.complexity.BooksEdge.Cursor == nil {
			break
		}

		return e.complexity.BooksEdge.Cursor(childComplexity), true

	case "BooksEdge.node":
		if e.complexity.BooksEdge.Node == nil {
			break
		}

		return e.complexity.BooksEdge.Node(childComplexity), true

	case "CheckinCheckout.authorizedBy":
		if e.complexity.CheckinCheckout.AuthorizedBy == nil {
			break
		}

		return e.complexity.CheckinCheckout.AuthorizedBy(childComplexity), true

	case "CheckinCheckout.createdAt":
		if e.complexity.CheckinCheckout.CreatedAt == nil {
			break
		}

		return e.complexity.CheckinCheckout.CreatedAt(childComplexity), true

	case "CheckinCheckout.id":
		if e.complexity.CheckinCheckout.ID == nil {
			break
		}

		return e.complexity.CheckinCheckout.ID(childComplexity), true

	case "CheckinCheckout.inSchool":
		if e.complexity.CheckinCheckout.InSchool == nil {
			break
		}

		return e.complexity.CheckinCheckout.InSchool(childComplexity), true

	case "CheckinCheckout.school":
		if e.complexity.CheckinCheckout.School == nil {
			break
		}

		return e.complexity.CheckinCheckout.School(childComplexity), true

	case "CheckinCheckout.timeIn":
		if e.complexity.CheckinCheckout.TimeIn == nil {
			break
		}

		return e.complexity.CheckinCheckout.TimeIn(childComplexity), true

	case "CheckinCheckout.timeOut":
		if e.complexity.CheckinCheckout.TimeOut == nil {
			break
		}

		return e.complexity.CheckinCheckout.TimeOut(childComplexity), true

	case "CheckinCheckout.worker":
		if e.complexity.CheckinCheckout.Worker == nil {
			break
		}

		return e.complexity.CheckinCheckout.Worker(childComplexity), true

	case "CheckinCheckoutConnection.edges":
		if e.complexity.CheckinCheckoutConnection.Edges == nil {
			break
		}

		return e.complexity.CheckinCheckoutConnection.Edges(childComplexity), true

	case "CheckinCheckoutConnection.pageInfo":
		if e.complexity.CheckinCheckoutConnection.PageInfo == nil {
			break
		}

		return e.complexity.CheckinCheckoutConnection.PageInfo(childComplexity), true

	case "CheckinCheckoutConnection.totalCount":
		if e.complexity.CheckinCheckoutConnection.TotalCount == nil {
			break
		}

		return e.complexity.CheckinCheckoutConnection.TotalCount(childComplexity), true

	case "CheckinCheckoutEdge.cursor":
		if e.complexity.CheckinCheckoutEdge.Cursor == nil {
			break
		}

		return e.complexity.CheckinCheckoutEdge.Cursor(childComplexity), true

	case "CheckinCheckoutEdge.node":
		if e.complexity.CheckinCheckoutEdge.Node == nil {
			break
		}

		return e.complexity.CheckinCheckoutEdge.Node(childComplexity), true

	case "Culture.createdAt":
		if e.complexity.Culture.CreatedAt == nil {
			break
		}

		return e.complexity.Culture.CreatedAt(childComplexity), true

	case "Culture.culture":
		if e.complexity.Culture.Culture == nil {
			break
		}

		return e.complexity.Culture.Culture(childComplexity), true

	case "Culture.grade":
		if e.complexity.Culture.Grade == nil {
			break
		}

		return e.complexity.Culture.Grade(childComplexity), true

	case "Culture.id":
		if e.complexity.Culture.ID == nil {
			break
		}

		return e.complexity.Culture.ID(childComplexity), true

	case "Culture.instructions":
		if e.complexity.Culture.Instructions == nil {
			break
		}

		return e.complexity.Culture.Instructions(childComplexity), true

	case "Culture.lessons":
		if e.complexity.Culture.Lessons == nil {
			break
		}

		return e.complexity.Culture.Lessons(childComplexity), true

	case "Culture.quiz":
		if e.complexity.Culture.Quiz == nil {
			break
		}

		return e.complexity.Culture.Quiz(childComplexity), true

	case "Culture.school":
		if e.complexity.Culture.School == nil {
			break
		}

		return e.complexity.Culture.School(childComplexity), true

	case "Culture.story":
		if e.complexity.Culture.Story == nil {
			break
		}

		return e.complexity.Culture.Story(childComplexity), true

	case "Culture.title":
		if e.complexity.Culture.Title == nil {
			break
		}

		return e.complexity.Culture.Title(childComplexity), true

	case "CulturesConnection.edges":
		if e.complexity.CulturesConnection.Edges == nil {
			break
		}

		return e.complexity.CulturesConnection.Edges(childComplexity), true

	case "CulturesConnection.pageInfo":
		if e.complexity.CulturesConnection.PageInfo == nil {
			break
		}

		return e.complexity.CulturesConnection.PageInfo(childComplexity), true

	case "CulturesConnection.totalCount":
		if e.complexity.CulturesConnection.TotalCount == nil {
			break
		}

		return e.complexity.CulturesConnection.TotalCount(childComplexity), true

	case "CulturesEdge.cursor":
		if e.complexity.CulturesEdge.Cursor == nil {
			break
		}

		return e.complexity.CulturesEdge.Cursor(childComplexity), true

	case "CulturesEdge.node":
		if e.complexity.CulturesEdge.Node == nil {
			break
		}

		return e.complexity.CulturesEdge.Node(childComplexity), true

	case "Department.createdAt":
		if e.complexity.Department.CreatedAt == nil {
			break
		}

		return e.complexity.Department.CreatedAt(childComplexity), true

	case "Department.hod":
		if e.complexity.Department.Hod == nil {
			break
		}

		return e.complexity.Department.Hod(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.name":
		if e.complexity.Department.Name == nil {
			break
		}

		return e.complexity.Department.Name(childComplexity), true

	case "Department.school":
		if e.complexity.Department.School == nil {
			break
		}

		return e.complexity.Department.School(childComplexity), true

	case "Department.subjects":
		if e.complexity.Department.Subjects == nil {
			break
		}

		return e.complexity.Department.Subjects(childComplexity), true

	case "Department.tutors":
		if e.complexity.Department.Tutors == nil {
			break
		}

		return e.complexity.Department.Tutors(childComplexity), true

	case "DepartmentsConnection.edges":
		if e.complexity.DepartmentsConnection.Edges == nil {
			break
		}

		return e.complexity.DepartmentsConnection.Edges(childComplexity), true

	case "DepartmentsConnection.pageInfo":
		if e.complexity.DepartmentsConnection.PageInfo == nil {
			break
		}

		return e.complexity.DepartmentsConnection.PageInfo(childComplexity), true

	case "DepartmentsConnection.totalCount":
		if e.complexity.DepartmentsConnection.TotalCount == nil {
			break
		}

		return e.complexity.DepartmentsConnection.TotalCount(childComplexity), true

	case "DepartmentsEdge.cursor":
		if e.complexity.DepartmentsEdge.Cursor == nil {
			break
		}

		return e.complexity.DepartmentsEdge.Cursor(childComplexity), true

	case "DepartmentsEdge.node":
		if e.complexity.DepartmentsEdge.Node == nil {
			break
		}

		return e.complexity.DepartmentsEdge.Node(childComplexity), true

	case "DiariesConnection.edges":
		if e.complexity.DiariesConnection.Edges == nil {
			break
		}

		return e.complexity.DiariesConnection.Edges(childComplexity), true

	case "DiariesConnection.pageInfo":
		if e.complexity.DiariesConnection.PageInfo == nil {
			break
		}

		return e.complexity.DiariesConnection.PageInfo(childComplexity), true

	case "DiariesConnection.totalCount":
		if e.complexity.DiariesConnection.TotalCount == nil {
			break
		}

		return e.complexity.DiariesConnection.TotalCount(childComplexity), true

	case "DiariesEdge.cursor":
		if e.complexity.DiariesEdge.Cursor == nil {
			break
		}

		return e.complexity.DiariesEdge.Cursor(childComplexity), true

	case "DiariesEdge.node":
		if e.complexity.DiariesEdge.Node == nil {
			break
		}

		return e.complexity.DiariesEdge.Node(childComplexity), true

	case "Diary.createdAt":
		if e.complexity.Diary.CreatedAt == nil {
			break
		}

		return e.complexity.Diary.CreatedAt(childComplexity), true

	case "Diary.id":
		if e.complexity.Diary.ID == nil {
			break
		}

		return e.complexity.Diary.ID(childComplexity), true

	case "Diary.remarks":
		if e.complexity.Diary.Remarks == nil {
			break
		}

		return e.complexity.Diary.Remarks(childComplexity), true

	case "Diary.request":
		if e.complexity.Diary.Request == nil {
			break
		}

		return e.complexity.Diary.Request(childComplexity), true

	case "Diary.school":
		if e.complexity.Diary.School == nil {
			break
		}

		return e.complexity.Diary.School(childComplexity), true

	case "Diary.seenBy":
		if e.complexity.Diary.SeenBy == nil {
			break
		}

		return e.complexity.Diary.SeenBy(childComplexity), true

	case "Diary.student":
		if e.complexity.Diary.Student == nil {
			break
		}

		return e.complexity.Diary.Student(childComplexity), true

	case "Diary.tutor":
		if e.complexity.Diary.Tutor == nil {
			break
		}

		return e.complexity.Diary.Tutor(childComplexity), true

	case "DispensedProduct.category":
		if e.complexity.DispensedProduct.Category == nil {
			break
		}

		return e.complexity.DispensedProduct.Category(childComplexity), true

	case "DispensedProduct.createdAt":
		if e.complexity.DispensedProduct.CreatedAt == nil {
			break
		}

		return e.complexity.DispensedProduct.CreatedAt(childComplexity), true

	case "DispensedProduct.dispenseTo":
		if e.complexity.DispensedProduct.DispenseTo == nil {
			break
		}

		return e.complexity.DispensedProduct.DispenseTo(childComplexity), true

	case "DispensedProduct.dispensedBy":
		if e.complexity.DispensedProduct.DispensedBy == nil {
			break
		}

		return e.complexity.DispensedProduct.DispensedBy(childComplexity), true

	case "DispensedProduct.id":
		if e.complexity.DispensedProduct.ID == nil {
			break
		}

		return e.complexity.DispensedProduct.ID(childComplexity), true

	case "DispensedProduct.product":
		if e.complexity.DispensedProduct.Product == nil {
			break
		}

		return e.complexity.DispensedProduct.Product(childComplexity), true

	case "DispensedProduct.quantity":
		if e.complexity.DispensedProduct.Quantity == nil {
			break
		}

		return e.complexity.DispensedProduct.Quantity(childComplexity), true

	case "DispensedProduct.school":
		if e.complexity.DispensedProduct.School == nil {
			break
		}

		return e.complexity.DispensedProduct.School(childComplexity), true

	case "DispensedProductsConnection.edges":
		if e.complexity.DispensedProductsConnection.Edges == nil {
			break
		}

		return e.complexity.DispensedProductsConnection.Edges(childComplexity), true

	case "DispensedProductsConnection.pageInfo":
		if e.complexity.DispensedProductsConnection.PageInfo == nil {
			break
		}

		return e.complexity.DispensedProductsConnection.PageInfo(childComplexity), true

	case "DispensedProductsConnection.totalCount":
		if e.complexity.DispensedProductsConnection.TotalCount == nil {
			break
		}

		return e.complexity.DispensedProductsConnection.TotalCount(childComplexity), true

	case "DispensedProductsEdge.cursor":
		if e.complexity.DispensedProductsEdge.Cursor == nil {
			break
		}

		return e.complexity.DispensedProductsEdge.Cursor(childComplexity), true

	case "DispensedProductsEdge.node":
		if e.complexity.DispensedProductsEdge.Node == nil {
			break
		}

		return e.complexity.DispensedProductsEdge.Node(childComplexity), true

	case "Essene.createdAt":
		if e.complexity.Essene.CreatedAt == nil {
			break
		}

		return e.complexity.Essene.CreatedAt(childComplexity), true

	case "Essene.id":
		if e.complexity.Essene.ID == nil {
			break
		}

		return e.complexity.Essene.ID(childComplexity), true

	case "Essene.school":
		if e.complexity.Essene.School == nil {
			break
		}

		return e.complexity.Essene.School(childComplexity), true

	case "Essene.user":
		if e.complexity.Essene.User == nil {
			break
		}

		return e.complexity.Essene.User(childComplexity), true

	case "EssenesConnection.edges":
		if e.complexity.EssenesConnection.Edges == nil {
			break
		}

		return e.complexity.EssenesConnection.Edges(childComplexity), true

	case "EssenesConnection.pageInfo":
		if e.complexity.EssenesConnection.PageInfo == nil {
			break
		}

		return e.complexity.EssenesConnection.PageInfo(childComplexity), true

	case "EssenesConnection.totalCount":
		if e.complexity.EssenesConnection.TotalCount == nil {
			break
		}

		return e.complexity.EssenesConnection.TotalCount(childComplexity), true

	case "EssenesEdge.cursor":
		if e.complexity.EssenesEdge.Cursor == nil {
			break
		}

		return e.complexity.EssenesEdge.Cursor(childComplexity), true

	case "EssenesEdge.node":
		if e.complexity.EssenesEdge.Node == nil {
			break
		}

		return e.complexity.EssenesEdge.Node(childComplexity), true

	case "Exam.createdAt":
		if e.complexity.Exam.CreatedAt == nil {
			break
		}

		return e.complexity.Exam.CreatedAt(childComplexity), true

	case "Exam.date":
		if e.complexity.Exam.Date == nil {
			break
		}

		return e.complexity.Exam.Date(childComplexity), true

	case "Exam.grade":
		if e.complexity.Exam.Grade == nil {
			break
		}

		return e.complexity.Exam.Grade(childComplexity), true

	case "Exam.id":
		if e.complexity.Exam.ID == nil {
			break
		}

		return e.complexity.Exam.ID(childComplexity), true

	case "Exam.name":
		if e.complexity.Exam.Name == nil {
			break
		}

		return e.complexity.Exam.Name(childComplexity), true

	case "Exam.school":
		if e.complexity.Exam.School == nil {
			break
		}

		return e.complexity.Exam.School(childComplexity), true

	case "Exam.scores":
		if e.complexity.Exam.Scores == nil {
			break
		}

		return e.complexity.Exam.Scores(childComplexity), true

	case "ExamsConnection.edges":
		if e.complexity.ExamsConnection.Edges == nil {
			break
		}

		return e.complexity.ExamsConnection.Edges(childComplexity), true

	case "ExamsConnection.pageInfo":
		if e.complexity.ExamsConnection.PageInfo == nil {
			break
		}

		return e.complexity.ExamsConnection.PageInfo(childComplexity), true

	case "ExamsConnection.totalCount":
		if e.complexity.ExamsConnection.TotalCount == nil {
			break
		}

		return e.complexity.ExamsConnection.TotalCount(childComplexity), true

	case "ExamsEdge.cursor":
		if e.complexity.ExamsEdge.Cursor == nil {
			break
		}

		return e.complexity.ExamsEdge.Cursor(childComplexity), true

	case "ExamsEdge.node":
		if e.complexity.ExamsEdge.Node == nil {
			break
		}

		return e.complexity.ExamsEdge.Node(childComplexity), true

	case "Fee.amount":
		if e.complexity.Fee.Amount == nil {
			break
		}

		return e.complexity.Fee.Amount(childComplexity), true

	case "Fee.createdAt":
		if e.complexity.Fee.CreatedAt == nil {
			break
		}

		return e.complexity.Fee.CreatedAt(childComplexity), true

	case "Fee.grade":
		if e.complexity.Fee.Grade == nil {
			break
		}

		return e.complexity.Fee.Grade(childComplexity), true

	case "Fee.id":
		if e.complexity.Fee.ID == nil {
			break
		}

		return e.complexity.Fee.ID(childComplexity), true

	case "Fee.school":
		if e.complexity.Fee.School == nil {
			break
		}

		return e.complexity.Fee.School(childComplexity), true

	case "Fee.semester":
		if e.complexity.Fee.Semester == nil {
			break
		}

		return e.complexity.Fee.Semester(childComplexity), true

	case "Fee.year":
		if e.complexity.Fee.Year == nil {
			break
		}

		return e.complexity.Fee.Year(childComplexity), true

	case "FeesConnection.edges":
		if e.complexity.FeesConnection.Edges == nil {
			break
		}

		return e.complexity.FeesConnection.Edges(childComplexity), true

	case "FeesConnection.pageInfo":
		if e.complexity.FeesConnection.PageInfo == nil {
			break
		}

		return e.complexity.FeesConnection.PageInfo(childComplexity), true

	case "FeesConnection.totalCount":
		if e.complexity.FeesConnection.TotalCount == nil {
			break
		}

		return e.complexity.FeesConnection.TotalCount(childComplexity), true

	case "FeesEdge.cursor":
		if e.complexity.FeesEdge.Cursor == nil {
			break
		}

		return e.complexity.FeesEdge.Cursor(childComplexity), true

	case "FeesEdge.node":
		if e.complexity.FeesEdge.Node == nil {
			break
		}

		return e.complexity.FeesEdge.Node(childComplexity), true

	case "Grade.classTeacher":
		if e.complexity.Grade.ClassTeacher == nil {
			break
		}

		return e.complexity.Grade.ClassTeacher(childComplexity), true

	case "Grade.createdAt":
		if e.complexity.Grade.CreatedAt == nil {
			break
		}

		return e.complexity.Grade.CreatedAt(childComplexity), true

	case "Grade.cultures":
		if e.complexity.Grade.Cultures == nil {
			break
		}

		return e.complexity.Grade.Cultures(childComplexity), true

	case "Grade.exams":
		if e.complexity.Grade.Exams == nil {
			break
		}

		return e.complexity.Grade.Exams(childComplexity), true

	case "Grade.fees":
		if e.complexity.Grade.Fees == nil {
			break
		}

		return e.complexity.Grade.Fees(childComplexity), true

	case "Grade.id":
		if e.complexity.Grade.ID == nil {
			break
		}

		return e.complexity.Grade.ID(childComplexity), true

	case "Grade.lessons":
		if e.complexity.Grade.Lessons == nil {
			break
		}

		return e.complexity.Grade.Lessons(childComplexity), true

	case "Grade.motto":
		if e.complexity.Grade.Motto == nil {
			break
		}

		return e.complexity.Grade.Motto(childComplexity), true

	case "Grade.name":
		if e.complexity.Grade.Name == nil {
			break
		}

		return e.complexity.Grade.Name(childComplexity), true

	case "Grade.school":
		if e.complexity.Grade.School == nil {
			break
		}

		return e.complexity.Grade.School(childComplexity), true

	case "Grade.stream":
		if e.complexity.Grade.Stream == nil {
			break
		}

		return e.complexity.Grade.Stream(childComplexity), true

	case "Grade.students":
		if e.complexity.Grade.Students == nil {
			break
		}

		args, err := ec.field_Grade_students_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Grade.Students(childComplexity, args["first"].(*int), args["after"].(*string)), true

	case "Grade.studentsInClass":
		if e.complexity.Grade.StudentsInClass == nil {
			break
		}

		return e.complexity.Grade.StudentsInClass(childComplexity), true

	case "Grade.timeTables":
		if e.complexity.Grade.TimeTables == nil {
			break
		}

		return e.complexity.Grade.TimeTables(childComplexity), true

	case "GradesConnection.edges":
		if e.complexity.GradesConnection.Edges == nil {
			break
		}

		return e.complexity.GradesConnection.Edges(childComplexity), true

	case "GradesConnection.pageInfo":
		if e.complexity.GradesConnection.PageInfo == nil {
			break
		}

		return e.complexity.GradesConnection.PageInfo(childComplexity), true

	case "GradesConnection.totalCount":
		if e.complexity.GradesConnection.TotalCount == nil {
			break
		}

		return e.complexity.GradesConnection.TotalCount(childComplexity), true

	case "GradesEdge.cursor":
		if e.complexity.GradesEdge.Cursor == nil {
			break
		}

		return e.complexity.GradesEdge.Cursor(childComplexity), true

	case "GradesEdge.node":
		if e.complexity.GradesEdge.Node == nil {
			break
		}

		return e.complexity.GradesEdge.Node(childComplexity), true

	case "Guardian.addrCounty":
		if e.complexity.Guardian.AddrCounty == nil {
			break
		}

		return e.complexity.Guardian.AddrCounty(childComplexity), true

	case "Guardian.addrDistrict":
		if e.complexity.Guardian.AddrDistrict == nil {
			break
		}

		return e.complexity.Guardian.AddrDistrict(childComplexity), true

	case "Guardian.addrNationality":
		if e.complexity.Guardian.AddrNationality == nil {
			break
		}

		return e.complexity.Guardian.AddrNationality(childComplexity), true

	case "Guardian.addrPoBox":
		if e.complexity.Guardian.AddrPoBox == nil {
			break
		}

		return e.complexity.Guardian.AddrPoBox(childComplexity), true

	case "Guardian.addrPostalCode":
		if e.complexity.Guardian.AddrPostalCode == nil {
			break
		}

		return e.complexity.Guardian.AddrPostalCode(childComplexity), true

	case "Guardian.archives":
		if e.complexity.Guardian.Archives == nil {
			break
		}

		args, err := ec.field_Guardian_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Guardian.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Guardian.cell":
		if e.complexity.Guardian.Cell == nil {
			break
		}

		return e.complexity.Guardian.Cell(childComplexity), true

	case "Guardian.createdAt":
		if e.complexity.Guardian.CreatedAt == nil {
			break
		}

		return e.complexity.Guardian.CreatedAt(childComplexity), true

	case "Guardian.email":
		if e.complexity.Guardian.Email == nil {
			break
		}

		return e.complexity.Guardian.Email(childComplexity), true

	case "Guardian.gender":
		if e.complexity.Guardian.Gender == nil {
			break
		}

		return e.complexity.Guardian.Gender(childComplexity), true

	case "Guardian.id":
		if e.complexity.Guardian.ID == nil {
			break
		}

		return e.complexity.Guardian.ID(childComplexity), true

	case "Guardian.iDno":
		if e.complexity.Guardian.IDno == nil {
			break
		}

		return e.complexity.Guardian.IDno(childComplexity), true

	case "Guardian.ipAddress":
		if e.complexity.Guardian.IPAddress == nil {
			break
		}

		return e.complexity.Guardian.IPAddress(childComplexity), true

	case "Guardian.messages":
		if e.complexity.Guardian.Messages == nil {
			break
		}

		return e.complexity.Guardian.Messages(childComplexity), true

	case "Guardian.nHIFno":
		if e.complexity.Guardian.NHIFno == nil {
			break
		}

		return e.complexity.Guardian.NHIFno(childComplexity), true

	case "Guardian.name":
		if e.complexity.Guardian.Name == nil {
			break
		}

		return e.complexity.Guardian.Name(childComplexity), true

	case "Guardian.payments":
		if e.complexity.Guardian.Payments == nil {
			break
		}

		return e.complexity.Guardian.Payments(childComplexity), true

	case "Guardian.roles":
		if e.complexity.Guardian.Roles == nil {
			break
		}

		return e.complexity.Guardian.Roles(childComplexity), true

	case "Guardian.salute":
		if e.complexity.Guardian.Salute == nil {
			break
		}

		return e.complexity.Guardian.Salute(childComplexity), true

	case "Guardian.school":
		if e.complexity.Guardian.School == nil {
			break
		}

		return e.complexity.Guardian.School(childComplexity), true

	case "Guardian.students":
		if e.complexity.Guardian.Students == nil {
			break
		}

		return e.complexity.Guardian.Students(childComplexity), true

	case "Guardian.visits":
		if e.complexity.Guardian.Visits == nil {
			break
		}

		return e.complexity.Guardian.Visits(childComplexity), true

	case "Guardian.viwedDiaries":
		if e.complexity.Guardian.ViwedDiaries == nil {
			break
		}

		return e.complexity.Guardian.ViwedDiaries(childComplexity), true

	case "GuardiansConnection.edges":
		if e.complexity.GuardiansConnection.Edges == nil {
			break
		}

		return e.complexity.GuardiansConnection.Edges(childComplexity), true

	case "GuardiansConnection.pageInfo":
		if e.complexity.GuardiansConnection.PageInfo == nil {
			break
		}

		return e.complexity.GuardiansConnection.PageInfo(childComplexity), true

	case "GuardiansConnection.totalCount":
		if e.complexity.GuardiansConnection.TotalCount == nil {
			break
		}

		return e.complexity.GuardiansConnection.TotalCount(childComplexity), true

	case "GuardiansEdge.cursor":
		if e.complexity.GuardiansEdge.Cursor == nil {
			break
		}

		return e.complexity.GuardiansEdge.Cursor(childComplexity), true

	case "GuardiansEdge.node":
		if e.complexity.GuardiansEdge.Node == nil {
			break
		}

		return e.complexity.GuardiansEdge.Node(childComplexity), true

	case "Lend.book":
		if e.complexity.Lend.Book == nil {
			break
		}

		return e.complexity.Lend.Book(childComplexity), true

	case "Lend.condition":
		if e.complexity.Lend.Condition == nil {
			break
		}

		return e.complexity.Lend.Condition(childComplexity), true

	case "Lend.createdAt":
		if e.complexity.Lend.CreatedAt == nil {
			break
		}

		return e.complexity.Lend.CreatedAt(childComplexity), true

	case "Lend.due_on":
		if e.complexity.Lend.DueOn == nil {
			break
		}

		return e.complexity.Lend.DueOn(childComplexity), true

	case "Lend.handed_over":
		if e.complexity.Lend.HandedOver == nil {
			break
		}

		return e.complexity.Lend.HandedOver(childComplexity), true

	case "Lend.handed_over_on":
		if e.complexity.Lend.HandedOverOn == nil {
			break
		}

		return e.complexity.Lend.HandedOverOn(childComplexity), true

	case "Lend.id":
		if e.complexity.Lend.ID == nil {
			break
		}

		return e.complexity.Lend.ID(childComplexity), true

	case "Lend.librarian":
		if e.complexity.Lend.Librarian == nil {
			break
		}

		return e.complexity.Lend.Librarian(childComplexity), true

	case "Lend.received_on":
		if e.complexity.Lend.ReceivedOn == nil {
			break
		}

		return e.complexity.Lend.ReceivedOn(childComplexity), true

	case "Lend.school":
		if e.complexity.Lend.School == nil {
			break
		}

		return e.complexity.Lend.School(childComplexity), true

	case "Lend.student":
		if e.complexity.Lend.Student == nil {
			break
		}

		return e.complexity.Lend.Student(childComplexity), true

	case "LendsConnection.edges":
		if e.complexity.LendsConnection.Edges == nil {
			break
		}

		return e.complexity.LendsConnection.Edges(childComplexity), true

	case "LendsConnection.pageInfo":
		if e.complexity.LendsConnection.PageInfo == nil {
			break
		}

		return e.complexity.LendsConnection.PageInfo(childComplexity), true

	case "LendsConnection.totalCount":
		if e.complexity.LendsConnection.TotalCount == nil {
			break
		}

		return e.complexity.LendsConnection.TotalCount(childComplexity), true

	case "LendsEdge.cursor":
		if e.complexity.LendsEdge.Cursor == nil {
			break
		}

		return e.complexity.LendsEdge.Cursor(childComplexity), true

	case "LendsEdge.node":
		if e.complexity.LendsEdge.Node == nil {
			break
		}

		return e.complexity.LendsEdge.Node(childComplexity), true

	case "Lesson.createdAt":
		if e.complexity.Lesson.CreatedAt == nil {
			break
		}

		return e.complexity.Lesson.CreatedAt(childComplexity), true

	case "Lesson.date":
		if e.complexity.Lesson.Date == nil {
			break
		}

		return e.complexity.Lesson.Date(childComplexity), true

	case "Lesson.done":
		if e.complexity.Lesson.Done == nil {
			break
		}

		return e.complexity.Lesson.Done(childComplexity), true

	case "Lesson.duration":
		if e.complexity.Lesson.Duration == nil {
			break
		}

		return e.complexity.Lesson.Duration(childComplexity), true

	case "Lesson.files":
		if e.complexity.Lesson.Files == nil {
			break
		}

		return e.complexity.Lesson.Files(childComplexity), true

	case "Lesson.grade":
		if e.complexity.Lesson.Grade == nil {
			break
		}

		return e.complexity.Lesson.Grade(childComplexity), true

	case "Lesson.id":
		if e.complexity.Lesson.ID == nil {
			break
		}

		return e.complexity.Lesson.ID(childComplexity), true

	case "Lesson.name":
		if e.complexity.Lesson.Name == nil {
			break
		}

		return e.complexity.Lesson.Name(childComplexity), true

	case "Lesson.remarks":
		if e.complexity.Lesson.Remarks == nil {
			break
		}

		return e.complexity.Lesson.Remarks(childComplexity), true

	case "Lesson.school":
		if e.complexity.Lesson.School == nil {
			break
		}

		return e.complexity.Lesson.School(childComplexity), true

	case "Lesson.start":
		if e.complexity.Lesson.Start == nil {
			break
		}

		return e.complexity.Lesson.Start(childComplexity), true

	case "Lesson.stop":
		if e.complexity.Lesson.Stop == nil {
			break
		}

		return e.complexity.Lesson.Stop(childComplexity), true

	case "Lesson.subject":
		if e.complexity.Lesson.Subject == nil {
			break
		}

		return e.complexity.Lesson.Subject(childComplexity), true

	case "Lesson.timeDate":
		if e.complexity.Lesson.TimeDate == nil {
			break
		}

		return e.complexity.Lesson.TimeDate(childComplexity), true

	case "Lesson.topic":
		if e.complexity.Lesson.Topic == nil {
			break
		}

		return e.complexity.Lesson.Topic(childComplexity), true

	case "Lesson.tutor":
		if e.complexity.Lesson.Tutor == nil {
			break
		}

		return e.complexity.Lesson.Tutor(childComplexity), true

	case "LessonsConnection.edges":
		if e.complexity.LessonsConnection.Edges == nil {
			break
		}

		return e.complexity.LessonsConnection.Edges(childComplexity), true

	case "LessonsConnection.pageInfo":
		if e.complexity.LessonsConnection.PageInfo == nil {
			break
		}

		return e.complexity.LessonsConnection.PageInfo(childComplexity), true

	case "LessonsConnection.totalCount":
		if e.complexity.LessonsConnection.TotalCount == nil {
			break
		}

		return e.complexity.LessonsConnection.TotalCount(childComplexity), true

	case "LessonsEdge.cursor":
		if e.complexity.LessonsEdge.Cursor == nil {
			break
		}

		return e.complexity.LessonsEdge.Cursor(childComplexity), true

	case "LessonsEdge.node":
		if e.complexity.LessonsEdge.Node == nil {
			break
		}

		return e.complexity.LessonsEdge.Node(childComplexity), true

	case "Librarian.addrCounty":
		if e.complexity.Librarian.AddrCounty == nil {
			break
		}

		return e.complexity.Librarian.AddrCounty(childComplexity), true

	case "Librarian.addrDistrict":
		if e.complexity.Librarian.AddrDistrict == nil {
			break
		}

		return e.complexity.Librarian.AddrDistrict(childComplexity), true

	case "Librarian.addrNationality":
		if e.complexity.Librarian.AddrNationality == nil {
			break
		}

		return e.complexity.Librarian.AddrNationality(childComplexity), true

	case "Librarian.addrPoBox":
		if e.complexity.Librarian.AddrPoBox == nil {
			break
		}

		return e.complexity.Librarian.AddrPoBox(childComplexity), true

	case "Librarian.addrPostalCode":
		if e.complexity.Librarian.AddrPostalCode == nil {
			break
		}

		return e.complexity.Librarian.AddrPostalCode(childComplexity), true

	case "Librarian.archives":
		if e.complexity.Librarian.Archives == nil {
			break
		}

		args, err := ec.field_Librarian_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Librarian.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Librarian.cell":
		if e.complexity.Librarian.Cell == nil {
			break
		}

		return e.complexity.Librarian.Cell(childComplexity), true

	case "Librarian.checkinCheckouts":
		if e.complexity.Librarian.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Librarian.CheckinCheckouts(childComplexity), true

	case "Librarian.createdAt":
		if e.complexity.Librarian.CreatedAt == nil {
			break
		}

		return e.complexity.Librarian.CreatedAt(childComplexity), true

	case "Librarian.email":
		if e.complexity.Librarian.Email == nil {
			break
		}

		return e.complexity.Librarian.Email(childComplexity), true

	case "Librarian.gender":
		if e.complexity.Librarian.Gender == nil {
			break
		}

		return e.complexity.Librarian.Gender(childComplexity), true

	case "Librarian.id":
		if e.complexity.Librarian.ID == nil {
			break
		}

		return e.complexity.Librarian.ID(childComplexity), true

	case "Librarian.iDno":
		if e.complexity.Librarian.IDno == nil {
			break
		}

		return e.complexity.Librarian.IDno(childComplexity), true

	case "Librarian.ipAddress":
		if e.complexity.Librarian.IPAddress == nil {
			break
		}

		return e.complexity.Librarian.IPAddress(childComplexity), true

	case "Librarian.lendsAuthorized":
		if e.complexity.Librarian.LendsAuthorized == nil {
			break
		}

		return e.complexity.Librarian.LendsAuthorized(childComplexity), true

	case "Librarian.nHIFno":
		if e.complexity.Librarian.NHIFno == nil {
			break
		}

		return e.complexity.Librarian.NHIFno(childComplexity), true

	case "Librarian.name":
		if e.complexity.Librarian.Name == nil {
			break
		}

		return e.complexity.Librarian.Name(childComplexity), true

	case "Librarian.pass":
		if e.complexity.Librarian.Pass == nil {
			break
		}

		return e.complexity.Librarian.Pass(childComplexity), true

	case "Librarian.roles":
		if e.complexity.Librarian.Roles == nil {
			break
		}

		return e.complexity.Librarian.Roles(childComplexity), true

	case "Librarian.salute":
		if e.complexity.Librarian.Salute == nil {
			break
		}

		return e.complexity.Librarian.Salute(childComplexity), true

	case "Librarian.school":
		if e.complexity.Librarian.School == nil {
			break
		}

		return e.complexity.Librarian.School(childComplexity), true

	case "Librarian.semiFormal":
		if e.complexity.Librarian.SemiFormal == nil {
			break
		}

		return e.complexity.Librarian.SemiFormal(childComplexity), true

	case "Librarian.thumbNail":
		if e.complexity.Librarian.ThumbNail == nil {
			break
		}

		return e.complexity.Librarian.ThumbNail(childComplexity), true

	case "LibrariansConnection.edges":
		if e.complexity.LibrariansConnection.Edges == nil {
			break
		}

		return e.complexity.LibrariansConnection.Edges(childComplexity), true

	case "LibrariansConnection.pageInfo":
		if e.complexity.LibrariansConnection.PageInfo == nil {
			break
		}

		return e.complexity.LibrariansConnection.PageInfo(childComplexity), true

	case "LibrariansConnection.totalCount":
		if e.complexity.LibrariansConnection.TotalCount == nil {
			break
		}

		return e.complexity.LibrariansConnection.TotalCount(childComplexity), true

	case "LibrariansEdge.cursor":
		if e.complexity.LibrariansEdge.Cursor == nil {
			break
		}

		return e.complexity.LibrariansEdge.Cursor(childComplexity), true

	case "LibrariansEdge.node":
		if e.complexity.LibrariansEdge.Node == nil {
			break
		}

		return e.complexity.LibrariansEdge.Node(childComplexity), true

	case "Manager.addrCounty":
		if e.complexity.Manager.AddrCounty == nil {
			break
		}

		return e.complexity.Manager.AddrCounty(childComplexity), true

	case "Manager.addrDistrict":
		if e.complexity.Manager.AddrDistrict == nil {
			break
		}

		return e.complexity.Manager.AddrDistrict(childComplexity), true

	case "Manager.addrNationality":
		if e.complexity.Manager.AddrNationality == nil {
			break
		}

		return e.complexity.Manager.AddrNationality(childComplexity), true

	case "Manager.addrPoBox":
		if e.complexity.Manager.AddrPoBox == nil {
			break
		}

		return e.complexity.Manager.AddrPoBox(childComplexity), true

	case "Manager.addrPostalCode":
		if e.complexity.Manager.AddrPostalCode == nil {
			break
		}

		return e.complexity.Manager.AddrPostalCode(childComplexity), true

	case "Manager.archives":
		if e.complexity.Manager.Archives == nil {
			break
		}

		args, err := ec.field_Manager_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Manager.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Manager.authorizedPayments":
		if e.complexity.Manager.AuthorizedPayments == nil {
			break
		}

		return e.complexity.Manager.AuthorizedPayments(childComplexity), true

	case "Manager.cell":
		if e.complexity.Manager.Cell == nil {
			break
		}

		return e.complexity.Manager.Cell(childComplexity), true

	case "Manager.checkinCheckouts":
		if e.complexity.Manager.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Manager.CheckinCheckouts(childComplexity), true

	case "Manager.createdAt":
		if e.complexity.Manager.CreatedAt == nil {
			break
		}

		return e.complexity.Manager.CreatedAt(childComplexity), true

	case "Manager.email":
		if e.complexity.Manager.Email == nil {
			break
		}

		return e.complexity.Manager.Email(childComplexity), true

	case "Manager.gender":
		if e.complexity.Manager.Gender == nil {
			break
		}

		return e.complexity.Manager.Gender(childComplexity), true

	case "Manager.id":
		if e.complexity.Manager.ID == nil {
			break
		}

		return e.complexity.Manager.ID(childComplexity), true

	case "Manager.iDno":
		if e.complexity.Manager.IDno == nil {
			break
		}

		return e.complexity.Manager.IDno(childComplexity), true

	case "Manager.ipAddress":
		if e.complexity.Manager.IPAddress == nil {
			break
		}

		return e.complexity.Manager.IPAddress(childComplexity), true

	case "Manager.messages":
		if e.complexity.Manager.Messages == nil {
			break
		}

		return e.complexity.Manager.Messages(childComplexity), true

	case "Manager.nHIFno":
		if e.complexity.Manager.NHIFno == nil {
			break
		}

		return e.complexity.Manager.NHIFno(childComplexity), true

	case "Manager.name":
		if e.complexity.Manager.Name == nil {
			break
		}

		return e.complexity.Manager.Name(childComplexity), true

	case "Manager.pass":
		if e.complexity.Manager.Pass == nil {
			break
		}

		return e.complexity.Manager.Pass(childComplexity), true

	case "Manager.roles":
		if e.complexity.Manager.Roles == nil {
			break
		}

		return e.complexity.Manager.Roles(childComplexity), true

	case "Manager.salute":
		if e.complexity.Manager.Salute == nil {
			break
		}

		return e.complexity.Manager.Salute(childComplexity), true

	case "Manager.school":
		if e.complexity.Manager.School == nil {
			break
		}

		return e.complexity.Manager.School(childComplexity), true

	case "Manager.semiFormal":
		if e.complexity.Manager.SemiFormal == nil {
			break
		}

		return e.complexity.Manager.SemiFormal(childComplexity), true

	case "Manager.thumbNail":
		if e.complexity.Manager.ThumbNail == nil {
			break
		}

		return e.complexity.Manager.ThumbNail(childComplexity), true

	case "ManagersConnection.edges":
		if e.complexity.ManagersConnection.Edges == nil {
			break
		}

		return e.complexity.ManagersConnection.Edges(childComplexity), true

	case "ManagersConnection.pageInfo":
		if e.complexity.ManagersConnection.PageInfo == nil {
			break
		}

		return e.complexity.ManagersConnection.PageInfo(childComplexity), true

	case "ManagersConnection.totalCount":
		if e.complexity.ManagersConnection.TotalCount == nil {
			break
		}

		return e.complexity.ManagersConnection.TotalCount(childComplexity), true

	case "ManagersEdge.cursor":
		if e.complexity.ManagersEdge.Cursor == nil {
			break
		}

		return e.complexity.ManagersEdge.Cursor(childComplexity), true

	case "ManagersEdge.node":
		if e.complexity.ManagersEdge.Node == nil {
			break
		}

		return e.complexity.ManagersEdge.Node(childComplexity), true

	case "Message.createdAt":
		if e.complexity.Message.CreatedAt == nil {
			break
		}

		return e.complexity.Message.CreatedAt(childComplexity), true

	case "Message.delivered":
		if e.complexity.Message.Delivered == nil {
			break
		}

		return e.complexity.Message.Delivered(childComplexity), true

	case "Message.id":
		if e.complexity.Message.ID == nil {
			break
		}

		return e.complexity.Message.ID(childComplexity), true

	case "Message.returnUser":
		if e.complexity.Message.ReturnUser == nil {
			break
		}

		return e.complexity.Message.ReturnUser(childComplexity), true

	case "Message.school":
		if e.complexity.Message.School == nil {
			break
		}

		return e.complexity.Message.School(childComplexity), true

	case "Message.text":
		if e.complexity.Message.Text == nil {
			break
		}

		return e.complexity.Message.Text(childComplexity), true

	case "Message.thread":
		if e.complexity.Message.Thread == nil {
			break
		}

		return e.complexity.Message.Thread(childComplexity), true

	case "Message.topic":
		if e.complexity.Message.Topic == nil {
			break
		}

		return e.complexity.Message.Topic(childComplexity), true

	case "MessagesConnection.edges":
		if e.complexity.MessagesConnection.Edges == nil {
			break
		}

		return e.complexity.MessagesConnection.Edges(childComplexity), true

	case "MessagesConnection.pageInfo":
		if e.complexity.MessagesConnection.PageInfo == nil {
			break
		}

		return e.complexity.MessagesConnection.PageInfo(childComplexity), true

	case "MessagesConnection.totalCount":
		if e.complexity.MessagesConnection.TotalCount == nil {
			break
		}

		return e.complexity.MessagesConnection.TotalCount(childComplexity), true

	case "MessagesEdge.cursor":
		if e.complexity.MessagesEdge.Cursor == nil {
			break
		}

		return e.complexity.MessagesEdge.Cursor(childComplexity), true

	case "MessagesEdge.node":
		if e.complexity.MessagesEdge.Node == nil {
			break
		}

		return e.complexity.MessagesEdge.Node(childComplexity), true

	case "Mutation.addBook":
		if e.complexity.Mutation.AddBook == nil {
			break
		}

		args, err := ec.field_Mutation_addBook_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddBook(childComplexity, args["name"].(string), args["isbn"].(string), args["authors"].(string), args["revision"].(string), args["school"].(string)), true

	case "Mutation.addDepartment":
		if e.complexity.Mutation.AddDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_addDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddDepartment(childComplexity, args["name"].(model.DeptEnum), args["hod"].(string), args["school"].(string)), true

	case "Mutation.AddExam":
		if e.complexity.Mutation.AddExam == nil {
			break
		}

		args, err := ec.field_Mutation_AddExam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddExam(childComplexity, args["name"].(string), args["date"].(string), args["grade"].(model.GradeEnum), args["school"].(string)), true

	case "Mutation.AddFee":
		if e.complexity.Mutation.AddFee == nil {
			break
		}

		args, err := ec.field_Mutation_AddFee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFee(childComplexity, args["grade"].(model.GradeEnum), args["year"].(string), args["amount"].(float64), args["semester"].(string), args["school"].(string)), true

	case "Mutation.addFile":
		if e.complexity.Mutation.AddFile == nil {
			break
		}

		args, err := ec.field_Mutation_addFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFile(childComplexity, args["file"].(graphql.Upload), args["fileType"].(model.FileTypeEnum), args["requiredByID"].(string), args["uploader"].(string), args["fileURI"].(string), args["schoolEmail"].(string)), true

	case "Mutation.addGrade":
		if e.complexity.Mutation.AddGrade == nil {
			break
		}

		args, err := ec.field_Mutation_addGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddGrade(childComplexity, args["name"].(model.GradeEnum), args["stream"].(string), args["classTeacher"].(string), args["motto"].(string), args["schoolEmail"].(string)), true

	case "Mutation.addLesson":
		if e.complexity.Mutation.AddLesson == nil {
			break
		}

		args, err := ec.field_Mutation_addLesson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddLesson(childComplexity, args["name"].(string), args["date"].(string), args["timeDate"].(model.PeriodEnum), args["tutorEmail"].(string), args["grade"].(model.GradeEnum), args["subject"].(model.SubjectEnum), args["start"].(string), args["stop"].(string), args["duration"].(float64), args["done"].(bool), args["remarks"].(string), args["school"].(string)), true

	case "Mutation.AddProduct":
		if e.complexity.Mutation.AddProduct == nil {
			break
		}

		args, err := ec.field_Mutation_AddProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProduct(childComplexity, args["Name"].(string), args["Cost"].(float64), args["Quantity"].(float64), args["Supplier"].(string), args["Category"].(model.ProductCategoryEnum), args["ReceivedOn"].(string), args["ReceivedBy"].(string), args["AllowedMinimum"].(float64), args["SchoolEmail"].(string)), true

	case "Mutation.AddRole":
		if e.complexity.Mutation.AddRole == nil {
			break
		}

		args, err := ec.field_Mutation_AddRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddRole(childComplexity, args["userEmail"].(string), args["roleName"].(model.RolesEnum)), true

	case "Mutation.addSchool":
		if e.complexity.Mutation.AddSchool == nil {
			break
		}

		args, err := ec.field_Mutation_addSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSchool(childComplexity, args["name"].(string), args["motto"].(string), args["phone"].(string), args["email"].(string), args["website"].(string), args["addrPoBox"].(string), args["addrPostalCode"].(string), args["addrTown"].(string), args["addrCounty"].(string), args["addrCountry"].(string)), true

	case "Mutation.AddScore":
		if e.complexity.Mutation.AddScore == nil {
			break
		}

		args, err := ec.field_Mutation_AddScore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddScore(childComplexity, args["score"].(float64), args["studentNemis"].(string), args["subject"].(model.SubjectEnum), args["examID"].(string), args["schoolEmail"].(string)), true

	case "Mutation.addStudent":
		if e.complexity.Mutation.AddStudent == nil {
			break
		}

		args, err := ec.field_Mutation_addStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddStudent(childComplexity, args["name"].(string), args["nemisNo"].(string), args["nhifStatus"].(bool), args["bCertNo"].(string), args["nickName"].(string), args["dob"].(time.Time), args["hoby1"].(string), args["hoby2"].(string), args["hoby3"].(string), args["roleModel1"].(string), args["roleModel2"].(string), args["roleModel3"].(string), args["career1"].(string), args["career2"].(string), args["career3"].(string), args["Motto"].(string), args["BloodGroup"].(string), args["BestFriend"].(string), args["language1"].(string), args["language2"].(string), args["language3"].(string), args["Game"].(string), args["Subject"].(string), args["Book"].(string), args["Quote"].(string), args["Animal"].(string), args["Device"].(string), args["grade"].(model.GradeEnum), args["school"].(string), args["parent"].(string), args["fees"].(float64), args["sharemeal"].(bool), args["greetstranger"].(bool), args["firstaider"].(bool)), true

	case "Mutation.AddStudentGuardian":
		if e.complexity.Mutation.AddStudentGuardian == nil {
			break
		}

		args, err := ec.field_Mutation_AddStudentGuardian_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddStudentGuardian(childComplexity, args["studentNemis"].(string), args["guardianEmail"].(string), args["schoolEmail"].(string)), true

	case "Mutation.addSubject":
		if e.complexity.Mutation.AddSubject == nil {
			break
		}

		args, err := ec.field_Mutation_addSubject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSubject(childComplexity, args["name"].(model.SubjectEnum), args["department"].(model.DeptEnum), args["schoolEmail"].(string)), true

	case "Mutation.AddTimeTable":
		if e.complexity.Mutation.AddTimeTable == nil {
			break
		}

		args, err := ec.field_Mutation_AddTimeTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTimeTable(childComplexity, args["Day"].(string), args["Lesson1"].(string), args["Lesson2"].(string), args["Lesson3"].(string), args["Lesson4"].(string), args["Lesson5"].(string), args["Lesson6"].(string), args["Lesson7"].(string), args["Lesson8"].(string), args["Grade"].(model.GradeEnum), args["SchoolEmail"].(string)), true

	case "Mutation.AddTopic":
		if e.complexity.Mutation.AddTopic == nil {
			break
		}

		args, err := ec.field_Mutation_AddTopic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTopic(childComplexity, args["lesson"].(string), args["strand"].(string), args["subStrand"].(string), args["outComes"].(string), args["experiences"].(string), args["inquiries"].(string), args["competencies"].(string), args["lifeSkills"].(string), args["ESDDRR"].(string), args["values"].(string), args["otherAreas"].(string), args["communityActivities"].(string), args["nonFormalActivity"].(string), args["assessment"].(string), args["schoolEmail"].(string)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["email"].(string), args["password"].(string), args["salute"].(model.SaluteEnum), args["name"].(string), args["IDno"].(string), args["NHIFno"].(string), args["cell"].(string), args["gender"].(model.GenderEnum), args["school"].(string), args["addr_poBox"].(string), args["addr_postalCode"].(string), args["addr_district"].(string), args["addr_county"].(string), args["addr_nationality"].(string)), true

	case "Mutation.AttendLesson":
		if e.complexity.Mutation.AttendLesson == nil {
			break
		}

		args, err := ec.field_Mutation_AttendLesson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AttendLesson(childComplexity, args["nemisID"].(string), args["lessonID"].(string), args["school"].(string)), true

	case "Mutation.ConfirmLessonAttended":
		if e.complexity.Mutation.ConfirmLessonAttended == nil {
			break
		}

		args, err := ec.field_Mutation_ConfirmLessonAttended_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmLessonAttended(childComplexity, args["attendanceID"].(string), args["StudentGIF"].(graphql.Upload)), true

	case "Mutation.ConfirmPayment":
		if e.complexity.Mutation.ConfirmPayment == nil {
			break
		}

		args, err := ec.field_Mutation_ConfirmPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmPayment(childComplexity, args["PayID"].(string), args["Email"].(string)), true

	case "Mutation.DelAnnounceUserConn":
		if e.complexity.Mutation.DelAnnounceUserConn == nil {
			break
		}

		args, err := ec.field_Mutation_DelAnnounceUserConn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelAnnounceUserConn(childComplexity, args["connID"].(string)), true

	case "Mutation.DelAnnouncement":
		if e.complexity.Mutation.DelAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_DelAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelAnnouncement(childComplexity, args["announcementID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelAttendance":
		if e.complexity.Mutation.DelAttendance == nil {
			break
		}

		args, err := ec.field_Mutation_DelAttendance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelAttendance(childComplexity, args["attendanceID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelBook":
		if e.complexity.Mutation.DelBook == nil {
			break
		}

		args, err := ec.field_Mutation_DelBook_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelBook(childComplexity, args["bookID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelCico":
		if e.complexity.Mutation.DelCico == nil {
			break
		}

		args, err := ec.field_Mutation_DelCico_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelCico(childComplexity, args["cicoID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelDepartment":
		if e.complexity.Mutation.DelDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_DelDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelDepartment(childComplexity, args["deptID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelDiary":
		if e.complexity.Mutation.DelDiary == nil {
			break
		}

		args, err := ec.field_Mutation_DelDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelDiary(childComplexity, args["diaryID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelDispensedProduct":
		if e.complexity.Mutation.DelDispensedProduct == nil {
			break
		}

		args, err := ec.field_Mutation_DelDispensedProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelDispensedProduct(childComplexity, args["disProductID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelEssene":
		if e.complexity.Mutation.DelEssene == nil {
			break
		}

		args, err := ec.field_Mutation_DelEssene_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelEssene(childComplexity, args["esseneID"].(string)), true

	case "Mutation.DelExam":
		if e.complexity.Mutation.DelExam == nil {
			break
		}

		args, err := ec.field_Mutation_DelExam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelExam(childComplexity, args["examID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelFee":
		if e.complexity.Mutation.DelFee == nil {
			break
		}

		args, err := ec.field_Mutation_DelFee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelFee(childComplexity, args["feeID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelGrade":
		if e.complexity.Mutation.DelGrade == nil {
			break
		}

		args, err := ec.field_Mutation_DelGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelGrade(childComplexity, args["gradeID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelLend":
		if e.complexity.Mutation.DelLend == nil {
			break
		}

		args, err := ec.field_Mutation_DelLend_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelLend(childComplexity, args["lendID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelLesson":
		if e.complexity.Mutation.DelLesson == nil {
			break
		}

		args, err := ec.field_Mutation_DelLesson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelLesson(childComplexity, args["lssnID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelMessage":
		if e.complexity.Mutation.DelMessage == nil {
			break
		}

		args, err := ec.field_Mutation_DelMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelMessage(childComplexity, args["msgID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelParentingCulture":
		if e.complexity.Mutation.DelParentingCulture == nil {
			break
		}

		args, err := ec.field_Mutation_DelParentingCulture_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelParentingCulture(childComplexity, args["ParentingCultureID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelPayment":
		if e.complexity.Mutation.DelPayment == nil {
			break
		}

		args, err := ec.field_Mutation_DelPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelPayment(childComplexity, args["payID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelProduct":
		if e.complexity.Mutation.DelProduct == nil {
			break
		}

		args, err := ec.field_Mutation_DelProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelProduct(childComplexity, args["prodID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelSchool":
		if e.complexity.Mutation.DelSchool == nil {
			break
		}

		args, err := ec.field_Mutation_DelSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelSchool(childComplexity, args["schoolID"].(string)), true

	case "Mutation.DelScore":
		if e.complexity.Mutation.DelScore == nil {
			break
		}

		args, err := ec.field_Mutation_DelScore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelScore(childComplexity, args["scoreID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelSiso":
		if e.complexity.Mutation.DelSiso == nil {
			break
		}

		args, err := ec.field_Mutation_DelSiso_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelSiso(childComplexity, args["sisoID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelStudent":
		if e.complexity.Mutation.DelStudent == nil {
			break
		}

		args, err := ec.field_Mutation_DelStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelStudent(childComplexity, args["nemisID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelSubject":
		if e.complexity.Mutation.DelSubject == nil {
			break
		}

		args, err := ec.field_Mutation_DelSubject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelSubject(childComplexity, args["subjectID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelThread":
		if e.complexity.Mutation.DelThread == nil {
			break
		}

		args, err := ec.field_Mutation_DelThread_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelThread(childComplexity, args["threadID"].(string)), true

	case "Mutation.DelTimeTable":
		if e.complexity.Mutation.DelTimeTable == nil {
			break
		}

		args, err := ec.field_Mutation_DelTimeTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelTimeTable(childComplexity, args["ttableID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelUser":
		if e.complexity.Mutation.DelUser == nil {
			break
		}

		args, err := ec.field_Mutation_DelUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelUser(childComplexity, args["userEmail"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DelUserDiaryConn":
		if e.complexity.Mutation.DelUserDiaryConn == nil {
			break
		}

		args, err := ec.field_Mutation_DelUserDiaryConn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelUserDiaryConn(childComplexity, args["connID"].(string)), true

	case "Mutation.DelVisitor":
		if e.complexity.Mutation.DelVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_DelVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelVisitor(childComplexity, args["visitorID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string)), true

	case "Mutation.DispenseProduct":
		if e.complexity.Mutation.DispenseProduct == nil {
			break
		}

		args, err := ec.field_Mutation_DispenseProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DispenseProduct(childComplexity, args["Name"].(string), args["Category"].(string), args["Quantity"].(float64), args["DispenseTo"].(string), args["DispensedBy"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.editAnnouncement":
		if e.complexity.Mutation.EditAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_editAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditAnnouncement(childComplexity, args["announcementID"].(string), args["topic"].(*string), args["announcerEmail"].(*string), args["message"].(*string)), true

	case "Mutation.editBook":
		if e.complexity.Mutation.EditBook == nil {
			break
		}

		args, err := ec.field_Mutation_editBook_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditBook(childComplexity, args["bookID"].(string), args["name"].(*string), args["isbn"].(*string), args["authors"].(*string), args["revision"].(*string)), true

	case "Mutation.editCulture":
		if e.complexity.Mutation.EditCulture == nil {
			break
		}

		args, err := ec.field_Mutation_editCulture_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditCulture(childComplexity, args["ParentingCultureID"].(string), args["storyTitle"].(*string), args["instructions"].(*string), args["story"].(*string), args["quiz"].(*string), args["lessonsLearnt"].(*string), args["cultureTaught"].(*string), args["gradeToReceive"].(*model.GradeEnum)), true

	case "Mutation.editDepartment":
		if e.complexity.Mutation.EditDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_editDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditDepartment(childComplexity, args["deptID"].(string), args["name"].(*model.DeptEnum), args["hodEmail"].(*string)), true

	case "Mutation.editDiary":
		if e.complexity.Mutation.EditDiary == nil {
			break
		}

		args, err := ec.field_Mutation_editDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditDiary(childComplexity, args["diaryID"].(string), args["remarks"].(*string), args["studentNemis"].(*string), args["request"].(*string), args["tutorEmail"].(*string)), true

	case "Mutation.editDispensedProduct":
		if e.complexity.Mutation.EditDispensedProduct == nil {
			break
		}

		args, err := ec.field_Mutation_editDispensedProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditDispensedProduct(childComplexity, args["disProductID"].(string), args["productName"].(*string), args["quantity"].(*float64), args["category"].(*model.ProductCategoryEnum), args["dispensedTo"].(*string), args["dispensedBy"].(*string)), true

	case "Mutation.editExam":
		if e.complexity.Mutation.EditExam == nil {
			break
		}

		args, err := ec.field_Mutation_editExam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditExam(childComplexity, args["examID"].(string), args["name"].(*string), args["date"].(*time.Time), args["gradeName"].(*model.GradeEnum)), true

	case "Mutation.editFee":
		if e.complexity.Mutation.EditFee == nil {
			break
		}

		args, err := ec.field_Mutation_editFee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditFee(childComplexity, args["feeID"].(string), args["grade"].(*model.GradeEnum), args["year"].(*string), args["amount"].(*float64), args["semester"].(*model.SenesterEnum)), true

	case "Mutation.editGrade":
		if e.complexity.Mutation.EditGrade == nil {
			break
		}

		args, err := ec.field_Mutation_editGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditGrade(childComplexity, args["gradeID"].(string), args["name"].(*model.GradeEnum), args["stream"].(*string), args["classTeacher"].(*string), args["gradeMotto"].(*string)), true

	case "Mutation.editLesson":
		if e.complexity.Mutation.EditLesson == nil {
			break
		}

		args, err := ec.field_Mutation_editLesson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditLesson(childComplexity, args["lssnID"].(string), args["name"].(*string), args["date"].(*time.Time), args["timedate"].(*model.PeriodEnum), args["grade"].(*model.GradeEnum), args["subject"].(*model.SubjectEnum), args["start"].(*time.Time), args["stop"].(*time.Time), args["duration"].(*float64), args["done"].(*bool), args["remarks"].(*string), args["tutorEmail"].(*string)), true

	case "Mutation.editMessage":
		if e.complexity.Mutation.EditMessage == nil {
			break
		}

		args, err := ec.field_Mutation_editMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditMessage(childComplexity, args["msgID"].(string), args["topic"].(*string), args["text"].(*string), args["userEmail"].(*string), args["threadID"].(*string)), true

	case "Mutation.editNewsletter":
		if e.complexity.Mutation.EditNewsletter == nil {
			break
		}

		args, err := ec.field_Mutation_editNewsletter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditNewsletter(childComplexity, args["newsletterID"].(string), args["mainTopic"].(*string), args["topicOne"].(*string), args["textOne"].(*string), args["topicTwo"].(*string), args["textTwo"].(*string), args["topicThree"].(*string), args["textThree"].(*string), args["topicFour"].(*string), args["textFour"].(*string), args["topicFive"].(*string), args["textFive"].(*string), args["rubberStampURL"].(*string)), true

	case "Mutation.editPayment":
		if e.complexity.Mutation.EditPayment == nil {
			break
		}

		args, err := ec.field_Mutation_editPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditPayment(childComplexity, args["payID"].(string), args["paymentType"].(*model.PaymentTypeEnum), args["payingFor"].(*model.PaymentForEnum), args["receiverEmailNemisid"].(*string), args["amount"].(*float64), args["date"].(*time.Time), args["account"].(*model.AccEnum), args["payeeEmail"].(*string)), true

	case "Mutation.editProduct":
		if e.complexity.Mutation.EditProduct == nil {
			break
		}

		args, err := ec.field_Mutation_editProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditProduct(childComplexity, args["prodID"].(string), args["name"].(*string), args["cost"].(*float64), args["quantity"].(*float64), args["supplier"].(*string), args["category"].(*model.ProductCategoryEnum), args["receivedOn"].(*string), args["receivedBy"].(*string), args["minimumQty"].(*float64)), true

	case "Mutation.editSchool":
		if e.complexity.Mutation.EditSchool == nil {
			break
		}

		args, err := ec.field_Mutation_editSchool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditSchool(childComplexity, args["schoolID"].(string), args["name"].(*string), args["motto"].(*string), args["phone"].(*string), args["email"].(*string), args["website"].(*string), args["poBox"].(*string), args["poCode"].(*string), args["district"].(*string), args["county"].(*string), args["country"].(*string)), true

	case "Mutation.editScore":
		if e.complexity.Mutation.EditScore == nil {
			break
		}

		args, err := ec.field_Mutation_editScore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditScore(childComplexity, args["scoreID"].(string), args["score"].(*float64), args["studentNemisID"].(*string), args["subject"].(*model.SubjectEnum), args["examID"].(*string)), true

	case "Mutation.editStudent":
		if e.complexity.Mutation.EditStudent == nil {
			break
		}

		args, err := ec.field_Mutation_editStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditStudent(childComplexity, args["stdID"].(string), args["name"].(*string), args["nemisNo"].(*string), args["nhif"].(*string), args["bCertNo"].(*string), args["nickName"].(*string), args["dateOfBirth"].(*time.Time), args["hoby1"].(*string), args["hoby2"].(*string), args["hoby3"].(*string), args["roleModel1"].(*string), args["roleModel2"].(*string), args["roleModel3"].(*string), args["career1"].(*string), args["career2"].(*string), args["career3"].(*string), args["personalMotto"].(*string), args["bloodGroup"].(*string), args["bestFriend"].(*string), args["language1"].(*string), args["language2"].(*string), args["language3"].(*string), args["quickAnswer1"].(*string), args["quickAnswer2"].(*string), args["quickAnswer3"].(*string), args["favGame"].(*string), args["favSubject"].(*string), args["favBook"].(*string), args["favQuote"].(*string), args["favAnimal"].(*string), args["favAnimation"].(*string), args["favDevice"].(*string)), true

	case "Mutation.editSubject":
		if e.complexity.Mutation.EditSubject == nil {
			break
		}

		args, err := ec.field_Mutation_editSubject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditSubject(childComplexity, args["subjectID"].(string), args["name"].(*model.SubjectEnum), args["departmentName"].(*model.DeptEnum), args["weeklyLessons"].(*float64), args["lessonDuration"].(*float64)), true

	case "Mutation.editTimeTable":
		if e.complexity.Mutation.EditTimeTable == nil {
			break
		}

		args, err := ec.field_Mutation_editTimeTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditTimeTable(childComplexity, args["ttableID"].(string), args["day"].(*string), args["done"].(*bool), args["lesson1ID"].(*string), args["lesson2ID"].(*string), args["lesson3ID"].(*string), args["lesson4ID"].(*string), args["lesson5ID"].(*string), args["lesson6ID"].(*string), args["lesson7ID"].(*string), args["lesson8ID"].(*string), args["grade"].(*model.GradeEnum)), true

	case "Mutation.editUser":
		if e.complexity.Mutation.EditUser == nil {
			break
		}

		args, err := ec.field_Mutation_editUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditUser(childComplexity, args["userID"].(string), args["salute"].(*model.SaluteEnum), args["name"].(*string), args["iDNo"].(*string), args["nhifNo"].(*string), args["cell"].(*string), args["email"].(*string), args["password"].(*string), args["poBox"].(*string), args["poCode"].(*string), args["district"].(*string), args["county"].(*string), args["nationality"].(*string), args["roles"].(*model.RolesEnum)), true

	case "Mutation.editVisitor":
		if e.complexity.Mutation.EditVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_editVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditVisitor(childComplexity, args["visitorID"].(string), args["salute"].(*model.SaluteEnum), args["name"].(*string), args["iDNO"].(*string), args["cell"].(*string), args["email"].(*string), args["visitingOffice"].(*string), args["purpose"].(*string), args["vehicle"].(*string), args["belongings"].(*string), args["timeIn"].(*time.Time), args["timeOut"].(*time.Time), args["thumbScan"].(*string), args["visitingFreq"].(*float64), args["authBy"].(*string)), true

	case "Mutation.LendOut":
		if e.complexity.Mutation.LendOut == nil {
			break
		}

		args, err := ec.field_Mutation_LendOut_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LendOut(childComplexity, args["bookIsbn"].(string), args["received_on"].(string), args["due_on"].(string), args["student"].(string), args["librarian"].(string), args["school"].(string)), true

	case "Mutation.NewCulture":
		if e.complexity.Mutation.NewCulture == nil {
			break
		}

		args, err := ec.field_Mutation_NewCulture_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewCulture(childComplexity, args["Title"].(string), args["Instructions"].(string), args["Story"].(string), args["Quiz"].(string), args["Lessons"].(string), args["Culture"].(string), args["Grade"].(model.GradeEnum), args["SchoolEmail"].(string)), true

	case "Mutation.NewDiary":
		if e.complexity.Mutation.NewDiary == nil {
			break
		}

		args, err := ec.field_Mutation_NewDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewDiary(childComplexity, args["TutorRemarks"].(string), args["Student"].(string), args["SchoolRequest"].(string), args["TutorMail"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.NewEssene":
		if e.complexity.Mutation.NewEssene == nil {
			break
		}

		args, err := ec.field_Mutation_NewEssene_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewEssene(childComplexity, args["UserMail"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.NewPayment":
		if e.complexity.Mutation.NewPayment == nil {
			break
		}

		args, err := ec.field_Mutation_NewPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewPayment(childComplexity, args["paytype"].(model.PaymentTypeEnum), args["payFor"].(model.PaymentForEnum), args["receiver"].(string), args["amount"].(float64), args["date"].(string), args["account"].(model.AccEnum), args["payeemail"].(string), args["school"].(string)), true

	case "Mutation.newVisitor":
		if e.complexity.Mutation.NewVisitor == nil {
			break
		}

		args, err := ec.field_Mutation_newVisitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewVisitor(childComplexity, args["Salute"].(string), args["Name"].(string), args["IDno"].(string), args["Cell"].(string), args["Email"].(string), args["Visiting"].(string), args["Purpose"].(string), args["Vehicle"].(string), args["Belongings"].(string), args["VisitingFreq"].(float64), args["AuthorizedBy"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.PromoteStudent":
		if e.complexity.Mutation.PromoteStudent == nil {
			break
		}

		args, err := ec.field_Mutation_PromoteStudent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PromoteStudent(childComplexity, args["Grade"].(model.GradeEnum), args["StudentNemisID"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.ReadAnnouncement":
		if e.complexity.Mutation.ReadAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_ReadAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReadAnnouncement(childComplexity, args["AnnounceID"].(string), args["User"].(string), args["Read"].(bool), args["SchoolEmail"].(string)), true

	case "Mutation.ReceiveBook":
		if e.complexity.Mutation.ReceiveBook == nil {
			break
		}

		args, err := ec.field_Mutation_ReceiveBook_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReceiveBook(childComplexity, args["lendId"].(string), args["condition"].(model.ConditionEnum)), true

	case "Mutation.RestoreRoles":
		if e.complexity.Mutation.RestoreRoles == nil {
			break
		}

		args, err := ec.field_Mutation_RestoreRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreRoles(childComplexity, args["userEmail"].(string)), true

	case "Mutation.SendAnnouncement":
		if e.complexity.Mutation.SendAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_SendAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendAnnouncement(childComplexity, args["Topic"].(string), args["By"].(string), args["Message"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.SendMessage":
		if e.complexity.Mutation.SendMessage == nil {
			break
		}

		args, err := ec.field_Mutation_SendMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendMessage(childComplexity, args["Topic"].(string), args["Text"].(string), args["User"].(string), args["Thread"].(string), args["School"].(string)), true

	case "Mutation.staffCheckin":
		if e.complexity.Mutation.StaffCheckin == nil {
			break
		}

		args, err := ec.field_Mutation_staffCheckin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffCheckin(childComplexity, args["workerEmail"].(string), args["authorizedBy"].(string), args["schoolEmail"].(string)), true

	case "Mutation.staffCheckout":
		if e.complexity.Mutation.StaffCheckout == nil {
			break
		}

		args, err := ec.field_Mutation_staffCheckout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffCheckout(childComplexity, args["cicoID"].(string)), true

	case "Mutation.studentCheckin":
		if e.complexity.Mutation.StudentCheckin == nil {
			break
		}

		args, err := ec.field_Mutation_studentCheckin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentCheckin(childComplexity, args["nemisID"].(string), args["schoolEmail"].(string)), true

	case "Mutation.studentCheckout":
		if e.complexity.Mutation.StudentCheckout == nil {
			break
		}

		args, err := ec.field_Mutation_studentCheckout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentCheckout(childComplexity, args["sisoID"].(string)), true

	case "Mutation.ViewDiary":
		if e.complexity.Mutation.ViewDiary == nil {
			break
		}

		args, err := ec.field_Mutation_ViewDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ViewDiary(childComplexity, args["GuardianEmail"].(string), args["DiaryID"].(string), args["SchoolEmail"].(string)), true

	case "Mutation.VisitorCheckout":
		if e.complexity.Mutation.VisitorCheckout == nil {
			break
		}

		args, err := ec.field_Mutation_VisitorCheckout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VisitorCheckout(childComplexity, args["visitorID"].(string)), true

	case "Newsletter.createdAt":
		if e.complexity.Newsletter.CreatedAt == nil {
			break
		}

		return e.complexity.Newsletter.CreatedAt(childComplexity), true

	case "Newsletter.id":
		if e.complexity.Newsletter.ID == nil {
			break
		}

		return e.complexity.Newsletter.ID(childComplexity), true

	case "Newsletter.mainTopic":
		if e.complexity.Newsletter.MainTopic == nil {
			break
		}

		return e.complexity.Newsletter.MainTopic(childComplexity), true

	case "Newsletter.rubberStamp":
		if e.complexity.Newsletter.RubberStamp == nil {
			break
		}

		return e.complexity.Newsletter.RubberStamp(childComplexity), true

	case "Newsletter.school":
		if e.complexity.Newsletter.School == nil {
			break
		}

		return e.complexity.Newsletter.School(childComplexity), true

	case "Newsletter.staticFiles":
		if e.complexity.Newsletter.StaticFiles == nil {
			break
		}

		return e.complexity.Newsletter.StaticFiles(childComplexity), true

	case "Newsletter.textFive":
		if e.complexity.Newsletter.TextFive == nil {
			break
		}

		return e.complexity.Newsletter.TextFive(childComplexity), true

	case "Newsletter.textFour":
		if e.complexity.Newsletter.TextFour == nil {
			break
		}

		return e.complexity.Newsletter.TextFour(childComplexity), true

	case "Newsletter.textOne":
		if e.complexity.Newsletter.TextOne == nil {
			break
		}

		return e.complexity.Newsletter.TextOne(childComplexity), true

	case "Newsletter.textThree":
		if e.complexity.Newsletter.TextThree == nil {
			break
		}

		return e.complexity.Newsletter.TextThree(childComplexity), true

	case "Newsletter.textTwo":
		if e.complexity.Newsletter.TextTwo == nil {
			break
		}

		return e.complexity.Newsletter.TextTwo(childComplexity), true

	case "Newsletter.topicFive":
		if e.complexity.Newsletter.TopicFive == nil {
			break
		}

		return e.complexity.Newsletter.TopicFive(childComplexity), true

	case "Newsletter.topicFour":
		if e.complexity.Newsletter.TopicFour == nil {
			break
		}

		return e.complexity.Newsletter.TopicFour(childComplexity), true

	case "Newsletter.topicOne":
		if e.complexity.Newsletter.TopicOne == nil {
			break
		}

		return e.complexity.Newsletter.TopicOne(childComplexity), true

	case "Newsletter.topicThree":
		if e.complexity.Newsletter.TopicThree == nil {
			break
		}

		return e.complexity.Newsletter.TopicThree(childComplexity), true

	case "Newsletter.topicTwo":
		if e.complexity.Newsletter.TopicTwo == nil {
			break
		}

		return e.complexity.Newsletter.TopicTwo(childComplexity), true

	case "NewsletterConnection.edges":
		if e.complexity.NewsletterConnection.Edges == nil {
			break
		}

		return e.complexity.NewsletterConnection.Edges(childComplexity), true

	case "NewsletterConnection.pageInfo":
		if e.complexity.NewsletterConnection.PageInfo == nil {
			break
		}

		return e.complexity.NewsletterConnection.PageInfo(childComplexity), true

	case "NewsletterConnection.totalCount":
		if e.complexity.NewsletterConnection.TotalCount == nil {
			break
		}

		return e.complexity.NewsletterConnection.TotalCount(childComplexity), true

	case "NewslettersEdge.cursor":
		if e.complexity.NewslettersEdge.Cursor == nil {
			break
		}

		return e.complexity.NewslettersEdge.Cursor(childComplexity), true

	case "NewslettersEdge.node":
		if e.complexity.NewslettersEdge.Node == nil {
			break
		}

		return e.complexity.NewslettersEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Pass.active":
		if e.complexity.Pass.Active == nil {
			break
		}

		return e.complexity.Pass.Active(childComplexity), true

	case "Pass.pass":
		if e.complexity.Pass.Pass == nil {
			break
		}

		return e.complexity.Pass.Pass(childComplexity), true

	case "Pass.school":
		if e.complexity.Pass.School == nil {
			break
		}

		return e.complexity.Pass.School(childComplexity), true

	case "Pass.worker":
		if e.complexity.Pass.Worker == nil {
			break
		}

		return e.complexity.Pass.Worker(childComplexity), true

	case "PassesConnection.edges":
		if e.complexity.PassesConnection.Edges == nil {
			break
		}

		return e.complexity.PassesConnection.Edges(childComplexity), true

	case "PassesConnection.pageInfo":
		if e.complexity.PassesConnection.PageInfo == nil {
			break
		}

		return e.complexity.PassesConnection.PageInfo(childComplexity), true

	case "PassesConnection.totalCount":
		if e.complexity.PassesConnection.TotalCount == nil {
			break
		}

		return e.complexity.PassesConnection.TotalCount(childComplexity), true

	case "PassesEdge.cursor":
		if e.complexity.PassesEdge.Cursor == nil {
			break
		}

		return e.complexity.PassesEdge.Cursor(childComplexity), true

	case "PassesEdge.node":
		if e.complexity.PassesEdge.Node == nil {
			break
		}

		return e.complexity.PassesEdge.Node(childComplexity), true

	case "Payment.account":
		if e.complexity.Payment.Account == nil {
			break
		}

		return e.complexity.Payment.Account(childComplexity), true

	case "Payment.amount":
		if e.complexity.Payment.Amount == nil {
			break
		}

		return e.complexity.Payment.Amount(childComplexity), true

	case "Payment.createdAt":
		if e.complexity.Payment.CreatedAt == nil {
			break
		}

		return e.complexity.Payment.CreatedAt(childComplexity), true

	case "Payment.date":
		if e.complexity.Payment.Date == nil {
			break
		}

		return e.complexity.Payment.Date(childComplexity), true

	case "Payment.id":
		if e.complexity.Payment.ID == nil {
			break
		}

		return e.complexity.Payment.ID(childComplexity), true

	case "Payment.payee":
		if e.complexity.Payment.Payee == nil {
			break
		}

		return e.complexity.Payment.Payee(childComplexity), true

	case "Payment.payingfor":
		if e.complexity.Payment.Payingfor == nil {
			break
		}

		return e.complexity.Payment.Payingfor(childComplexity), true

	case "Payment.paymentype":
		if e.complexity.Payment.Paymentype == nil {
			break
		}

		return e.complexity.Payment.Paymentype(childComplexity), true

	case "Payment.receiverstudent":
		if e.complexity.Payment.Receiverstudent == nil {
			break
		}

		return e.complexity.Payment.Receiverstudent(childComplexity), true

	case "Payment.receiveruser":
		if e.complexity.Payment.Receiveruser == nil {
			break
		}

		return e.complexity.Payment.Receiveruser(childComplexity), true

	case "Payment.school":
		if e.complexity.Payment.School == nil {
			break
		}

		return e.complexity.Payment.School(childComplexity), true

	case "Payment.status":
		if e.complexity.Payment.Status == nil {
			break
		}

		return e.complexity.Payment.Status(childComplexity), true

	case "PaymentsConnection.edges":
		if e.complexity.PaymentsConnection.Edges == nil {
			break
		}

		return e.complexity.PaymentsConnection.Edges(childComplexity), true

	case "PaymentsConnection.pageInfo":
		if e.complexity.PaymentsConnection.PageInfo == nil {
			break
		}

		return e.complexity.PaymentsConnection.PageInfo(childComplexity), true

	case "PaymentsConnection.totalCount":
		if e.complexity.PaymentsConnection.TotalCount == nil {
			break
		}

		return e.complexity.PaymentsConnection.TotalCount(childComplexity), true

	case "PaymentsEdge.cursor":
		if e.complexity.PaymentsEdge.Cursor == nil {
			break
		}

		return e.complexity.PaymentsEdge.Cursor(childComplexity), true

	case "PaymentsEdge.node":
		if e.complexity.PaymentsEdge.Node == nil {
			break
		}

		return e.complexity.PaymentsEdge.Node(childComplexity), true

	case "Product.allowedMinimum":
		if e.complexity.Product.AllowedMinimum == nil {
			break
		}

		return e.complexity.Product.AllowedMinimum(childComplexity), true

	case "Product.category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.cost":
		if e.complexity.Product.Cost == nil {
			break
		}

		return e.complexity.Product.Cost(childComplexity), true

	case "Product.createdAt":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.dispensed":
		if e.complexity.Product.Dispensed == nil {
			break
		}

		return e.complexity.Product.Dispensed(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.quantity":
		if e.complexity.Product.Quantity == nil {
			break
		}

		return e.complexity.Product.Quantity(childComplexity), true

	case "Product.receivedBy":
		if e.complexity.Product.ReceivedBy == nil {
			break
		}

		return e.complexity.Product.ReceivedBy(childComplexity), true

	case "Product.receivedOn":
		if e.complexity.Product.ReceivedOn == nil {
			break
		}

		return e.complexity.Product.ReceivedOn(childComplexity), true

	case "Product.school":
		if e.complexity.Product.School == nil {
			break
		}

		return e.complexity.Product.School(childComplexity), true

	case "Product.supplier":
		if e.complexity.Product.Supplier == nil {
			break
		}

		return e.complexity.Product.Supplier(childComplexity), true

	case "ProductsConnection.edges":
		if e.complexity.ProductsConnection.Edges == nil {
			break
		}

		return e.complexity.ProductsConnection.Edges(childComplexity), true

	case "ProductsConnection.pageInfo":
		if e.complexity.ProductsConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductsConnection.PageInfo(childComplexity), true

	case "ProductsConnection.totalCount":
		if e.complexity.ProductsConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductsConnection.TotalCount(childComplexity), true

	case "ProductsEdge.cursor":
		if e.complexity.ProductsEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductsEdge.Cursor(childComplexity), true

	case "ProductsEdge.node":
		if e.complexity.ProductsEdge.Node == nil {
			break
		}

		return e.complexity.ProductsEdge.Node(childComplexity), true

	case "Query.getQR":
		if e.complexity.Query.GetQr == nil {
			break
		}

		args, err := ec.field_Query_getQR_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetQr(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Query.school":
		if e.complexity.Query.School == nil {
			break
		}

		args, err := ec.field_Query_school_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.School(childComplexity, args["email"].(string)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["text"].(string)), true

	case "Query.startTimeKeeper":
		if e.complexity.Query.StartTimeKeeper == nil {
			break
		}

		args, err := ec.field_Query_startTimeKeeper_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StartTimeKeeper(childComplexity, args["school"].(string), args["clearPasses"].(bool)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["email"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["first"].(*int), args["after"].(*string)), true

	case "School.accountants":
		if e.complexity.School.Accountants == nil {
			break
		}

		return e.complexity.School.Accountants(childComplexity), true

	case "School.addrCountry":
		if e.complexity.School.AddrCountry == nil {
			break
		}

		return e.complexity.School.AddrCountry(childComplexity), true

	case "School.addrCounty":
		if e.complexity.School.AddrCounty == nil {
			break
		}

		return e.complexity.School.AddrCounty(childComplexity), true

	case "School.addrPoBox":
		if e.complexity.School.AddrPoBox == nil {
			break
		}

		return e.complexity.School.AddrPoBox(childComplexity), true

	case "School.addrPostalCode":
		if e.complexity.School.AddrPostalCode == nil {
			break
		}

		return e.complexity.School.AddrPostalCode(childComplexity), true

	case "School.addrTown":
		if e.complexity.School.AddrTown == nil {
			break
		}

		return e.complexity.School.AddrTown(childComplexity), true

	case "School.administrators":
		if e.complexity.School.Administrators == nil {
			break
		}

		return e.complexity.School.Administrators(childComplexity), true

	case "School.announcements":
		if e.complexity.School.Announcements == nil {
			break
		}

		return e.complexity.School.Announcements(childComplexity), true

	case "School.archives":
		if e.complexity.School.Archives == nil {
			break
		}

		args, err := ec.field_School_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.School.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "School.assets":
		if e.complexity.School.Assets == nil {
			break
		}

		return e.complexity.School.Assets(childComplexity), true

	case "School.books":
		if e.complexity.School.Books == nil {
			break
		}

		return e.complexity.School.Books(childComplexity), true

	case "School.createdAt":
		if e.complexity.School.CreatedAt == nil {
			break
		}

		return e.complexity.School.CreatedAt(childComplexity), true

	case "School.cultures":
		if e.complexity.School.Cultures == nil {
			break
		}

		return e.complexity.School.Cultures(childComplexity), true

	case "School.departments":
		if e.complexity.School.Departments == nil {
			break
		}

		return e.complexity.School.Departments(childComplexity), true

	case "School.email":
		if e.complexity.School.Email == nil {
			break
		}

		return e.complexity.School.Email(childComplexity), true

	case "School.essenes":
		if e.complexity.School.Essenes == nil {
			break
		}

		return e.complexity.School.Essenes(childComplexity), true

	case "School.examinations":
		if e.complexity.School.Examinations == nil {
			break
		}

		return e.complexity.School.Examinations(childComplexity), true

	case "School.fees":
		if e.complexity.School.Fees == nil {
			break
		}

		return e.complexity.School.Fees(childComplexity), true

	case "School.grades":
		if e.complexity.School.Grades == nil {
			break
		}

		return e.complexity.School.Grades(childComplexity), true

	case "School.guardians":
		if e.complexity.School.Guardians == nil {
			break
		}

		return e.complexity.School.Guardians(childComplexity), true

	case "School.id":
		if e.complexity.School.ID == nil {
			break
		}

		return e.complexity.School.ID(childComplexity), true

	case "School.lessons":
		if e.complexity.School.Lessons == nil {
			break
		}

		return e.complexity.School.Lessons(childComplexity), true

	case "School.librarians":
		if e.complexity.School.Librarians == nil {
			break
		}

		return e.complexity.School.Librarians(childComplexity), true

	case "School.managers":
		if e.complexity.School.Managers == nil {
			break
		}

		return e.complexity.School.Managers(childComplexity), true

	case "School.motto":
		if e.complexity.School.Motto == nil {
			break
		}

		return e.complexity.School.Motto(childComplexity), true

	case "School.name":
		if e.complexity.School.Name == nil {
			break
		}

		return e.complexity.School.Name(childComplexity), true

	case "School.newsletters":
		if e.complexity.School.Newsletters == nil {
			break
		}

		return e.complexity.School.Newsletters(childComplexity), true

	case "School.passes":
		if e.complexity.School.Passes == nil {
			break
		}

		return e.complexity.School.Passes(childComplexity), true

	case "School.payments":
		if e.complexity.School.Payments == nil {
			break
		}

		return e.complexity.School.Payments(childComplexity), true

	case "School.phone":
		if e.complexity.School.Phone == nil {
			break
		}

		return e.complexity.School.Phone(childComplexity), true

	case "School.staff":
		if e.complexity.School.Staff == nil {
			break
		}

		return e.complexity.School.Staff(childComplexity), true

	case "School.store":
		if e.complexity.School.Store == nil {
			break
		}

		return e.complexity.School.Store(childComplexity), true

	case "School.storekeepers":
		if e.complexity.School.Storekeepers == nil {
			break
		}

		return e.complexity.School.Storekeepers(childComplexity), true

	case "School.studentDiaries":
		if e.complexity.School.StudentDiaries == nil {
			break
		}

		return e.complexity.School.StudentDiaries(childComplexity), true

	case "School.students":
		if e.complexity.School.Students == nil {
			break
		}

		return e.complexity.School.Students(childComplexity), true

	case "School.studentsInSchool":
		if e.complexity.School.StudentsInSchool == nil {
			break
		}

		return e.complexity.School.StudentsInSchool(childComplexity), true

	case "School.suggestionBox":
		if e.complexity.School.SuggestionBox == nil {
			break
		}

		return e.complexity.School.SuggestionBox(childComplexity), true

	case "School.suppliers":
		if e.complexity.School.Suppliers == nil {
			break
		}

		return e.complexity.School.Suppliers(childComplexity), true

	case "School.timetables":
		if e.complexity.School.Timetables == nil {
			break
		}

		return e.complexity.School.Timetables(childComplexity), true

	case "School.tutors":
		if e.complexity.School.Tutors == nil {
			break
		}

		return e.complexity.School.Tutors(childComplexity), true

	case "School.visitors":
		if e.complexity.School.Visitors == nil {
			break
		}

		return e.complexity.School.Visitors(childComplexity), true

	case "School.website":
		if e.complexity.School.Website == nil {
			break
		}

		return e.complexity.School.Website(childComplexity), true

	case "School.workersInSchool":
		if e.complexity.School.WorkersInSchool == nil {
			break
		}

		return e.complexity.School.WorkersInSchool(childComplexity), true

	case "SchoolConnection.edges":
		if e.complexity.SchoolConnection.Edges == nil {
			break
		}

		return e.complexity.SchoolConnection.Edges(childComplexity), true

	case "SchoolConnection.pageInfo":
		if e.complexity.SchoolConnection.PageInfo == nil {
			break
		}

		return e.complexity.SchoolConnection.PageInfo(childComplexity), true

	case "SchoolConnection.totalCount":
		if e.complexity.SchoolConnection.TotalCount == nil {
			break
		}

		return e.complexity.SchoolConnection.TotalCount(childComplexity), true

	case "SchoolEdge.cursor":
		if e.complexity.SchoolEdge.Cursor == nil {
			break
		}

		return e.complexity.SchoolEdge.Cursor(childComplexity), true

	case "SchoolEdge.node":
		if e.complexity.SchoolEdge.Node == nil {
			break
		}

		return e.complexity.SchoolEdge.Node(childComplexity), true

	case "Score.createdAt":
		if e.complexity.Score.CreatedAt == nil {
			break
		}

		return e.complexity.Score.CreatedAt(childComplexity), true

	case "Score.exam":
		if e.complexity.Score.Exam == nil {
			break
		}

		return e.complexity.Score.Exam(childComplexity), true

	case "Score.id":
		if e.complexity.Score.ID == nil {
			break
		}

		return e.complexity.Score.ID(childComplexity), true

	case "Score.score":
		if e.complexity.Score.Score == nil {
			break
		}

		return e.complexity.Score.Score(childComplexity), true

	case "Score.student":
		if e.complexity.Score.Student == nil {
			break
		}

		return e.complexity.Score.Student(childComplexity), true

	case "Score.subject":
		if e.complexity.Score.Subject == nil {
			break
		}

		return e.complexity.Score.Subject(childComplexity), true

	case "ScoresConnection.edges":
		if e.complexity.ScoresConnection.Edges == nil {
			break
		}

		return e.complexity.ScoresConnection.Edges(childComplexity), true

	case "ScoresConnection.pageInfo":
		if e.complexity.ScoresConnection.PageInfo == nil {
			break
		}

		return e.complexity.ScoresConnection.PageInfo(childComplexity), true

	case "ScoresConnection.totalCount":
		if e.complexity.ScoresConnection.TotalCount == nil {
			break
		}

		return e.complexity.ScoresConnection.TotalCount(childComplexity), true

	case "ScoresEdge.cursor":
		if e.complexity.ScoresEdge.Cursor == nil {
			break
		}

		return e.complexity.ScoresEdge.Cursor(childComplexity), true

	case "ScoresEdge.node":
		if e.complexity.ScoresEdge.Node == nil {
			break
		}

		return e.complexity.ScoresEdge.Node(childComplexity), true

	case "Staff.addrCounty":
		if e.complexity.Staff.AddrCounty == nil {
			break
		}

		return e.complexity.Staff.AddrCounty(childComplexity), true

	case "Staff.addrDistrict":
		if e.complexity.Staff.AddrDistrict == nil {
			break
		}

		return e.complexity.Staff.AddrDistrict(childComplexity), true

	case "Staff.addrNationality":
		if e.complexity.Staff.AddrNationality == nil {
			break
		}

		return e.complexity.Staff.AddrNationality(childComplexity), true

	case "Staff.addrPoBox":
		if e.complexity.Staff.AddrPoBox == nil {
			break
		}

		return e.complexity.Staff.AddrPoBox(childComplexity), true

	case "Staff.addrPostalCode":
		if e.complexity.Staff.AddrPostalCode == nil {
			break
		}

		return e.complexity.Staff.AddrPostalCode(childComplexity), true

	case "Staff.cell":
		if e.complexity.Staff.Cell == nil {
			break
		}

		return e.complexity.Staff.Cell(childComplexity), true

	case "Staff.createdAt":
		if e.complexity.Staff.CreatedAt == nil {
			break
		}

		return e.complexity.Staff.CreatedAt(childComplexity), true

	case "Staff.email":
		if e.complexity.Staff.Email == nil {
			break
		}

		return e.complexity.Staff.Email(childComplexity), true

	case "Staff.id":
		if e.complexity.Staff.ID == nil {
			break
		}

		return e.complexity.Staff.ID(childComplexity), true

	case "Staff.iDno":
		if e.complexity.Staff.IDno == nil {
			break
		}

		return e.complexity.Staff.IDno(childComplexity), true

	case "Staff.ipAddress":
		if e.complexity.Staff.IPAddress == nil {
			break
		}

		return e.complexity.Staff.IPAddress(childComplexity), true

	case "Staff.nHIFno":
		if e.complexity.Staff.NHIFno == nil {
			break
		}

		return e.complexity.Staff.NHIFno(childComplexity), true

	case "Staff.name":
		if e.complexity.Staff.Name == nil {
			break
		}

		return e.complexity.Staff.Name(childComplexity), true

	case "Staff.pass":
		if e.complexity.Staff.Pass == nil {
			break
		}

		return e.complexity.Staff.Pass(childComplexity), true

	case "Staff.roles":
		if e.complexity.Staff.Roles == nil {
			break
		}

		return e.complexity.Staff.Roles(childComplexity), true

	case "Staff.salute":
		if e.complexity.Staff.Salute == nil {
			break
		}

		return e.complexity.Staff.Salute(childComplexity), true

	case "Staff.school":
		if e.complexity.Staff.School == nil {
			break
		}

		return e.complexity.Staff.School(childComplexity), true

	case "Staff.semiFormal":
		if e.complexity.Staff.SemiFormal == nil {
			break
		}

		return e.complexity.Staff.SemiFormal(childComplexity), true

	case "Staff.staff":
		if e.complexity.Staff.Staff == nil {
			break
		}

		return e.complexity.Staff.Staff(childComplexity), true

	case "Staff.thumbNail":
		if e.complexity.Staff.ThumbNail == nil {
			break
		}

		return e.complexity.Staff.ThumbNail(childComplexity), true

	case "StaffConnection.edges":
		if e.complexity.StaffConnection.Edges == nil {
			break
		}

		return e.complexity.StaffConnection.Edges(childComplexity), true

	case "StaffConnection.pageInfo":
		if e.complexity.StaffConnection.PageInfo == nil {
			break
		}

		return e.complexity.StaffConnection.PageInfo(childComplexity), true

	case "StaffConnection.totalCount":
		if e.complexity.StaffConnection.TotalCount == nil {
			break
		}

		return e.complexity.StaffConnection.TotalCount(childComplexity), true

	case "StaffEdge.cursor":
		if e.complexity.StaffEdge.Cursor == nil {
			break
		}

		return e.complexity.StaffEdge.Cursor(childComplexity), true

	case "StaffEdge.node":
		if e.complexity.StaffEdge.Node == nil {
			break
		}

		return e.complexity.StaffEdge.Node(childComplexity), true

	case "StaticFile.createdAt":
		if e.complexity.StaticFile.CreatedAt == nil {
			break
		}

		return e.complexity.StaticFile.CreatedAt(childComplexity), true

	case "StaticFile.fileType":
		if e.complexity.StaticFile.FileType == nil {
			break
		}

		return e.complexity.StaticFile.FileType(childComplexity), true

	case "StaticFile.fileURI":
		if e.complexity.StaticFile.FileURI == nil {
			break
		}

		return e.complexity.StaticFile.FileURI(childComplexity), true

	case "StaticFile.id":
		if e.complexity.StaticFile.ID == nil {
			break
		}

		return e.complexity.StaticFile.ID(childComplexity), true

	case "StaticFile.lesson":
		if e.complexity.StaticFile.Lesson == nil {
			break
		}

		return e.complexity.StaticFile.Lesson(childComplexity), true

	case "StaticFile.newsletter":
		if e.complexity.StaticFile.Newsletter == nil {
			break
		}

		return e.complexity.StaticFile.Newsletter(childComplexity), true

	case "StaticFile.school":
		if e.complexity.StaticFile.School == nil {
			break
		}

		return e.complexity.StaticFile.School(childComplexity), true

	case "StaticFile.uploader":
		if e.complexity.StaticFile.Uploader == nil {
			break
		}

		return e.complexity.StaticFile.Uploader(childComplexity), true

	case "StaticFilesConnection.edges":
		if e.complexity.StaticFilesConnection.Edges == nil {
			break
		}

		return e.complexity.StaticFilesConnection.Edges(childComplexity), true

	case "StaticFilesConnection.pageInfo":
		if e.complexity.StaticFilesConnection.PageInfo == nil {
			break
		}

		return e.complexity.StaticFilesConnection.PageInfo(childComplexity), true

	case "StaticFilesConnection.totalCount":
		if e.complexity.StaticFilesConnection.TotalCount == nil {
			break
		}

		return e.complexity.StaticFilesConnection.TotalCount(childComplexity), true

	case "StaticFilesEdge.cursor":
		if e.complexity.StaticFilesEdge.Cursor == nil {
			break
		}

		return e.complexity.StaticFilesEdge.Cursor(childComplexity), true

	case "StaticFilesEdge.node":
		if e.complexity.StaticFilesEdge.Node == nil {
			break
		}

		return e.complexity.StaticFilesEdge.Node(childComplexity), true

	case "Status.balance":
		if e.complexity.Status.Balance == nil {
			break
		}

		return e.complexity.Status.Balance(childComplexity), true

	case "Status.confirmed":
		if e.complexity.Status.Confirmed == nil {
			break
		}

		return e.complexity.Status.Confirmed(childComplexity), true

	case "Status.confirmedBy":
		if e.complexity.Status.ConfirmedBy == nil {
			break
		}

		return e.complexity.Status.ConfirmedBy(childComplexity), true

	case "Status.confirmedOn":
		if e.complexity.Status.ConfirmedOn == nil {
			break
		}

		return e.complexity.Status.ConfirmedOn(childComplexity), true

	case "Status.createdAt":
		if e.complexity.Status.CreatedAt == nil {
			break
		}

		return e.complexity.Status.CreatedAt(childComplexity), true

	case "Status.id":
		if e.complexity.Status.ID == nil {
			break
		}

		return e.complexity.Status.ID(childComplexity), true

	case "Status.school":
		if e.complexity.Status.School == nil {
			break
		}

		return e.complexity.Status.School(childComplexity), true

	case "StatusConnection.edges":
		if e.complexity.StatusConnection.Edges == nil {
			break
		}

		return e.complexity.StatusConnection.Edges(childComplexity), true

	case "StatusConnection.pageInfo":
		if e.complexity.StatusConnection.PageInfo == nil {
			break
		}

		return e.complexity.StatusConnection.PageInfo(childComplexity), true

	case "StatusConnection.totalCount":
		if e.complexity.StatusConnection.TotalCount == nil {
			break
		}

		return e.complexity.StatusConnection.TotalCount(childComplexity), true

	case "StatusEdge.cursor":
		if e.complexity.StatusEdge.Cursor == nil {
			break
		}

		return e.complexity.StatusEdge.Cursor(childComplexity), true

	case "StatusEdge.node":
		if e.complexity.StatusEdge.Node == nil {
			break
		}

		return e.complexity.StatusEdge.Node(childComplexity), true

	case "Storekeeper.addrCounty":
		if e.complexity.Storekeeper.AddrCounty == nil {
			break
		}

		return e.complexity.Storekeeper.AddrCounty(childComplexity), true

	case "Storekeeper.addrDistrict":
		if e.complexity.Storekeeper.AddrDistrict == nil {
			break
		}

		return e.complexity.Storekeeper.AddrDistrict(childComplexity), true

	case "Storekeeper.addrNationality":
		if e.complexity.Storekeeper.AddrNationality == nil {
			break
		}

		return e.complexity.Storekeeper.AddrNationality(childComplexity), true

	case "Storekeeper.addrPoBox":
		if e.complexity.Storekeeper.AddrPoBox == nil {
			break
		}

		return e.complexity.Storekeeper.AddrPoBox(childComplexity), true

	case "Storekeeper.addrPostalCode":
		if e.complexity.Storekeeper.AddrPostalCode == nil {
			break
		}

		return e.complexity.Storekeeper.AddrPostalCode(childComplexity), true

	case "Storekeeper.archives":
		if e.complexity.Storekeeper.Archives == nil {
			break
		}

		args, err := ec.field_Storekeeper_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Storekeeper.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Storekeeper.cell":
		if e.complexity.Storekeeper.Cell == nil {
			break
		}

		return e.complexity.Storekeeper.Cell(childComplexity), true

	case "Storekeeper.checkinCheckouts":
		if e.complexity.Storekeeper.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Storekeeper.CheckinCheckouts(childComplexity), true

	case "Storekeeper.createdAt":
		if e.complexity.Storekeeper.CreatedAt == nil {
			break
		}

		return e.complexity.Storekeeper.CreatedAt(childComplexity), true

	case "Storekeeper.email":
		if e.complexity.Storekeeper.Email == nil {
			break
		}

		return e.complexity.Storekeeper.Email(childComplexity), true

	case "Storekeeper.gender":
		if e.complexity.Storekeeper.Gender == nil {
			break
		}

		return e.complexity.Storekeeper.Gender(childComplexity), true

	case "Storekeeper.id":
		if e.complexity.Storekeeper.ID == nil {
			break
		}

		return e.complexity.Storekeeper.ID(childComplexity), true

	case "Storekeeper.iDno":
		if e.complexity.Storekeeper.IDno == nil {
			break
		}

		return e.complexity.Storekeeper.IDno(childComplexity), true

	case "Storekeeper.ipAddress":
		if e.complexity.Storekeeper.IPAddress == nil {
			break
		}

		return e.complexity.Storekeeper.IPAddress(childComplexity), true

	case "Storekeeper.nHIFno":
		if e.complexity.Storekeeper.NHIFno == nil {
			break
		}

		return e.complexity.Storekeeper.NHIFno(childComplexity), true

	case "Storekeeper.name":
		if e.complexity.Storekeeper.Name == nil {
			break
		}

		return e.complexity.Storekeeper.Name(childComplexity), true

	case "Storekeeper.pass":
		if e.complexity.Storekeeper.Pass == nil {
			break
		}

		return e.complexity.Storekeeper.Pass(childComplexity), true

	case "Storekeeper.products":
		if e.complexity.Storekeeper.Products == nil {
			break
		}

		return e.complexity.Storekeeper.Products(childComplexity), true

	case "Storekeeper.productsDispensed":
		if e.complexity.Storekeeper.ProductsDispensed == nil {
			break
		}

		return e.complexity.Storekeeper.ProductsDispensed(childComplexity), true

	case "Storekeeper.roles":
		if e.complexity.Storekeeper.Roles == nil {
			break
		}

		return e.complexity.Storekeeper.Roles(childComplexity), true

	case "Storekeeper.salute":
		if e.complexity.Storekeeper.Salute == nil {
			break
		}

		return e.complexity.Storekeeper.Salute(childComplexity), true

	case "Storekeeper.school":
		if e.complexity.Storekeeper.School == nil {
			break
		}

		return e.complexity.Storekeeper.School(childComplexity), true

	case "Storekeeper.semiFormal":
		if e.complexity.Storekeeper.SemiFormal == nil {
			break
		}

		return e.complexity.Storekeeper.SemiFormal(childComplexity), true

	case "Storekeeper.thumbNail":
		if e.complexity.Storekeeper.ThumbNail == nil {
			break
		}

		return e.complexity.Storekeeper.ThumbNail(childComplexity), true

	case "StorekeepersConnection.edges":
		if e.complexity.StorekeepersConnection.Edges == nil {
			break
		}

		return e.complexity.StorekeepersConnection.Edges(childComplexity), true

	case "StorekeepersConnection.pageInfo":
		if e.complexity.StorekeepersConnection.PageInfo == nil {
			break
		}

		return e.complexity.StorekeepersConnection.PageInfo(childComplexity), true

	case "StorekeepersConnection.totalCount":
		if e.complexity.StorekeepersConnection.TotalCount == nil {
			break
		}

		return e.complexity.StorekeepersConnection.TotalCount(childComplexity), true

	case "StorekeepersEdge.cursor":
		if e.complexity.StorekeepersEdge.Cursor == nil {
			break
		}

		return e.complexity.StorekeepersEdge.Cursor(childComplexity), true

	case "StorekeepersEdge.node":
		if e.complexity.StorekeepersEdge.Node == nil {
			break
		}

		return e.complexity.StorekeepersEdge.Node(childComplexity), true

	case "Student.animal":
		if e.complexity.Student.Animal == nil {
			break
		}

		return e.complexity.Student.Animal(childComplexity), true

	case "Student.attendance":
		if e.complexity.Student.Attendance == nil {
			break
		}

		return e.complexity.Student.Attendance(childComplexity), true

	case "Student.bCertNo":
		if e.complexity.Student.BCertNo == nil {
			break
		}

		return e.complexity.Student.BCertNo(childComplexity), true

	case "Student.bestFriend":
		if e.complexity.Student.BestFriend == nil {
			break
		}

		return e.complexity.Student.BestFriend(childComplexity), true

	case "Student.bloodGroup":
		if e.complexity.Student.BloodGroup == nil {
			break
		}

		return e.complexity.Student.BloodGroup(childComplexity), true

	case "Student.book":
		if e.complexity.Student.Book == nil {
			break
		}

		return e.complexity.Student.Book(childComplexity), true

	case "Student.careers":
		if e.complexity.Student.Careers == nil {
			break
		}

		return e.complexity.Student.Careers(childComplexity), true

	case "Student.createdAt":
		if e.complexity.Student.CreatedAt == nil {
			break
		}

		return e.complexity.Student.CreatedAt(childComplexity), true

	case "Student.device":
		if e.complexity.Student.Device == nil {
			break
		}

		return e.complexity.Student.Device(childComplexity), true

	case "Student.diaries":
		if e.complexity.Student.Diaries == nil {
			break
		}

		return e.complexity.Student.Diaries(childComplexity), true

	case "Student.dob":
		if e.complexity.Student.Dob == nil {
			break
		}

		return e.complexity.Student.Dob(childComplexity), true

	case "Student.firstaider":
		if e.complexity.Student.Firstaider == nil {
			break
		}

		return e.complexity.Student.Firstaider(childComplexity), true

	case "Student.game":
		if e.complexity.Student.Game == nil {
			break
		}

		return e.complexity.Student.Game(childComplexity), true

	case "Student.grade":
		if e.complexity.Student.Grade == nil {
			break
		}

		return e.complexity.Student.Grade(childComplexity), true

	case "Student.greetstranger":
		if e.complexity.Student.Greetstranger == nil {
			break
		}

		return e.complexity.Student.Greetstranger(childComplexity), true

	case "Student.guardians":
		if e.complexity.Student.Guardians == nil {
			break
		}

		return e.complexity.Student.Guardians(childComplexity), true

	case "Student.hobies":
		if e.complexity.Student.Hobies == nil {
			break
		}

		return e.complexity.Student.Hobies(childComplexity), true

	case "Student.id":
		if e.complexity.Student.ID == nil {
			break
		}

		return e.complexity.Student.ID(childComplexity), true

	case "Student.languages":
		if e.complexity.Student.Languages == nil {
			break
		}

		return e.complexity.Student.Languages(childComplexity), true

	case "Student.lends":
		if e.complexity.Student.Lends == nil {
			break
		}

		return e.complexity.Student.Lends(childComplexity), true

	case "Student.motto":
		if e.complexity.Student.Motto == nil {
			break
		}

		return e.complexity.Student.Motto(childComplexity), true

	case "Student.name":
		if e.complexity.Student.Name == nil {
			break
		}

		return e.complexity.Student.Name(childComplexity), true

	case "Student.nemisNo":
		if e.complexity.Student.NemisNo == nil {
			break
		}

		return e.complexity.Student.NemisNo(childComplexity), true

	case "Student.nhifStatus":
		if e.complexity.Student.NhifStatus == nil {
			break
		}

		return e.complexity.Student.NhifStatus(childComplexity), true

	case "Student.nickName":
		if e.complexity.Student.NickName == nil {
			break
		}

		return e.complexity.Student.NickName(childComplexity), true

	case "Student.payments":
		if e.complexity.Student.Payments == nil {
			break
		}

		return e.complexity.Student.Payments(childComplexity), true

	case "Student.quote":
		if e.complexity.Student.Quote == nil {
			break
		}

		return e.complexity.Student.Quote(childComplexity), true

	case "Student.roleCall":
		if e.complexity.Student.RoleCall == nil {
			break
		}

		return e.complexity.Student.RoleCall(childComplexity), true

	case "Student.roleModels":
		if e.complexity.Student.RoleModels == nil {
			break
		}

		return e.complexity.Student.RoleModels(childComplexity), true

	case "Student.school":
		if e.complexity.Student.School == nil {
			break
		}

		return e.complexity.Student.School(childComplexity), true

	case "Student.scores":
		if e.complexity.Student.Scores == nil {
			break
		}

		return e.complexity.Student.Scores(childComplexity), true

	case "Student.sharemeal":
		if e.complexity.Student.Sharemeal == nil {
			break
		}

		return e.complexity.Student.Sharemeal(childComplexity), true

	case "Student.subject":
		if e.complexity.Student.Subject == nil {
			break
		}

		return e.complexity.Student.Subject(childComplexity), true

	case "Student.thumbnail":
		if e.complexity.Student.Thumbnail == nil {
			break
		}

		return e.complexity.Student.Thumbnail(childComplexity), true

	case "StudentinStudentout.createdAt":
		if e.complexity.StudentinStudentout.CreatedAt == nil {
			break
		}

		return e.complexity.StudentinStudentout.CreatedAt(childComplexity), true

	case "StudentinStudentout.id":
		if e.complexity.StudentinStudentout.ID == nil {
			break
		}

		return e.complexity.StudentinStudentout.ID(childComplexity), true

	case "StudentinStudentout.inSchool":
		if e.complexity.StudentinStudentout.InSchool == nil {
			break
		}

		return e.complexity.StudentinStudentout.InSchool(childComplexity), true

	case "StudentinStudentout.school":
		if e.complexity.StudentinStudentout.School == nil {
			break
		}

		return e.complexity.StudentinStudentout.School(childComplexity), true

	case "StudentinStudentout.student":
		if e.complexity.StudentinStudentout.Student == nil {
			break
		}

		return e.complexity.StudentinStudentout.Student(childComplexity), true

	case "StudentinStudentout.timeIn":
		if e.complexity.StudentinStudentout.TimeIn == nil {
			break
		}

		return e.complexity.StudentinStudentout.TimeIn(childComplexity), true

	case "StudentinStudentout.timeOut":
		if e.complexity.StudentinStudentout.TimeOut == nil {
			break
		}

		return e.complexity.StudentinStudentout.TimeOut(childComplexity), true

	case "StudentinStudentoutConnection.edges":
		if e.complexity.StudentinStudentoutConnection.Edges == nil {
			break
		}

		return e.complexity.StudentinStudentoutConnection.Edges(childComplexity), true

	case "StudentinStudentoutConnection.pageInfo":
		if e.complexity.StudentinStudentoutConnection.PageInfo == nil {
			break
		}

		return e.complexity.StudentinStudentoutConnection.PageInfo(childComplexity), true

	case "StudentinStudentoutConnection.totalCount":
		if e.complexity.StudentinStudentoutConnection.TotalCount == nil {
			break
		}

		return e.complexity.StudentinStudentoutConnection.TotalCount(childComplexity), true

	case "StudentinStudentoutEdge.cursor":
		if e.complexity.StudentinStudentoutEdge.Cursor == nil {
			break
		}

		return e.complexity.StudentinStudentoutEdge.Cursor(childComplexity), true

	case "StudentinStudentoutEdge.node":
		if e.complexity.StudentinStudentoutEdge.Node == nil {
			break
		}

		return e.complexity.StudentinStudentoutEdge.Node(childComplexity), true

	case "StudentsConnection.edges":
		if e.complexity.StudentsConnection.Edges == nil {
			break
		}

		return e.complexity.StudentsConnection.Edges(childComplexity), true

	case "StudentsConnection.pageInfo":
		if e.complexity.StudentsConnection.PageInfo == nil {
			break
		}

		return e.complexity.StudentsConnection.PageInfo(childComplexity), true

	case "StudentsConnection.totalCount":
		if e.complexity.StudentsConnection.TotalCount == nil {
			break
		}

		return e.complexity.StudentsConnection.TotalCount(childComplexity), true

	case "StudentsEdge.cursor":
		if e.complexity.StudentsEdge.Cursor == nil {
			break
		}

		return e.complexity.StudentsEdge.Cursor(childComplexity), true

	case "StudentsEdge.node":
		if e.complexity.StudentsEdge.Node == nil {
			break
		}

		return e.complexity.StudentsEdge.Node(childComplexity), true

	case "Subject.createdAt":
		if e.complexity.Subject.CreatedAt == nil {
			break
		}

		return e.complexity.Subject.CreatedAt(childComplexity), true

	case "Subject.department":
		if e.complexity.Subject.Department == nil {
			break
		}

		return e.complexity.Subject.Department(childComplexity), true

	case "Subject.id":
		if e.complexity.Subject.ID == nil {
			break
		}

		return e.complexity.Subject.ID(childComplexity), true

	case "Subject.name":
		if e.complexity.Subject.Name == nil {
			break
		}

		return e.complexity.Subject.Name(childComplexity), true

	case "Subject.school":
		if e.complexity.Subject.School == nil {
			break
		}

		return e.complexity.Subject.School(childComplexity), true

	case "Subject.scores":
		if e.complexity.Subject.Scores == nil {
			break
		}

		return e.complexity.Subject.Scores(childComplexity), true

	case "SubjectsConnection.edges":
		if e.complexity.SubjectsConnection.Edges == nil {
			break
		}

		return e.complexity.SubjectsConnection.Edges(childComplexity), true

	case "SubjectsConnection.pageInfo":
		if e.complexity.SubjectsConnection.PageInfo == nil {
			break
		}

		return e.complexity.SubjectsConnection.PageInfo(childComplexity), true

	case "SubjectsConnection.totalCount":
		if e.complexity.SubjectsConnection.TotalCount == nil {
			break
		}

		return e.complexity.SubjectsConnection.TotalCount(childComplexity), true

	case "SubjectsEdge.cursor":
		if e.complexity.SubjectsEdge.Cursor == nil {
			break
		}

		return e.complexity.SubjectsEdge.Cursor(childComplexity), true

	case "SubjectsEdge.node":
		if e.complexity.SubjectsEdge.Node == nil {
			break
		}

		return e.complexity.SubjectsEdge.Node(childComplexity), true

	case "Subscription.announceAdded":
		if e.complexity.Subscription.AnnounceAdded == nil {
			break
		}

		return e.complexity.Subscription.AnnounceAdded(childComplexity), true

	case "Subscription.attendanceConfirmed":
		if e.complexity.Subscription.AttendanceConfirmed == nil {
			break
		}

		return e.complexity.Subscription.AttendanceConfirmed(childComplexity), true

	case "Subscription.bookAdded":
		if e.complexity.Subscription.BookAdded == nil {
			break
		}

		return e.complexity.Subscription.BookAdded(childComplexity), true

	case "Subscription.bookLentout":
		if e.complexity.Subscription.BookLentout == nil {
			break
		}

		return e.complexity.Subscription.BookLentout(childComplexity), true

	case "Subscription.bookReceivedBack":
		if e.complexity.Subscription.BookReceivedBack == nil {
			break
		}

		return e.complexity.Subscription.BookReceivedBack(childComplexity), true

	case "Subscription.diaryAdded":
		if e.complexity.Subscription.DiaryAdded == nil {
			break
		}

		return e.complexity.Subscription.DiaryAdded(childComplexity), true

	case "Subscription.diarySeen":
		if e.complexity.Subscription.DiarySeen == nil {
			break
		}

		return e.complexity.Subscription.DiarySeen(childComplexity), true

	case "Subscription.examScored":
		if e.complexity.Subscription.ExamScored == nil {
			break
		}

		return e.complexity.Subscription.ExamScored(childComplexity), true

	case "Subscription.itemArchived":
		if e.complexity.Subscription.ItemArchived == nil {
			break
		}

		return e.complexity.Subscription.ItemArchived(childComplexity), true

	case "Subscription.lessonAdded":
		if e.complexity.Subscription.LessonAdded == nil {
			break
		}

		return e.complexity.Subscription.LessonAdded(childComplexity), true

	case "Subscription.lessonAttended":
		if e.complexity.Subscription.LessonAttended == nil {
			break
		}

		return e.complexity.Subscription.LessonAttended(childComplexity), true

	case "Subscription.newsletterAdded":
		if e.complexity.Subscription.NewsletterAdded == nil {
			break
		}

		return e.complexity.Subscription.NewsletterAdded(childComplexity), true

	case "Subscription.nuLessonIn5":
		if e.complexity.Subscription.NuLessonIn5 == nil {
			break
		}

		return e.complexity.Subscription.NuLessonIn5(childComplexity), true

	case "Subscription.paymentConfirmed":
		if e.complexity.Subscription.PaymentConfirmed == nil {
			break
		}

		return e.complexity.Subscription.PaymentConfirmed(childComplexity), true

	case "Subscription.paymentMade":
		if e.complexity.Subscription.PaymentMade == nil {
			break
		}

		return e.complexity.Subscription.PaymentMade(childComplexity), true

	case "Subscription.productAdded":
		if e.complexity.Subscription.ProductAdded == nil {
			break
		}

		return e.complexity.Subscription.ProductAdded(childComplexity), true

	case "Subscription.productDispensed":
		if e.complexity.Subscription.ProductDispensed == nil {
			break
		}

		return e.complexity.Subscription.ProductDispensed(childComplexity), true

	case "Subscription.studentAdded":
		if e.complexity.Subscription.StudentAdded == nil {
			break
		}

		return e.complexity.Subscription.StudentAdded(childComplexity), true

	case "Subscription.studentHasArrived":
		if e.complexity.Subscription.StudentHasArrived == nil {
			break
		}

		return e.complexity.Subscription.StudentHasArrived(childComplexity), true

	case "Subscription.studentHasDeparted":
		if e.complexity.Subscription.StudentHasDeparted == nil {
			break
		}

		return e.complexity.Subscription.StudentHasDeparted(childComplexity), true

	case "Subscription.userAdded":
		if e.complexity.Subscription.UserAdded == nil {
			break
		}

		return e.complexity.Subscription.UserAdded(childComplexity), true

	case "Subscription.visitorCheckedin":
		if e.complexity.Subscription.VisitorCheckedin == nil {
			break
		}

		return e.complexity.Subscription.VisitorCheckedin(childComplexity), true

	case "Subscription.visitorCheckedout":
		if e.complexity.Subscription.VisitorCheckedout == nil {
			break
		}

		return e.complexity.Subscription.VisitorCheckedout(childComplexity), true

	case "Subscription.workerHasArrived":
		if e.complexity.Subscription.WorkerHasArrived == nil {
			break
		}

		return e.complexity.Subscription.WorkerHasArrived(childComplexity), true

	case "Subscription.workerHasDeparted":
		if e.complexity.Subscription.WorkerHasDeparted == nil {
			break
		}

		return e.complexity.Subscription.WorkerHasDeparted(childComplexity), true

	case "Supplier.addrCounty":
		if e.complexity.Supplier.AddrCounty == nil {
			break
		}

		return e.complexity.Supplier.AddrCounty(childComplexity), true

	case "Supplier.addrDistrict":
		if e.complexity.Supplier.AddrDistrict == nil {
			break
		}

		return e.complexity.Supplier.AddrDistrict(childComplexity), true

	case "Supplier.addrNationality":
		if e.complexity.Supplier.AddrNationality == nil {
			break
		}

		return e.complexity.Supplier.AddrNationality(childComplexity), true

	case "Supplier.addrPoBox":
		if e.complexity.Supplier.AddrPoBox == nil {
			break
		}

		return e.complexity.Supplier.AddrPoBox(childComplexity), true

	case "Supplier.addrPostalCode":
		if e.complexity.Supplier.AddrPostalCode == nil {
			break
		}

		return e.complexity.Supplier.AddrPostalCode(childComplexity), true

	case "Supplier.cell":
		if e.complexity.Supplier.Cell == nil {
			break
		}

		return e.complexity.Supplier.Cell(childComplexity), true

	case "Supplier.createdAt":
		if e.complexity.Supplier.CreatedAt == nil {
			break
		}

		return e.complexity.Supplier.CreatedAt(childComplexity), true

	case "Supplier.email":
		if e.complexity.Supplier.Email == nil {
			break
		}

		return e.complexity.Supplier.Email(childComplexity), true

	case "Supplier.gender":
		if e.complexity.Supplier.Gender == nil {
			break
		}

		return e.complexity.Supplier.Gender(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.iDno":
		if e.complexity.Supplier.IDno == nil {
			break
		}

		return e.complexity.Supplier.IDno(childComplexity), true

	case "Supplier.ipAddress":
		if e.complexity.Supplier.IPAddress == nil {
			break
		}

		return e.complexity.Supplier.IPAddress(childComplexity), true

	case "Supplier.nHIFno":
		if e.complexity.Supplier.NHIFno == nil {
			break
		}

		return e.complexity.Supplier.NHIFno(childComplexity), true

	case "Supplier.name":
		if e.complexity.Supplier.Name == nil {
			break
		}

		return e.complexity.Supplier.Name(childComplexity), true

	case "Supplier.payments":
		if e.complexity.Supplier.Payments == nil {
			break
		}

		return e.complexity.Supplier.Payments(childComplexity), true

	case "Supplier.products":
		if e.complexity.Supplier.Products == nil {
			break
		}

		return e.complexity.Supplier.Products(childComplexity), true

	case "Supplier.roles":
		if e.complexity.Supplier.Roles == nil {
			break
		}

		return e.complexity.Supplier.Roles(childComplexity), true

	case "Supplier.salute":
		if e.complexity.Supplier.Salute == nil {
			break
		}

		return e.complexity.Supplier.Salute(childComplexity), true

	case "Supplier.school":
		if e.complexity.Supplier.School == nil {
			break
		}

		return e.complexity.Supplier.School(childComplexity), true

	case "Supplier.semiFormal":
		if e.complexity.Supplier.SemiFormal == nil {
			break
		}

		return e.complexity.Supplier.SemiFormal(childComplexity), true

	case "Supplier.thumbNail":
		if e.complexity.Supplier.ThumbNail == nil {
			break
		}

		return e.complexity.Supplier.ThumbNail(childComplexity), true

	case "Supplier.visits":
		if e.complexity.Supplier.Visits == nil {
			break
		}

		return e.complexity.Supplier.Visits(childComplexity), true

	case "SuppliersConnection.edges":
		if e.complexity.SuppliersConnection.Edges == nil {
			break
		}

		return e.complexity.SuppliersConnection.Edges(childComplexity), true

	case "SuppliersConnection.pageInfo":
		if e.complexity.SuppliersConnection.PageInfo == nil {
			break
		}

		return e.complexity.SuppliersConnection.PageInfo(childComplexity), true

	case "SuppliersConnection.totalCount":
		if e.complexity.SuppliersConnection.TotalCount == nil {
			break
		}

		return e.complexity.SuppliersConnection.TotalCount(childComplexity), true

	case "SuppliersEdge.cursor":
		if e.complexity.SuppliersEdge.Cursor == nil {
			break
		}

		return e.complexity.SuppliersEdge.Cursor(childComplexity), true

	case "SuppliersEdge.node":
		if e.complexity.SuppliersEdge.Node == nil {
			break
		}

		return e.complexity.SuppliersEdge.Node(childComplexity), true

	case "Thread.createdAt":
		if e.complexity.Thread.CreatedAt == nil {
			break
		}

		return e.complexity.Thread.CreatedAt(childComplexity), true

	case "Thread.id":
		if e.complexity.Thread.ID == nil {
			break
		}

		return e.complexity.Thread.ID(childComplexity), true

	case "Thread.messages":
		if e.complexity.Thread.Messages == nil {
			break
		}

		return e.complexity.Thread.Messages(childComplexity), true

	case "Thread.new":
		if e.complexity.Thread.New == nil {
			break
		}

		return e.complexity.Thread.New(childComplexity), true

	case "Thread.school":
		if e.complexity.Thread.School == nil {
			break
		}

		return e.complexity.Thread.School(childComplexity), true

	case "ThreadsConnection.edges":
		if e.complexity.ThreadsConnection.Edges == nil {
			break
		}

		return e.complexity.ThreadsConnection.Edges(childComplexity), true

	case "ThreadsConnection.pageInfo":
		if e.complexity.ThreadsConnection.PageInfo == nil {
			break
		}

		return e.complexity.ThreadsConnection.PageInfo(childComplexity), true

	case "ThreadsConnection.totalCount":
		if e.complexity.ThreadsConnection.TotalCount == nil {
			break
		}

		return e.complexity.ThreadsConnection.TotalCount(childComplexity), true

	case "ThreadsEdge.cursor":
		if e.complexity.ThreadsEdge.Cursor == nil {
			break
		}

		return e.complexity.ThreadsEdge.Cursor(childComplexity), true

	case "ThreadsEdge.node":
		if e.complexity.ThreadsEdge.Node == nil {
			break
		}

		return e.complexity.ThreadsEdge.Node(childComplexity), true

	case "TimeTable.createdAt":
		if e.complexity.TimeTable.CreatedAt == nil {
			break
		}

		return e.complexity.TimeTable.CreatedAt(childComplexity), true

	case "TimeTable.day":
		if e.complexity.TimeTable.Day == nil {
			break
		}

		return e.complexity.TimeTable.Day(childComplexity), true

	case "TimeTable.done":
		if e.complexity.TimeTable.Done == nil {
			break
		}

		return e.complexity.TimeTable.Done(childComplexity), true

	case "TimeTable.grade":
		if e.complexity.TimeTable.Grade == nil {
			break
		}

		return e.complexity.TimeTable.Grade(childComplexity), true

	case "TimeTable.id":
		if e.complexity.TimeTable.ID == nil {
			break
		}

		return e.complexity.TimeTable.ID(childComplexity), true

	case "TimeTable.lesson1":
		if e.complexity.TimeTable.Lesson1 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson1(childComplexity), true

	case "TimeTable.lesson2":
		if e.complexity.TimeTable.Lesson2 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson2(childComplexity), true

	case "TimeTable.lesson3":
		if e.complexity.TimeTable.Lesson3 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson3(childComplexity), true

	case "TimeTable.lesson4":
		if e.complexity.TimeTable.Lesson4 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson4(childComplexity), true

	case "TimeTable.lesson5":
		if e.complexity.TimeTable.Lesson5 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson5(childComplexity), true

	case "TimeTable.lesson6":
		if e.complexity.TimeTable.Lesson6 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson6(childComplexity), true

	case "TimeTable.lesson7":
		if e.complexity.TimeTable.Lesson7 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson7(childComplexity), true

	case "TimeTable.lesson8":
		if e.complexity.TimeTable.Lesson8 == nil {
			break
		}

		return e.complexity.TimeTable.Lesson8(childComplexity), true

	case "TimeTable.school":
		if e.complexity.TimeTable.School == nil {
			break
		}

		return e.complexity.TimeTable.School(childComplexity), true

	case "TimeTablesConnection.edges":
		if e.complexity.TimeTablesConnection.Edges == nil {
			break
		}

		return e.complexity.TimeTablesConnection.Edges(childComplexity), true

	case "TimeTablesConnection.pageInfo":
		if e.complexity.TimeTablesConnection.PageInfo == nil {
			break
		}

		return e.complexity.TimeTablesConnection.PageInfo(childComplexity), true

	case "TimeTablesConnection.totalCount":
		if e.complexity.TimeTablesConnection.TotalCount == nil {
			break
		}

		return e.complexity.TimeTablesConnection.TotalCount(childComplexity), true

	case "TimeTablesEdge.cursor":
		if e.complexity.TimeTablesEdge.Cursor == nil {
			break
		}

		return e.complexity.TimeTablesEdge.Cursor(childComplexity), true

	case "TimeTablesEdge.node":
		if e.complexity.TimeTablesEdge.Node == nil {
			break
		}

		return e.complexity.TimeTablesEdge.Node(childComplexity), true

	case "Topic.assessment":
		if e.complexity.Topic.Assessment == nil {
			break
		}

		return e.complexity.Topic.Assessment(childComplexity), true

	case "Topic.communityActivities":
		if e.complexity.Topic.CommunityActivities == nil {
			break
		}

		return e.complexity.Topic.CommunityActivities(childComplexity), true

	case "Topic.competencies":
		if e.complexity.Topic.Competencies == nil {
			break
		}

		return e.complexity.Topic.Competencies(childComplexity), true

	case "Topic.createdAt":
		if e.complexity.Topic.CreatedAt == nil {
			break
		}

		return e.complexity.Topic.CreatedAt(childComplexity), true

	case "Topic.eSDDRR":
		if e.complexity.Topic.ESddrr == nil {
			break
		}

		return e.complexity.Topic.ESddrr(childComplexity), true

	case "Topic.experiences":
		if e.complexity.Topic.Experiences == nil {
			break
		}

		return e.complexity.Topic.Experiences(childComplexity), true

	case "Topic.id":
		if e.complexity.Topic.ID == nil {
			break
		}

		return e.complexity.Topic.ID(childComplexity), true

	case "Topic.inquiries":
		if e.complexity.Topic.Inquiries == nil {
			break
		}

		return e.complexity.Topic.Inquiries(childComplexity), true

	case "Topic.lifeSkills":
		if e.complexity.Topic.LifeSkills == nil {
			break
		}

		return e.complexity.Topic.LifeSkills(childComplexity), true

	case "Topic.nonFormalActivity":
		if e.complexity.Topic.NonFormalActivity == nil {
			break
		}

		return e.complexity.Topic.NonFormalActivity(childComplexity), true

	case "Topic.otherAreas":
		if e.complexity.Topic.OtherAreas == nil {
			break
		}

		return e.complexity.Topic.OtherAreas(childComplexity), true

	case "Topic.outComes":
		if e.complexity.Topic.OutComes == nil {
			break
		}

		return e.complexity.Topic.OutComes(childComplexity), true

	case "Topic.school":
		if e.complexity.Topic.School == nil {
			break
		}

		return e.complexity.Topic.School(childComplexity), true

	case "Topic.strand":
		if e.complexity.Topic.Strand == nil {
			break
		}

		return e.complexity.Topic.Strand(childComplexity), true

	case "Topic.subStrand":
		if e.complexity.Topic.SubStrand == nil {
			break
		}

		return e.complexity.Topic.SubStrand(childComplexity), true

	case "Topic.values":
		if e.complexity.Topic.Values == nil {
			break
		}

		return e.complexity.Topic.Values(childComplexity), true

	case "TopicsConnection.edges":
		if e.complexity.TopicsConnection.Edges == nil {
			break
		}

		return e.complexity.TopicsConnection.Edges(childComplexity), true

	case "TopicsConnection.pageInfo":
		if e.complexity.TopicsConnection.PageInfo == nil {
			break
		}

		return e.complexity.TopicsConnection.PageInfo(childComplexity), true

	case "TopicsConnection.totalCount":
		if e.complexity.TopicsConnection.TotalCount == nil {
			break
		}

		return e.complexity.TopicsConnection.TotalCount(childComplexity), true

	case "TopicsEdge.cursor":
		if e.complexity.TopicsEdge.Cursor == nil {
			break
		}

		return e.complexity.TopicsEdge.Cursor(childComplexity), true

	case "TopicsEdge.node":
		if e.complexity.TopicsEdge.Node == nil {
			break
		}

		return e.complexity.TopicsEdge.Node(childComplexity), true

	case "Tutor.addrCounty":
		if e.complexity.Tutor.AddrCounty == nil {
			break
		}

		return e.complexity.Tutor.AddrCounty(childComplexity), true

	case "Tutor.addrDistrict":
		if e.complexity.Tutor.AddrDistrict == nil {
			break
		}

		return e.complexity.Tutor.AddrDistrict(childComplexity), true

	case "Tutor.addrNationality":
		if e.complexity.Tutor.AddrNationality == nil {
			break
		}

		return e.complexity.Tutor.AddrNationality(childComplexity), true

	case "Tutor.addrPoBox":
		if e.complexity.Tutor.AddrPoBox == nil {
			break
		}

		return e.complexity.Tutor.AddrPoBox(childComplexity), true

	case "Tutor.addrPostalCode":
		if e.complexity.Tutor.AddrPostalCode == nil {
			break
		}

		return e.complexity.Tutor.AddrPostalCode(childComplexity), true

	case "Tutor.archives":
		if e.complexity.Tutor.Archives == nil {
			break
		}

		args, err := ec.field_Tutor_archives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tutor.Archives(childComplexity, args["objType"].(*model.ArchiveTypeEnum)), true

	case "Tutor.cell":
		if e.complexity.Tutor.Cell == nil {
			break
		}

		return e.complexity.Tutor.Cell(childComplexity), true

	case "Tutor.checkinCheckouts":
		if e.complexity.Tutor.CheckinCheckouts == nil {
			break
		}

		return e.complexity.Tutor.CheckinCheckouts(childComplexity), true

	case "Tutor.createdAt":
		if e.complexity.Tutor.CreatedAt == nil {
			break
		}

		return e.complexity.Tutor.CreatedAt(childComplexity), true

	case "Tutor.diaries":
		if e.complexity.Tutor.Diaries == nil {
			break
		}

		return e.complexity.Tutor.Diaries(childComplexity), true

	case "Tutor.email":
		if e.complexity.Tutor.Email == nil {
			break
		}

		return e.complexity.Tutor.Email(childComplexity), true

	case "Tutor.gender":
		if e.complexity.Tutor.Gender == nil {
			break
		}

		return e.complexity.Tutor.Gender(childComplexity), true

	case "Tutor.id":
		if e.complexity.Tutor.ID == nil {
			break
		}

		return e.complexity.Tutor.ID(childComplexity), true

	case "Tutor.iDno":
		if e.complexity.Tutor.IDno == nil {
			break
		}

		return e.complexity.Tutor.IDno(childComplexity), true

	case "Tutor.ipAddress":
		if e.complexity.Tutor.IPAddress == nil {
			break
		}

		return e.complexity.Tutor.IPAddress(childComplexity), true

	case "Tutor.nHIFno":
		if e.complexity.Tutor.NHIFno == nil {
			break
		}

		return e.complexity.Tutor.NHIFno(childComplexity), true

	case "Tutor.name":
		if e.complexity.Tutor.Name == nil {
			break
		}

		return e.complexity.Tutor.Name(childComplexity), true

	case "Tutor.pass":
		if e.complexity.Tutor.Pass == nil {
			break
		}

		return e.complexity.Tutor.Pass(childComplexity), true

	case "Tutor.roles":
		if e.complexity.Tutor.Roles == nil {
			break
		}

		return e.complexity.Tutor.Roles(childComplexity), true

	case "Tutor.salute":
		if e.complexity.Tutor.Salute == nil {
			break
		}

		return e.complexity.Tutor.Salute(childComplexity), true

	case "Tutor.school":
		if e.complexity.Tutor.School == nil {
			break
		}

		return e.complexity.Tutor.School(childComplexity), true

	case "Tutor.semiFormal":
		if e.complexity.Tutor.SemiFormal == nil {
			break
		}

		return e.complexity.Tutor.SemiFormal(childComplexity), true

	case "Tutor.thumbNail":
		if e.complexity.Tutor.ThumbNail == nil {
			break
		}

		return e.complexity.Tutor.ThumbNail(childComplexity), true

	case "Tutor.timeTableLessons":
		if e.complexity.Tutor.TimeTableLessons == nil {
			break
		}

		return e.complexity.Tutor.TimeTableLessons(childComplexity), true

	case "TutorsConnection.edges":
		if e.complexity.TutorsConnection.Edges == nil {
			break
		}

		return e.complexity.TutorsConnection.Edges(childComplexity), true

	case "TutorsConnection.pageInfo":
		if e.complexity.TutorsConnection.PageInfo == nil {
			break
		}

		return e.complexity.TutorsConnection.PageInfo(childComplexity), true

	case "TutorsConnection.totalCount":
		if e.complexity.TutorsConnection.TotalCount == nil {
			break
		}

		return e.complexity.TutorsConnection.TotalCount(childComplexity), true

	case "TutorsEdge.cursor":
		if e.complexity.TutorsEdge.Cursor == nil {
			break
		}

		return e.complexity.TutorsEdge.Cursor(childComplexity), true

	case "TutorsEdge.node":
		if e.complexity.TutorsEdge.Node == nil {
			break
		}

		return e.complexity.TutorsEdge.Node(childComplexity), true

	case "User.addrCounty":
		if e.complexity.User.AddrCounty == nil {
			break
		}

		return e.complexity.User.AddrCounty(childComplexity), true

	case "User.addrDistrict":
		if e.complexity.User.AddrDistrict == nil {
			break
		}

		return e.complexity.User.AddrDistrict(childComplexity), true

	case "User.addrNationality":
		if e.complexity.User.AddrNationality == nil {
			break
		}

		return e.complexity.User.AddrNationality(childComplexity), true

	case "User.addrPoBox":
		if e.complexity.User.AddrPoBox == nil {
			break
		}

		return e.complexity.User.AddrPoBox(childComplexity), true

	case "User.addrPostalCode":
		if e.complexity.User.AddrPostalCode == nil {
			break
		}

		return e.complexity.User.AddrPostalCode(childComplexity), true

	case "User.cell":
		if e.complexity.User.Cell == nil {
			break
		}

		return e.complexity.User.Cell(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.essenes":
		if e.complexity.User.Essenes == nil {
			break
		}

		return e.complexity.User.Essenes(childComplexity), true

	case "User.gender":
		if e.complexity.User.Gender == nil {
			break
		}

		return e.complexity.User.Gender(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.iDno":
		if e.complexity.User.IDno == nil {
			break
		}

		return e.complexity.User.IDno(childComplexity), true

	case "User.ipAddress":
		if e.complexity.User.IPAddress == nil {
			break
		}

		return e.complexity.User.IPAddress(childComplexity), true

	case "User.messages":
		if e.complexity.User.Messages == nil {
			break
		}

		return e.complexity.User.Messages(childComplexity), true

	case "User.nHIFno":
		if e.complexity.User.NHIFno == nil {
			break
		}

		return e.complexity.User.NHIFno(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.payments":
		if e.complexity.User.Payments == nil {
			break
		}

		args, err := ec.field_User_payments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Payments(childComplexity, args["first"].(*int), args["after"].(*string)), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.salute":
		if e.complexity.User.Salute == nil {
			break
		}

		return e.complexity.User.Salute(childComplexity), true

	case "User.school":
		if e.complexity.User.School == nil {
			break
		}

		return e.complexity.User.School(childComplexity), true

	case "User.semiFormal":
		if e.complexity.User.SemiFormal == nil {
			break
		}

		return e.complexity.User.SemiFormal(childComplexity), true

	case "User.students":
		if e.complexity.User.Students == nil {
			break
		}

		return e.complexity.User.Students(childComplexity), true

	case "User.thumbNail":
		if e.complexity.User.ThumbNail == nil {
			break
		}

		return e.complexity.User.ThumbNail(childComplexity), true

	case "UsersConnection.edges":
		if e.complexity.UsersConnection.Edges == nil {
			break
		}

		return e.complexity.UsersConnection.Edges(childComplexity), true

	case "UsersConnection.pageInfo":
		if e.complexity.UsersConnection.PageInfo == nil {
			break
		}

		return e.complexity.UsersConnection.PageInfo(childComplexity), true

	case "UsersConnection.totalCount":
		if e.complexity.UsersConnection.TotalCount == nil {
			break
		}

		return e.complexity.UsersConnection.TotalCount(childComplexity), true

	case "UsersEdge.cursor":
		if e.complexity.UsersEdge.Cursor == nil {
			break
		}

		return e.complexity.UsersEdge.Cursor(childComplexity), true

	case "UsersEdge.node":
		if e.complexity.UsersEdge.Node == nil {
			break
		}

		return e.complexity.UsersEdge.Node(childComplexity), true

	case "Visitor.authorizedBy":
		if e.complexity.Visitor.AuthorizedBy == nil {
			break
		}

		return e.complexity.Visitor.AuthorizedBy(childComplexity), true

	case "Visitor.belongings":
		if e.complexity.Visitor.Belongings == nil {
			break
		}

		return e.complexity.Visitor.Belongings(childComplexity), true

	case "Visitor.cell":
		if e.complexity.Visitor.Cell == nil {
			break
		}

		return e.complexity.Visitor.Cell(childComplexity), true

	case "Visitor.createdAt":
		if e.complexity.Visitor.CreatedAt == nil {
			break
		}

		return e.complexity.Visitor.CreatedAt(childComplexity), true

	case "Visitor.email":
		if e.complexity.Visitor.Email == nil {
			break
		}

		return e.complexity.Visitor.Email(childComplexity), true

	case "Visitor.id":
		if e.complexity.Visitor.ID == nil {
			break
		}

		return e.complexity.Visitor.ID(childComplexity), true

	case "Visitor.iDno":
		if e.complexity.Visitor.IDno == nil {
			break
		}

		return e.complexity.Visitor.IDno(childComplexity), true

	case "Visitor.name":
		if e.complexity.Visitor.Name == nil {
			break
		}

		return e.complexity.Visitor.Name(childComplexity), true

	case "Visitor.purpose":
		if e.complexity.Visitor.Purpose == nil {
			break
		}

		return e.complexity.Visitor.Purpose(childComplexity), true

	case "Visitor.salute":
		if e.complexity.Visitor.Salute == nil {
			break
		}

		return e.complexity.Visitor.Salute(childComplexity), true

	case "Visitor.school":
		if e.complexity.Visitor.School == nil {
			break
		}

		return e.complexity.Visitor.School(childComplexity), true

	case "Visitor.thumbScan":
		if e.complexity.Visitor.ThumbScan == nil {
			break
		}

		return e.complexity.Visitor.ThumbScan(childComplexity), true

	case "Visitor.timeIn":
		if e.complexity.Visitor.TimeIn == nil {
			break
		}

		return e.complexity.Visitor.TimeIn(childComplexity), true

	case "Visitor.timeOut":
		if e.complexity.Visitor.TimeOut == nil {
			break
		}

		return e.complexity.Visitor.TimeOut(childComplexity), true

	case "Visitor.vehicle":
		if e.complexity.Visitor.Vehicle == nil {
			break
		}

		return e.complexity.Visitor.Vehicle(childComplexity), true

	case "Visitor.visiting":
		if e.complexity.Visitor.Visiting == nil {
			break
		}

		return e.complexity.Visitor.Visiting(childComplexity), true

	case "Visitor.visitingFreq":
		if e.complexity.Visitor.VisitingFreq == nil {
			break
		}

		return e.complexity.Visitor.VisitingFreq(childComplexity), true

	case "VisitorsConnection.edges":
		if e.complexity.VisitorsConnection.Edges == nil {
			break
		}

		return e.complexity.VisitorsConnection.Edges(childComplexity), true

	case "VisitorsConnection.pageInfo":
		if e.complexity.VisitorsConnection.PageInfo == nil {
			break
		}

		return e.complexity.VisitorsConnection.PageInfo(childComplexity), true

	case "VisitorsConnection.totalCount":
		if e.complexity.VisitorsConnection.TotalCount == nil {
			break
		}

		return e.complexity.VisitorsConnection.TotalCount(childComplexity), true

	case "VisitorsEdge.cursor":
		if e.complexity.VisitorsEdge.Cursor == nil {
			break
		}

		return e.complexity.VisitorsEdge.Cursor(childComplexity), true

	case "VisitorsEdge.node":
		if e.complexity.VisitorsEdge.Node == nil {
			break
		}

		return e.complexity.VisitorsEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema/enums.graphqls", Input: `enum genderEnum {
	MALE
	FEMALE
	INTERSEX
}

enum rolesEnum {
	Admin
	Accountant
	Guardian 
	Librarian
	Manager
	StoreKeeper
	Tutor
	Supplier
}

enum saluteEnum {
	Mr
	Mrs
	Miss
	Dr
	Pst
	Eng
	Prof
	Sir
}

enum accEnum {
	mPesa
	Equitel
	VISA
	Burser
}

enum senesterEnum {
	TermOne
	TermTwo
	TermThree
}

enum gradeEnum {
	Pre_Primary_One
	Pre_Primary_Two
	First_Grade
	Second_Grade
	Third_Grade
	Fourth_Grade
	Fifth_Grade
	Sixth_Grade
}

enum periodEnum {
	Lesson1_900am_930am
	Lesson2_930am_1000am
	Lesson3_1030am_1100pm
	Lesson4_1100pm_11300pm
	Lesson5_1130pm_1200pm
	Lesson6_100pm_130pm
	Lesson7_130pm_200pm
	Lesson8_230pm_300pm
}

enum subjectEnum {
  # Pre primary 1 subject activities
  Language_Activities_PP1 # lang dept
  Mathematical_Activities_PP1 # stem dept
  Environmental_Activities_PP1 # arts dept
  Psychomotor_Creative_Activities_PP1 # stem dept
  Christian_Religious_Activities_PP1 # humanities
  Islamic_Religious_Activities_PP1 # humanities
  Hindu_Religious_Activities_PP1 # humanities
  Pastoral_Programme_Instruction_PP1 # humanities
  
  # Pre primary 2 subject activities
  Language_Activities_PP2 # lang dept
  Mathematical_Activities_PP2 # stem dept
  Environmental_Activities_PP2 # arts dept
  Psychomotor_Creative_Activities_PP2 # stem dept
  Christian_Religious_Activities_PP2 # humanities
  Islamic_Religious_Activities_PP2 # humanities
  Hindu_Religious_Activities_PP2 # humanities
  Pastoral_Programme_Instruction_PP2 # humanities
  
  # Grade 1 subject activities
  Literacy_Activities_GRD1 # lang dept
  Kiswahili_Language_Activities_GRD1 # lang dept
  Kenya_Sign_Language_GRD1 # lang dept
  English_Language_Activities_GRD1 # lang dept
  Mathematical_Activities_GRD1 # stem dept
  Environmental_Activities_GRD1 # arts dept
  Hygiene_Nutrition_Activities_GRD1 # arts dept
  Movement_Creative_Activities_GRD1 # stem dept
  Christian_Religious_Activities_GRD1 # humanities
  Islamic_Religious_Activities_GRD1 # humanities
  Hindu_Religious_Activities_GRD1 # humanities
  Pastoral_Programme_Instruction_GRD1 # humanities
  
  # Grade 2 subject activities
  Literacy_Activities_GRD2 # lang dept
  Kiswahili_Language_Activities_GRD2 # lang dept
  Kenya_Sign_Language_GRD2 # lang dept
  English_Language_Activities_GRD2 # lang dept
  Mathematical_Activities_GRD2 # stem
  Environmental_Activities_GRD2 # arts dept
  Hygiene_Nutrition_Activities_GRD2 # arts dept
  Movement_Creative_Activities_GRD2 # stem dept
  Christian_Religious_Activities_GRD2 # humanities
  Islamic_Religious_Activities_GRD2 # humanities
  Hindu_Religious_Activities_GRD2 # humanities
  Pastoral_Programme_Instruction_GRD2 # humanities
  
  # Grade 3 subject activities
  Literacy_Activities_GRD3 # lang dept
  Kiswahili_Language_Activities_GRD3 # lang dept
  Kenya_Sign_Language_GRD3 # lang dept
  English_Language_Activities_GRD3 # lang dept
  Mathematical_Activities_GRD3 # stem dept
  Environmental_Activities_GRD3 # arts dept
  Hygiene_Nutrition_Activities_GRD3 # arts dept
  Movement_Creative_Activities_GRD3 # stem dept
  Christian_Religious_Activities_GRD3 # humanities
  Islamic_Religious_Activities_GRD3 # humanities
  Hindu_Religious_Activities_GRD3 # humanities
  Pastoral_Programme_Instruction_GRD3 # humanities
  
  # Grade 4 subject activities
  Indigenious_Activities_GRD4 # lang dept
  Kiswahili_Language_Activities_GRD4 # lang dept
  Kenya_Sign_Language_GRD4 # lang dept
  English_Language_Activities_GRD4 # lang dept
  German_Language_Activities_GRD4 # lang dept
  French_Language_Activities_GRD4 # lang dept
  Mandarin_Language_Activities_GRD4 # lang dept
  Arabic_Language_Activities_GRD4 # lang dept
  Mathematical_Activities_GRD4 # stem dept
  Science_Technology_Activities_GRD4 # stem dept
  Home_Science_Activities_GRD4 # arts dept
  Art_Craft_Activities_GRD4 # arts dept
  Music_Activities_GRD4 # arts dept
  Social_Activities_GRD4 # humanities
  Agriculture_Activities_GRD4 # arts dept
  Physical_Health_Activities_GRD4 # arts dept
  Christian_Religious_Activities_GRD4 # humanities
  Islamic_Religious_Activities_GRD4 # humanities
  Hindu_Religious_Activities_GRD4 # humanities
  Pastoral_Programme_Instruction_GRD4 # humanities
  
  # Grade 5 subject activities
  Indigenious_Activities_GRD5 # lang dept
  Kiswahili_Language_Activities_GRD5 # lang dept
  Kenya_Sign_Language_GRD5 # lang dept
  English_Language_Activities_GRD5 # lang dept
  German_Language_Activities_GRD5 # lang dept
  French_Language_Activities_GRD5 # lang dept
  Mandarin_Language_Activities_GRD5 # lang dept
  Arabic_Language_Activities_GRD5 # lang dept
  Mathematical_Activities_GRD5 # stem dept
  Science_Technology_Activities_GRD5 # stem dept
  Home_Science_Activities_GRD5 # arts dept
  Art_Craft_Activities_GRD5 # arts dept
  Music_Activities_GRD5 # arts dept
  Social_Activities_GRD5 # humanities
  Agriculture_Activities_GRD5 # arts dept
  Physical_Health_Activities_GRD5 # arts dept
  Christian_Religious_Activities_GRD5 # humanities
  Islamic_Religious_Activities_GRD5 # humanities
  Hindu_Religious_Activities_GRD5 # humanities
  Pastoral_Programme_Instruction_GRD5 # humanities
  # Grade 6 subject activities
  Indigenious_Activities_GRD6 # lang dept
  Kiswahili_Language_Activities_GRD6 # lang dept
  Kenya_Sign_Language_GRD6 # lang dept
  English_Language_Activities_GRD6 # lang dept
  German_Language_Activities_GRD6 # lang dept
  French_Language_Activities_GRD6 # lang dept
  Mandarin_Language_Activities_GRD6 # lang dept
  Arabic_Language_Activities_GRD6 # lang dept
  Mathematical_Activities_GRD6 # stem dept
  Science_Technology_Activities_GRD6 # stem dept
  Home_Science_Activities_GRD6 # arts dept
  Art_Craft_Activities_GRD6 # arts dept
  Music_Activities_GRD6 # arts dept
  Social_Activities_GRD6 # humanities
  Agriculture_Activities_GRD6 # arts dept
  Physical_Health_Activities_GRD6 # arts dept
  Christian_Religious_Activities_GRD6 # humanities
  Islamic_Religious_Activities_GRD6 # humanities
  Hindu_Religious_Activities_GRD6 # humanities
  Pastoral_Programme_Instruction_GRD6 # humanities
}

enum deptEnum {
	LanguagesDept
	StemDept
	HumanitiesDept
	ArtsDept
}

enum conditionEnum {
	BetterThanHanded
	AsHanded
	SlightlyDamaged
	NeedsRepair
	BeyondRepair
}

enum productCategoryEnum {
	Stationary
	Kitchen
	Welfare
	Others
}

enum paymentTypeEnum {
	expenditure
	income
	refund
}

enum paymentForEnum {
	schoolFees
	salary
	supplies
	pettyCash
	refund
}

enum fileTypeEnum {
	LessonFile
	NewsletterFile
	AttendanceConfirmedGIF
	UserThumb
	StudentThumb
}

enum archiveTypeEnum {
	User
	Student
	Announce
	Attend
	Book
	Culture
	StudentDiary
	Dept
	Exam
	Fee
	Grade
	Lend
	Lesson
	Message
	Newsletter
	Payment
	Product
	DispensedProd
	Score
	Status
	Subject
	Timetable
	Topic
	Visitor
}
`, BuiltIn: false},
	{Name: "graph/schema/mutations.graphqls", Input: `# All mutations supported by the RESS API
type Mutation {
	# upload a file
	addFile(
		# the file to upload in bytes
		file: Upload!
		# what service requires this file
		fileType: fileTypeEnum!
		# specific file owner
		requiredByID: String!
		# who uploaded the file
		uploader: String!
		# Where do you want the file stored in the file system
		fileURI: String!
		# school involved
		schoolEmail: String!
	): StaticFile

	# Create new user to the system
	addUser(
		# Email for the new user
		email: String!
		# Password for the new user
		password: String!
		# A salute before the name
		salute: saluteEnum!
		# Both names of the new user
		name: String!
		# National Identification Number of the new user
		IDno: String!
		# NHIF number which include students covered
		NHIFno: String!
		# Cell phone number of the new user
		cell: String!
		# gender of user
		gender: genderEnum!
		# SchoolId of where the user is assigned
		school: String!
		# Address of the user
		addr_poBox: String!
		addr_postalCode: String!
		addr_district: String!
		addr_county: String!
		addr_nationality: String! # thumbnail: ImageFile! # thumbnail: Upload,
	): User

	# Add new student to the system
	addStudent(
		# Name of the new student
		name: String!
		# NemisNo of the new student
		nemisNo: String!
		# NHIF status
		nhifStatus: Boolean!
		# Birth Certificate number of the new student
		bCertNo: String!
		# A nick name for the new student
		nickName: String!
		# date of birth
		dob: Time!
		# hobies
		hoby1: String!
		hoby2: String!
		hoby3: String!
		# role models
		roleModel1: String!
		roleModel2: String!
		roleModel3: String!
		# careers in mind
		career1: String!
		career2: String!
		career3: String!
		# personal motto
		Motto: String!
		# student blood group
		BloodGroup: String!
		# self explanatory
		BestFriend: String!
		# landuages spoken
		language1: String!
		language2: String!
		language3: String!
		#students favourites
		Game: String!
		Subject: String!
		Book: String!
		Quote: String!
		Animal: String!
		Device: String!
		# use the current grade to calculate initial fee balance
		grade: gradeEnum!
		# School ID of the new student
		school: String!
		# Parent
		parent: String!
		# Initial fee deposit can be 0 or all previous payments
		fees: Float!
		# Quick answers:
		sharemeal: Boolean!
		greetstranger: Boolean!
		firstaider: Boolean!
	): Student

	# Add new school to the system
	addSchool(
		# School Name
		name: String!
		# School motto
		motto: String!
		# Wired phone connection to the school
		phone: String!
		# School electric mail address
		email: String!
		# world wide web address of the school
		website: String!
		# P.O Box number of the school
		addrPoBox: String!
		# Postal-code
		addrPostalCode: String!
		# postal town
		addrTown: String!
		# county where school is situated
		addrCounty: String!
		# country where is school is located
		addrCountry: String! # All users associated with the school
	): School

	# Add new department to school
	addDepartment(
		# Department Name
		name: deptEnum!
		# Id of the head of department
		hod: String!
		# school id
		school: String!
	): Department

	# Add new Subject to school
	addSubject(
		# Subject Name
		name: subjectEnum!
		# Id of the head of department
		department: deptEnum!
		# school id
		schoolEmail: String!
	): Subject

	# Add new grade to school
	addGrade(
		# Grade Name
		name: gradeEnum!
		# Id of the head of department
		stream: String!
		# Glass teacher
		classTeacher: String!
		# Grade motto
		motto: String!
		# school id
		schoolEmail: String!
	): Grade

	# Add new lesson to school
	addLesson(
		# Lesson Name
		name: String!
		# Date of the calendar
		date: String!
		# Lesson time of the day
		timeDate: periodEnum!
		# tutor involved
		tutorEmail: String!
		# grade to be taught
		grade: gradeEnum!
		# Id of the head of department
		subject: subjectEnum!
		# starting time
		start: String!
		# stop time
		stop: String!
		# duration
		duration: Float!
		# whether in future
		done: Boolean!
		# tutor remarks
		remarks: String!
		# school id
		school: String!
	): Lesson

	AddTopic(
		# id of the lesson of this topic
		lesson: String!
		# Strand or topic of the lesson
		strand: String!
		# SubStrand or subtopic of the lesson
		subStrand: String!
		# expected Outcomes from the lesson
		outComes: String!
		# Experiences from the lesson
		experiences: String!
		# Inquiries of the lesson
		inquiries: String!
		# Competencies to be obtained by student
		competencies: String!
		# LifeSkills acquired
		lifeSkills: String!
		# ESD DRR of the lesson
		ESDDRR: String!
		# Values acquired
		values: String!
		# OtherAreas affected
		otherAreas: String!
		# CommunityActivities to accompany the lesson
		communityActivities: String!
		# NonFormalActivity accompanying the lesson
		nonFormalActivity: String!
		# Assessment of the student
		assessment: String!
		# SchoolEmail
		schoolEmail: String!
	): Lesson

	# Add new book to school
	addBook(
		# Department Name
		name: String!
		# Id of the head of department
		isbn: String!
		# comma separated String of authors
		authors: String!
		# revision
		revision: String!
		# school id
		school: String!
	): Book

	# Add lend to book
	LendOut(
		# book involved
		bookIsbn: String!
		# date book was received
		received_on: String!
		# date book is due
		due_on: String!
		# nemis ID of student lending book
		student: String!
		# librarian authorizing lend
		librarian: String!
		# school id
		school: String!
	): Lend

	# receive back book from lend
	ReceiveBook(
		# id of lend entry during lending out
		lendId: String!
		# condition of book as received back
		condition: conditionEnum!
	): Lend

	# Add new fee structure
	AddFee(
		# name of the grade involved
		grade: gradeEnum!
		# year of effect
		year: String!
		# amount in structure
		amount: Float!
		# semester
		semester: String!
		# school id
		school: String!
	): Fee

	NewPayment(
		# debit or credit
		paytype: paymentTypeEnum!
		# fees, salary, supplies, refund other
		payFor: paymentForEnum!
		# email/nemisID of receiver
		receiver: String!
		# Amount
		amount: Float!
		# Date
		date: String!
		# account fee paid to
		account: accEnum!
		# user who made the payment
		payeemail: String!
		# school where the book belongs
		school: String!
	): Payment

	# Exam type fields
	AddExam(
		# Name of exam
		name: String!
		# date of exam
		date: String!
		# name of grade of exam
		grade: gradeEnum!
		# school where the book belongs
		school: String!
	): Exam

	# Score type fields
	AddScore(
		# The actual marks scored
		score: Float!
		# nemis ID of student involved
		studentNemis: String!
		# subject id of the current score
		subject: subjectEnum!
		# exam id of which the score is associated
		examID: String!
		# school where the book belongs
		schoolEmail: String!
	): Score

	AddTimeTable(
		# date & day to be the active timetable for grade
		Day: String!
		# id of lesson 1
		Lesson1: String!
		# id of lesson 2
		Lesson2: String!
		# id of lesson 3
		Lesson3: String!
		# id of lesson 4
		Lesson4: String!
		# id of lesson 5
		Lesson5: String!
		# id of lesson 6
		Lesson6: String!
		# id of lesson 7
		Lesson7: String!
		# id of lesson 8
		Lesson8: String!
		# name of grade where timetable belongs
		Grade: gradeEnum!
		# school where timetable belong to
		SchoolEmail: String!
	): TimeTable

	# Create new user to the system
	newVisitor(
		# visitor's salute
		Salute: String!
		# visitor's name
		Name: String!
		# visitor's id number
		IDno: String!
		# visitor's cell number
		Cell: String!
		# visitor's email address
		Email: String!
		# office to be visited
		Visiting: String!
		# visitor's purpose of visit
		Purpose: String!
		# visitor's vehicle if any
		Vehicle: String!
		# visitor's belongings if any
		Belongings: String!
		# visit number?
		VisitingFreq: Float!
		# gateman who authorized the visitor
		AuthorizedBy: String!
		# school ni kama kawa
		SchoolEmail: String!
	): Visitor

	NewDiary(
		# remarks for the diary
		TutorRemarks: String!
		# student for the diary
		Student: String!
		# any special requests from school to guardian
		SchoolRequest: String!
		# Tutor entering remarks
		TutorMail: String!
		# school for this activity
		SchoolEmail: String!
	): Diary

	ViewDiary(
		# guardian viewing diary
		GuardianEmail: String!
		# dairy viewed
		DiaryID: String!
		# school logic
		SchoolEmail: String!
	): Diary

	AddProduct(
		# unique product name
		Name: String!
		# product buying price
		Cost: Float!
		# quantity received
		Quantity: Float!
		# email of product supplier supplier
		Supplier: String!
		# Category where the product belongs
		Category: productCategoryEnum!
		# date when product was received
		ReceivedOn: String!
		# Email of Storekeeper who received the item
		ReceivedBy: String!
		# allowed minimum quantity
		AllowedMinimum: Float!
		# school where the product belongs
		SchoolEmail: String!
	): Product

	DispenseProduct(
		# unique product name
		Name: String!
		# confirm category
		Category: String!
		# quantity received
		Quantity: Float!
		# email of school staff receiving item
		DispenseTo: String!
		# mail of storekeeper dispensing item
		DispensedBy: String!
		# school where the product belongs
		SchoolEmail: String!
	): Product

	NewCulture(
		# story title
		Title: String!
		# instruction to guardians
		Instructions: String!
		# main story body
		Story: String!
		# accompanying brain storm quiz
		Quiz: String!
		# lessons learnt to be filled by student
		Lessons: String!
		# culture taught to be filled by guardian
		Culture: String!
		# grade receiving the story
		Grade: gradeEnum!
		# school where said saga belongs
		SchoolEmail: String!
	): Culture

	NewEssene(
		# user concerned
		UserMail: String!
		# school they belong to
		SchoolEmail: String!
	): Essene

	# school worker checkin
	studentCheckin(
		# student nemis No.
		nemisID: String!
		# school ni kama kawa
		schoolEmail: String!
	): StudentinStudentout

	# school worker checkout
	studentCheckout(
		# checkin-checkout ID
		sisoID: String!
	): StudentinStudentout

	# school worker checkin
	staffCheckin(
		# email of the worker checking in
		workerEmail: String!
		# gateman who authorized the worker
		authorizedBy: String!
		# school ni kama kawa
		schoolEmail: String!
	): CheckinCheckout

	# school worker checkout
	staffCheckout(
		# checkin-checkout ID
		cicoID: String!
	): CheckinCheckout

	SendAnnouncement(
		# group of concern to this announcement
		Topic: String!
		# author of this announcement on behalf the sch
		By: String!
		# message content of ann
		Message: String!
		# school requiring the announcement
		SchoolEmail: String!
	): Announcement

	ReadAnnouncement(
		# announcement ID
		AnnounceID: String!
		# user reading the announcement
		User: String!
		# read boolean
		Read: Boolean!
		# school associated
		SchoolEmail: String!
	): Announcement

	SendMessage(
		# Topic of the messafe
		Topic: String!
		# main message content
		Text: String!
		# email of sender/ composer
		User: String!
		# threadID or "NEW" to start a new thread
		Thread: String!
		# recepient school
		School: String!
	): Message

	# Visitor checkout call
	VisitorCheckout(
		# Id of visitor leaving school
		visitorID: String!
	): Visitor

	# AddRole mutation call
	AddRole(
		# Email of the user to get the role
		userEmail: String!
		# Name of role to add to user
		roleName: rolesEnum!
	): User

	# RestorRoles mutation call
	RestoreRoles(
		# Email of the user to get the role
		userEmail: String!
	): User

	# promote std mutation call
	PromoteStudent(
		# grade to be promoted to
		Grade: gradeEnum!
		# student to be promoted
		StudentNemisID: String!
		# school where they belong
		SchoolEmail: String!
	): Student

	# ConfirmPayment mutation call
	ConfirmPayment(
		# ID of Payment to confirm
		PayID: String!
		# Confirmer's email
		Email: String!
	): Payment

	# Mark lesson attendance
	ConfirmLessonAttended(
		# ID of attendance obj 2 confirm
		attendanceID: String!
		# Student gir byte from RESS-EYE ML protocal
		StudentGIF: Upload!
	): Attendance

	# Confirm lesson attendance
	AttendLesson(
		# student attending lesson
		nemisID: String!
		# lesson attended
		lessonID: String!
		# school where it belongs
		school: String!
	): Attendance

	AddStudentGuardian(
		# Student nemis id
		studentNemis: String!
		# parent email
		guardianEmail: String!
		#school email
		schoolEmail: String!
	): Student

	# Delete by item ID mutation calls
	DelAnnouncement(announcementID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelAnnounceUserConn(connID: ID!): Boolean

	DelAttendance(attendanceID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelBook(bookID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelCico(cicoID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelSiso(sisoID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelParentingCulture(ParentingCultureID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelDepartment(deptID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelDiary(diaryID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelUserDiaryConn(connID: ID!): Boolean

	DelDispensedProduct(disProductID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelProduct(prodID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelEssene(esseneID: ID!): Boolean

	DelExam(examID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelFee(feeID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelGrade(gradeID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelLend(lendID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelLesson(lssnID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelMessage(msgID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelPayment(payID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelSchool(schoolID: ID!): Boolean

	DelScore(scoreID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelStudent(nemisID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelSubject(subjectID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelThread(threadID: ID!): Boolean

	DelTimeTable(ttableID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelUser(userEmail: String!, DeletedByName: String!, DeletedByMail: String!): Boolean

	DelVisitor(visitorID: ID!, DeletedByName: String!, DeletedByMail: String!): Boolean

	# Update announcement by ID mutation call
	editAnnouncement(announcementID: ID!, topic: String, announcerEmail: String, message: String): Announcement

	# Update book by ID mutation call
	editBook(bookID: ID!, name: String, isbn: String, authors: String, revision: String): Book

	# Update parenting culture by ID mutation call
	editCulture(
		ParentingCultureID: ID!
		storyTitle: String
		instructions: String
		story: String
		quiz: String
		lessonsLearnt: String
		cultureTaught: String
		gradeToReceive: gradeEnum
	): Culture

	# Update department by ID mutation call
	editDepartment(deptID: ID!, name: deptEnum, hodEmail: String): Department

	# Update std diary by ID mutation call
	editDiary(diaryID: ID!, remarks: String, studentNemis: String, request: String, tutorEmail: String): Diary

	# Update dispensed product by ID mutation call
	editDispensedProduct(
		disProductID: ID!
		productName: String
		quantity: Float
		category: productCategoryEnum
		dispensedTo: String
		dispensedBy: String
	): DispensedProduct

	# Update product by ID mutation call
	editProduct(
		prodID: ID!
		name: String
		cost: Float
		quantity: Float
		supplier: String
		category: productCategoryEnum
		receivedOn: String
		receivedBy: String
		minimumQty: Float
	): Product

	# Update exam by ID mutation call
	editExam(examID: ID!, name: String, date: Time, gradeName: gradeEnum): Exam

	# Update fee by ID mutation call
	editFee(feeID: ID!, grade: gradeEnum, year: String, amount: Float, semester: senesterEnum): Fee

	# Update grade by ID mutation call
	editGrade(gradeID: ID!, name: gradeEnum, stream: String, classTeacher: String, gradeMotto: String): Grade

	# Update newsletter by ID mutation call
	editNewsletter(
		newsletterID: ID!
		mainTopic: String
		topicOne: String
		textOne: String
		topicTwo: String
		textTwo: String
		topicThree: String
		textThree: String
		topicFour: String
		textFour: String
		topicFive: String
		textFive: String
		rubberStampURL: String
	): Newsletter

	# Update lesson by ID mutation call
	editLesson(
		lssnID: ID!
		name: String
		date: Time
		timedate: periodEnum
		grade: gradeEnum
		subject: subjectEnum
		start: Time
		stop: Time
		duration: Float
		done: Boolean
		remarks: String
		tutorEmail: String
	): Lesson

	# Update message by ID mutation call
	editMessage(msgID: ID!, topic: String, text: String, userEmail: String, threadID: ID): Message

	# Update payment by ID mutation call
	editPayment(
		payID: ID!
		paymentType: paymentTypeEnum
		payingFor: paymentForEnum
		receiverEmailNemisid: String
		amount: Float
		date: Time
		account: accEnum
		payeeEmail: String
	): Payment

	# Update school by ID mutation call
	editSchool(
		schoolID: ID!
		name: String
		motto: String
		phone: String
		email: String
		website: String
		poBox: String
		poCode: String
		district: String
		county: String
		country: String
	): School

	# Update score by ID mutation call
	editScore(scoreID: ID!, score: Float, studentNemisID: String, subject: subjectEnum, examID: ID): Score

	# Update student by ID mutation call
	editStudent(
		stdID: ID!
		name: String
		nemisNo: String
		nhif: String
		bCertNo: String
		nickName: String
		dateOfBirth: Time
		hoby1: String
		hoby2: String
		hoby3: String
		roleModel1: String
		roleModel2: String
		roleModel3: String
		career1: String
		career2: String
		career3: String
		personalMotto: String
		bloodGroup: String
		bestFriend: String
		language1: String
		language2: String
		language3: String
		quickAnswer1: String
		quickAnswer2: String
		quickAnswer3: String
		favGame: String
		favSubject: String
		favBook: String
		favQuote: String
		favAnimal: String
		favAnimation: String
		favDevice: String
	): Student

	# Update subject by ID mutation call
	editSubject(
		subjectID: ID!
		name: subjectEnum
		departmentName: deptEnum
		weeklyLessons: Float
		lessonDuration: Float
	): Subject

	# Update timetable by ID mutation call
	editTimeTable(
		ttableID: ID!
		day: String
		done: Boolean
		lesson1ID: ID
		lesson2ID: ID
		lesson3ID: ID
		lesson4ID: ID
		lesson5ID: ID
		lesson6ID: ID
		lesson7ID: ID
		lesson8ID: ID
		grade: gradeEnum
	): TimeTable

	# Update user by ID mutation call
	editUser(
		userID: ID!
		salute: saluteEnum
		name: String
		iDNo: String
		nhifNo: String
		cell: String
		email: String
		password: String
		poBox: String
		poCode: String
		district: String
		county: String
		nationality: String
		roles: rolesEnum
	): User

	# Update visitor by ID mutation call
	editVisitor(
		visitorID: ID!
		salute: saluteEnum
		name: String
		iDNO: String
		cell: String
		email: String
		visitingOffice: String
		purpose: String
		vehicle: String
		belongings: String
		timeIn: Time
		timeOut: Time
		thumbScan: String
		visitingFreq: Float
		authBy: String
	): Visitor
}
`, BuiltIn: false},
	{Name: "graph/schema/query.graphqls", Input: `# Query entry points to the RESS api
type Query {
  # search the entire ress database
  search(text: String!): [SearchResult]!

  # Search for a school by its email
  school(email: String!): School

  # start a school timekeeper service
  startTimeKeeper(school: String!, clearPasses: Boolean!): Boolean

  # Get sign-in QR code for user returns URI of generated png
  getQR(email: String!, password: String!): String!

  # Search for user by email address
  user(email: String!): User
  # Query for all users in the system
  users(first: Int, after: String): UsersConnection!

  # User roles associated with school object
  # Admins(schoolEmail: String!): AdminsConnection!
  # Managers(schoolEmail: String!): ManagersConnection!
  # Accountants(schoolEmail: String!): AccountantsConnection!
  # Librarians(schoolEmail: String!): LibrariansConnection!
  # Tutors(schoolEmail: String!): TutorsConnection!
  # Guardians(schoolEmail: String!): GuardiansConnection!
  # Search for a student by nemisId
  # student(nemisNo: String!): Student
  # Query for all students in the system
  # students(first: Int, after: String): StudentsConnection!

  # Search for fee entry by id
  # fee(ID: String!): Fee
  # Query for all available fee entries for the school
  # fees(first: Int, after: String): FeesConnection!

  # Search for a payment by id
  # payment(ID: String!): Payment
  # Query for all available payments for the student
  # payments(method: accEnum, first: Int, after: String): PaymentsConnection!

  # Search for a grade by name
  # grade(name: gradeEnum!): Grade
  # Query for all available gardes in the school
  # grades(first: Int, after: String): GradesConnection!

  # Search for an exam by id
  # exam(ID: String!): Exam
  # Query for all available exams in the school
  # exams(first: Int, after: String): ExamsConnection!

  # Search for a exam score by id
  # score(ID: String!): Score
  # Query for all available scores
  # scores(first: Int, after: String): ScoresConnection!

  # Search for a book by name
  # book(isbn: String!): Book
  # Query for all available books in the school
  # books(first: Int, after: String): BooksConnection!

  # Search for a lend by id
  # lend(ID: String!): Lend
  # Query for all available lends in the library
  # lends(BookIsbn: String!, first: Int, after: String): LendsConnection!

  # Search for a department by name
  # dept(name: String!): Department
  # Query for all available departments in the school
  # depts(first: Int, after: String): DepartmentsConnection!
  # subjects(first: Int, after: String): SubjectsConnection!

  # Search for a subject by name
  # subject(name: String!): Subject
  # Query for all available subjects in the school
  # subjects(first: Int, after: String): SubjectsConnection!

  # Search for a lesson by ID
  # lesson(ID: String!): Lesson
  # Query for all available lessons in the school
  # lessons(first: Int, after: String): LessonsConnection!

  # Search for a lesson topic information by ID
  # topic(ID: String!): Topic
  # Query for all available lesson topics in the school
  # topics(first: Int, after: String): TopicsConnection!

  # Search for a timeTable by ID
  # timeTable(ID: String!): TimeTable
  # Query for all available timeTables in the school
  # timeTables(grade: gradeEnum!, school: String!): TimeTablesConnection!

  # search for visitor by email
  # visitor(email: String!): Visitor
  # all visitors in the system
  # visitors(first: Int, after: String): VisitorsConnection!
}
`, BuiltIn: false},
	{Name: "graph/schema/schema.graphqls", Input: `schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
`, BuiltIn: false},
	{Name: "graph/schema/subscription.graphqls", Input: `# Client subscription calls
type Subscription {
	# subscriptions 4 payment txs
	paymentMade: Payment!
	# subscriptions 4 roll call txs
	lessonAttended: Attendance!
	# subscriptions 4 report cards
	examScored: Score!
	# almost starting lesson tutor subscriber
	nuLessonIn5: Lesson!
	# student has arrived sub
	studentHasArrived: StudentinStudentout!
	# student has departed sub
	studentHasDeparted: StudentinStudentout!
	# payment confirmed subscription
	paymentConfirmed: Status!
	# nu book subscription
	bookAdded: Book!
	# nu book lend sub
	bookLentout: Lend!
	# lend complete sub
	bookReceivedBack: Lend!
	# nu product sub
	productAdded: Product!
	# nu dispensed product subscription
	productDispensed: DispensedProduct!
	# nu diary subscriptions
	diaryAdded: Diary!
	# diary replied by parent sub
	diarySeen: Diary!
	# workers as they arrive sub
	workerHasArrived: CheckinCheckout!
	# worker has departed sub
	workerHasDeparted: CheckinCheckout!
	# visitor checkedin sub
	visitorCheckedin: Visitor!
	# visitor checkedout sub
	visitorCheckedout: Visitor!
	# nu announcement added sub
	announceAdded: Announcement!
	# nu newsletter subscriber
	newsletterAdded: Newsletter!
	# nu lesson tutors subs
	lessonAdded: Lesson!
	# nu student received in school sub
	studentAdded: Student!
	# nu user in the school subs
	userAdded: User!
	# school item archived
	itemArchived: Archive!
	# nu lesson attendance confirmed sub
	attendanceConfirmed: Attendance!
}
`, BuiltIn: false},
	{Name: "graph/schema/type/accountant.graphqls", Input: `type Accountant {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	IDno: String
	# NHIF number of the user
	NHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# all payments occustrated by this user
	authorizedPayments: PaymentsConnection
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type AccountantsConnection {
	totalCount: Int!
	edges: [AccountantsEdge]
	pageInfo: PageInfo!
}

type AccountantsEdge {
	cursor: ID!
	node: Accountant
}
`, BuiltIn: false},
	{Name: "graph/schema/type/admin.graphqls", Input: `type Admin {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# visitors book
	visitors: VisitorsConnection!
	# workers authorized
	authorizedWorkers: CheckinCheckoutConnection!
	# messages from users
	messages: MessagesConnection!
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type AdminsConnection {
	totalCount: Int!
	edges: [AdminsEdge]
	pageInfo: PageInfo!
}

type AdminsEdge {
	cursor: ID!
	node: Admin
}
`, BuiltIn: false},
	{Name: "graph/schema/type/announcement.graphqls", Input: `type Announcement {
	# Id of the ann object
	id: ID!
	# group to be concerned about this ann
	topic: String
	# user who posted the announcement
	by: User
	# ann message text
	message: String
	# announcement recepients
	receipients: UsersConnection
	# school object
	school: School
	# created at
	createdAt: Time
}

type AnnouncementConnection {
	totalCount: Int!
	edges: [AnnouncementEdge]
	pageInfo: PageInfo!
}

type AnnouncementEdge {
	cursor: ID!
	node: Announcement
}
`, BuiltIn: false},
	{Name: "graph/schema/type/archive.graphqls", Input: `type Archive {
	# Id of the arch
	id: ID!
	# type of object that was deleted
	type: String
	# Field in deleted object
	field1: String
	# Field in deleted object
	field2: String
	# Field in deleted object
	field3: String
	# Field in deleted object
	field4: String
	# Field in deleted object
	field5: String
	# Field in deleted object
	field6: String
	# Field in deleted object
	field7: String
	# Field in deleted object
	field8: String
	# Field in deleted object
	field9: String
	# Field in deleted object
	field10: String
	# Field in deleted object
	field11: String
	# Field in deleted object
	field12: String
	# Field in deleted object
	field13: String
	# Field in deleted object
	field14: String
	# Field in deleted object
	field15: String
	# Field in deleted object
	field16: String
	# Field in deleted object
	field17: String
	# Field in deleted object
	field18: String
	# Field in deleted object
	field19: String
	# Field in deleted object
	field20: String
	# user that deleted the archive
	deletedByName: String
	deletedByMail: String
	# Time this user instance was created in RESS
	createdAt: Time
	# School deleted from
	School: School
}

type ArchivesConnection {
	totalCount: Int!
	edges: [ArchivesEdge]
	pageInfo: PageInfo!
}

type ArchivesEdge {
	cursor: ID!
	node: Archive
}
`, BuiltIn: false},
	{Name: "graph/schema/type/attendance.graphqls", Input: `type Attendance {
	# Id of the att object
	id: ID!
	# student
	student: Student
	# lesson
	lesson: Lesson
	# attendance status
	present: Boolean
	# attendance confirmed
	confirmed: Boolean
	# attendance confirmation from RESS-EYE ML
	confirmation: StaticFile
	# school object
	school: School
	# created at
	createdAt: Time
}

type AttendanceConnection {
	totalCount: Int!
	edges: [AttendanceEdge]
	pageInfo: PageInfo!
}

type AttendanceEdge {
	cursor: ID!
	node: Attendance
}
`, BuiltIn: false},
	{Name: "graph/schema/type/book.graphqls", Input: `type Book {
	# Book ID
	id: ID!
	# Book Name
	name: String
	# isbn no
	isbn: String
	# book auther
	authors: String
	# revision year/ version
	revision: String
	# lends history
	lends: LendsConnection!
	# school where the book belongs
	school: School
	# self-explanatory
	createdAt: Time
}

type BooksConnection {
	totalCount: Int!
	edges: [BooksEdge]
	pageInfo: PageInfo!
}

type BooksEdge {
	cursor: ID!
	node: Book
}
`, BuiltIn: false},
	{Name: "graph/schema/type/cico.graphqls", Input: `type CheckinCheckout {
	# Msg ID
	id: ID!
	# student and grade involved
	worker: User
	# msg text
	timeIn: Time
	# message author
	inSchool: Boolean
	# thread where message belongs to
	timeOut: Time
	# authorizedBy
	authorizedBy: Admin!
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type CheckinCheckoutConnection {
	totalCount: Int!
	edges: [CheckinCheckoutEdge]
	pageInfo: PageInfo!
}

type CheckinCheckoutEdge {
	cursor: ID!
	node: CheckinCheckout
}
`, BuiltIn: false},
	{Name: "graph/schema/type/culture.graphqls", Input: `type Culture {
	# cult ID
	id: ID!
	# story title
	title: String
	# instructions to guardian and students
	instructions: String
	# main story body
	story: String
	# questions from tutor
	quiz: String
	# lessons learnt/entered by student
	lessons: String
	# culture observed by guardian
	culture: String
	# grade to receive this item
	grade: Grade
	# school of saga
	school: School
	# self explanatory
	createdAt: Time
}

type CulturesConnection {
	totalCount: Int!
	edges: [CulturesEdge]
	pageInfo: PageInfo!
}

type CulturesEdge {
	cursor: ID!
	node: Culture
}
`, BuiltIn: false},
	{Name: "graph/schema/type/department.graphqls", Input: `# A department representation in RESS
type Department {
	# Department ID
	id: ID!
	# Department Name
	name: String
	# head of department
	hod: Tutor!
	# All tutors associated with this department
	subjects: SubjectsConnection!
	# tutors associated with this dept
	tutors: TutorsConnection!
	# system school id
	school: School!
	# self-explanatory
	createdAt: Time
}

type DepartmentsEdge {
	cursor: ID!
	node: Department
}

type DepartmentsConnection {
	totalCount: Int!
	edges: [DepartmentsEdge]
	pageInfo: PageInfo!
}
`, BuiltIn: false},
	{Name: "graph/schema/type/diary.graphqls", Input: `# Diary type fields
type Diary {
	# diary ID
	id: ID!
	# tutor remarks in this diary entry
	remarks: String
	# diary belongs to this student
	student: Student!
	# request from school to guardian
	request: String
	# tutor who composed the diary
	tutor: Tutor!
	# first guardian to open dairy entry
	seenBy: GuardiansConnection
	# school where the diary belongs
	school: School!
	# self-explanatory
	createdAt: Time
}

type DiariesConnection {
	totalCount: Int!
	edges: [DiariesEdge]
	pageInfo: PageInfo!
}

type DiariesEdge {
	cursor: ID!
	node: Diary
}
`, BuiltIn: false},
	{Name: "graph/schema/type/dispense.graphqls", Input: `type DispensedProduct {
	id: ID!
	# unique product name
	product: Product!
	# quantity received
	quantity: Float
	# Category where the product belongs
	category: productCategoryEnum!
	# email of school staff receiving item
	dispenseTo: User
	# mail of storekeeper dispensing item
	dispensedBy: Storekeeper
	# School where Object belongs
	school: School
	# self-explanatory
	createdAt: Time
}

type DispensedProductsConnection {
	totalCount: Int!
	edges: [DispensedProductsEdge]
	pageInfo: PageInfo!
}

type DispensedProductsEdge {
	cursor: ID!
	node: DispensedProduct
}
`, BuiltIn: false},
	{Name: "graph/schema/type/essene.graphqls", Input: `# Essene type fields
type Essene {
	# esse ID
	id: ID!
	# user where it belongs
	user: User!
	# self-explanatory
	createdAt: Time
	# school where the essene was created
	school: School!
}

type EssenesConnection {
	totalCount: Int!
	edges: [EssenesEdge]
	pageInfo: PageInfo!
}

type EssenesEdge {
	cursor: ID!
	node: Essene
}
`, BuiltIn: false},
	{Name: "graph/schema/type/exam.graphqls", Input: `# Exam type fields
type Exam {
	# Fee ID
	id: ID!
	# Name
	name: String
	# date of exam
	date: String
	# grade of exam
	grade: Grade!
	# scores registered for said exam so far
	scores: ScoresConnection!
	# self-explanatory
	createdAt: Time
	# school where the book belongs
	school: School!
}

type ExamsConnection {
	totalCount: Int!
	edges: [ExamsEdge]
	pageInfo: PageInfo!
}

type ExamsEdge {
	cursor: ID!
	node: Exam
}
`, BuiltIn: false},
	{Name: "graph/schema/type/fee.graphqls", Input: `type Fee {
	# Fee ID
	id: ID!
	# Grade
	grade: Grade
	# Year
	year: String
	# semester
	semester: String
	# amount
	amount: Float
	# school where the book belongs
	school: School
	# self-explanatory
	createdAt: Time
}

type FeesConnection {
	totalCount: Int!
	edges: [FeesEdge]
	pageInfo: PageInfo!
}

type FeesEdge {
	cursor: ID!
	node: Fee
}
`, BuiltIn: false},
	{Name: "graph/schema/type/grade.graphqls", Input: `type Grade {
	# School ID
	id: ID!
	# School Name
	name: String
	# stream classification
	stream: String
	# class teacher
	classTeacher: Tutor!
	# grade motto
	motto: String
	# fee structure
	fees: FeesConnection!
	# students in the said grade
	students(first: Int, after: String): StudentsConnection!
	# students in class today
	studentsInClass: StudentinStudentoutConnection!
	# lessons in the timetable for this grade
	lessons: LessonsConnection!
	#examinations for said grade
	exams: ExamsConnection!
	# timetables for the grade
	timeTables: TimeTablesConnection!
	# parenting & culture objects
	cultures: CulturesConnection!
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type GradesConnection {
	totalCount: Int!
	edges: [GradesEdge]
	pageInfo: PageInfo!
}

type GradesEdge {
	cursor: ID!
	node: Grade
}
`, BuiltIn: false},
	{Name: "graph/schema/type/guardians.graphqls", Input: `type Guardian {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User password
	roles: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# Students associated to this user
	students: StudentsConnection!
	# all payments occustrated by this user
	payments: PaymentsConnection!
	# visits to school
	visits: VisitorsConnection!
	# messages
	messages: MessagesConnection!
	# diary entry viewed
	viwedDiaries: DiariesConnection!
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# School ID
	school: School
}

type GuardiansConnection {
	totalCount: Int!
	edges: [GuardiansEdge]
	pageInfo: PageInfo!
}

type GuardiansEdge {
	cursor: ID!
	node: Guardian
}
`, BuiltIn: false},
	{Name: "graph/schema/type/lend.graphqls", Input: `type Lend {
	# lend ID
	id: ID!
	# date received
	received_on: String
	# date due
	due_on: String
	# date of hand-over
	handed_over_on: String
	# if handed over
	handed_over: Boolean
	# librarian
	librarian: Librarian
	# book
	book: Book
	# condition of book when received
	condition: String
	# student involved
	student: Student
	# school where the book lend belongs
	school: School
	# self-explanatory
	createdAt: Time
}

type LendsConnection {
	totalCount: Int!
	edges: [LendsEdge]
	pageInfo: PageInfo!
}

type LendsEdge {
	cursor: ID!
	node: Lend
}
`, BuiltIn: false},
	{Name: "graph/schema/type/lesson.graphqls", Input: `# lesson type ...
type Lesson {
  # School ID
  id: ID!
  # School Name
  name: String
  # Date in this format "2006-01-02"
  date: Time
  # TimeDate
  timeDate: String
  # Start
  start: String
  # Stop
  stop: String
  # Duration
  duration: Float
  # Done
  done: Boolean
  # Files
  files: StaticFilesConnection
  # Remarks
  remarks: String
  # Subject
  subject: Subject
  # Topic
  topic: Topic
  # Tutor
  tutor: User
  # Grade
  grade: Grade
  # School
  school: School
  # self-explanatory
  createdAt: Time
}

type LessonsEdge {
	cursor: ID!
	node: Lesson
}

type LessonsConnection {
	totalCount: Int!
	edges: [LessonsEdge]
	pageInfo: PageInfo!
}
`, BuiltIn: false},
	{Name: "graph/schema/type/librarian.graphqls", Input: `type Librarian {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# all books authorized by said librarian
	lendsAuthorized: LendsConnection!
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type LibrariansConnection {
	totalCount: Int!
	edges: [LibrariansEdge]
	pageInfo: PageInfo!
}

type LibrariansEdge {
	cursor: ID!
	node: Librarian
}
`, BuiltIn: false},
	{Name: "graph/schema/type/manager.graphqls", Input: `type Manager {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# suggestion box messages
	messages: MessagesConnection!
	# all payments confirmed by this user
	authorizedPayments: PaymentsConnection
	# Time this user instance was created in RESS
	createdAt: Time
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type ManagersConnection {
	totalCount: Int!
	edges: [ManagersEdge]
	pageInfo: PageInfo!
}

type ManagersEdge {
	cursor: ID!
	node: Manager
}
`, BuiltIn: false},
	{Name: "graph/schema/type/message.graphqls", Input: `type Message {
	# Msg ID
	id: ID!
	# Msg topic
	topic: String
	# msg text
	text: String
	# message author
	returnUser: User
	# thread where message belongs to
	thread: String
	# students in the said grade
	delivered: Boolean
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type MessagesConnection {
	totalCount: Int!
	edges: [MessagesEdge]
	pageInfo: PageInfo!
}

type MessagesEdge {
	cursor: ID!
	node: Message
}
`, BuiltIn: false},
	{Name: "graph/schema/type/newsletter.graphqls", Input: `# lesson type ...
type Newsletter {
	# School ID
	id: ID!
	# MainTopic of newsletter
	mainTopic: String
	# subtopic 1
	topicOne: String
	textOne: String
	# subtopic 2
	topicTwo: String
	textTwo: String
	# subtopic 3
	topicThree: String
	textThree: String
	# subtopic 4
	topicFour: String
	textFour: String
	# subtopic 5
	topicFive: String
	textFive: String
	staticFiles: StaticFilesConnection!
	# signed rubberstamp file URI
	rubberStamp: StaticFile!
	# School
	school: School!
	# self-explanatory
	createdAt: Time
}

type NewslettersEdge {
	cursor: ID!
	node: Newsletter
}

type NewsletterConnection {
	totalCount: Int!
	edges: [NewslettersEdge]
	pageInfo: PageInfo!
}
`, BuiltIn: false},
	{Name: "graph/schema/type/page_info.graphqls", Input: `type PageInfo {
    startCursor: ID
    endCursor: ID
    hasNextPage: Boolean!
}`, BuiltIn: false},
	{Name: "graph/schema/type/pass.graphqls", Input: `type Pass {
	# worker of the pass
	worker: Staff
	# uri to the pass
	pass: String
	# self-explanatory
	active: Boolean
	# school where pass belongs
	school: School
}

type PassesConnection {
	totalCount: Int!
	edges: [PassesEdge]
	pageInfo: PageInfo!
}

type PassesEdge {
	cursor: ID!
	node: Pass
}
`, BuiltIn: false},
	{Name: "graph/schema/type/payment.graphqls", Input: `type Payment {
	# pay ID
	id: ID!
	# whether its a debit or credit payment
	paymentype: String
	# service or items being paid
	payingfor: String
	# party receiving the payment
	receiveruser: User
	receiverstudent: Student
	# Amount
	amount: Float
	# Date
	date: String
	# account fee paid to
	account: String
	# student involved
	payee: User
	# payment status entry resolved by payment status id
	status: Status
	# school where the book belongs
	school: School
	# self-explanatory
	createdAt: Time
}

type PaymentsConnection {
	totalCount: Int!
	edges: [PaymentsEdge]
	pageInfo: PageInfo!
}

type PaymentsEdge {
	cursor: ID!
	node: Payment
}
`, BuiltIn: false},
	{Name: "graph/schema/type/product.graphqls", Input: `type Product {
	id: ID!
	# unique product name
	name: String
	# product buying price
	cost: Float
	# quantity received
	quantity: Float
	# email of product supplier supplier
	supplier: Supplier!
	# Category where the product belongs
	category: productCategoryEnum
	# date when product was received
	receivedOn: Time
	# Email of Storekeeper who received the item
	receivedBy: Storekeeper!
	# allowed minimum quantity
	allowedMinimum: Float
	# Product Dispense details
	dispensed: DispensedProductsConnection!
	#school of origin
	school: School!
	# self-explanatory
	createdAt: Time
}

type ProductsConnection {
	totalCount: Int!
	edges: [ProductsEdge]
	pageInfo: PageInfo!
}

type ProductsEdge {
	cursor: ID!
	node: Product
}
`, BuiltIn: false},
	{Name: "graph/schema/type/school.graphqls", Input: `type School { 
	# School ID
	id: ID!
	# School Name
	name: String
	# School motto
	motto: String
	# Logo URL
	assets: String
	# Wired phone connection to the school
	phone: String
	# School electric mail address
	email: String
	# world wide web address of the school
	website: String
	# P.O Box number of the school
	addrPoBox: String
	# Postal-code
	addrPostalCode: String
	# postal town
	addrTown: String
	# county where school is situated
	addrCounty: String
	# country where is school is located
	addrCountry: String
	# All school announcements
	announcements: AnnouncementConnection!
	# ress booth administrators for this school
	administrators: AdminsConnection!
	# school managers
	managers: ManagersConnection!
	# school accountants
	accountants: AccountantsConnection!
	# librarians of said school
	librarians: LibrariansConnection!
	# tutors in this school
	tutors: TutorsConnection!
	# school storekeeper
	storekeepers: StorekeepersConnection!
	# guardians to the students in this school
	guardians: GuardiansConnection!
	# suppliers of school store products
	suppliers: SuppliersConnection!
	# staff of school store products
	staff: StaffConnection!
	# payments to said school
	payments: PaymentsConnection!
	# grades in this school
	grades: GradesConnection!
	# exams posted for this school
	examinations: ExamsConnection!
	# books in this school's library
	books: BooksConnection!
	# products currently available in school store
	store: ProductsConnection!
	# departments in this school
	departments: DepartmentsConnection!
	# timetables of grades in this school
	timetables: TimeTablesConnection!
	# students learning in this school
	students: StudentsConnection!
	# all students currently in school!
	studentsInSchool: StudentinStudentoutConnection!
	# student diaries
	studentDiaries: DiariesConnection!
	# workers in school
	workersInSchool: CheckinCheckoutConnection!
	# visitors book
	visitors: VisitorsConnection!
	# messages sent to the school in threads
	suggestionBox: ThreadsConnection!
	# all lessons from this schoool
	lessons: LessonsConnection!
	# all fee items associated with this school
	fees: FeesConnection!
	# parenting and culture objects related to this school
	cultures: CulturesConnection!
	# periodic newsletters to the entire school fraternity
	newsletters: NewsletterConnection!
	# school's active QR access tags
	passes: PassesConnection!
	# total essenes of users related to this school
	essenes: EssenesConnection!
	# archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# self-explanatory
	createdAt: Time
}

type SchoolConnection {
	totalCount: Int!
	edges: [SchoolEdge]
	pageInfo: PageInfo!
}

type SchoolEdge {
	cursor: ID!
	node: School
}
`, BuiltIn: false},
	{Name: "graph/schema/type/score.graphqls", Input: `# Score type fields
type Score {
	# Fee ID
	id: ID!
	# The actual marks scored
	score: Float
	# student involved
	student: Student!
	# subject of the score
	subject: Subject!
	# exam of the score
	exam: Exam!
	# self-explanatory
	createdAt: Time
}

type ScoresConnection {
	totalCount: Int!
	edges: [ScoresEdge]
	pageInfo: PageInfo!
}

type ScoresEdge {
	cursor: ID!
	node: Score
}
`, BuiltIn: false},
	{Name: "graph/schema/type/search.graphqls", Input: `union SearchResult =
	  Announcement
	| Attendance
	| Book
	| Culture
	| Department
	| Exam
	| Fee
	| Grade
	| Lend
	| Lesson
	| Message
	| Payment
	| Product
	| Score
	| Student
	| Subject
	| TimeTable
	| Topic
	| User
	| Visitor
`, BuiltIn: false},
	{Name: "graph/schema/type/siso.graphqls", Input: `type StudentinStudentout {
	# Msg ID
	id: ID!
	# student and grade involved
	student: Student
	# msg text
	timeIn: Time
	# message author
	inSchool: Boolean
	# thread where message belongs to
	timeOut: Time
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type StudentinStudentoutConnection {
	totalCount: Int!
	edges: [StudentinStudentoutEdge]
	pageInfo: PageInfo!
}

type StudentinStudentoutEdge {
	cursor: ID!
	node: StudentinStudentout
}
`, BuiltIn: false},
	{Name: "graph/schema/type/staff.graphqls", Input: `type Staff {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# products received by this store keeper
	staff: Boolean
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type StaffConnection {
	totalCount: Int!
	edges: [StaffEdge]
	pageInfo: PageInfo!
}

type StaffEdge {
	cursor: ID!
	node: Staff
}
`, BuiltIn: false},
	{Name: "graph/schema/type/static_file.graphqls", Input: `# StaticFile type fields
type StaticFile {
	# esse ID
	id: ID!
	# uri path for the file
	fileURI: String
	# file type can be either lesson or letter
	fileType: String
	# lesson where it belongs
	lesson: Lesson!
	# newsletter where the file belongs
	newsletter: Newsletter!
	# tutor who uploaded it
	uploader: User!
	# self-explanatory
	createdAt: Time
	# school where the essene was created
	school: School!
}

type StaticFilesConnection {
	totalCount: Int!
	edges: [StaticFilesEdge]
	pageInfo: PageInfo!
}

type StaticFilesEdge {
	cursor: ID!
	node: StaticFile
}
`, BuiltIn: false},
	{Name: "graph/schema/type/status.graphqls", Input: `type Status {
	# Id of the student
	id: ID!
	# Name of the student
	balance: Float
	# Nemis ID of the student
	confirmed: Boolean
	# NHIF status
	confirmedOn: Time
	# Birth Certificate Number of the student
	confirmedBy: String
	# time student was entered to RESS
	createdAt: Time
	# school that status belong
	school: School
}

type StatusConnection {
	totalCount: Int!
	edges: [StatusEdge]
	pageInfo: PageInfo!
}

type StatusEdge {
	cursor: ID!
	node: Status
}
`, BuiltIn: false},
	{Name: "graph/schema/type/storekeepre.graphqls", Input: `type Storekeeper {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# products received by this store keeper
	products: ProductsConnection!
	# products dispensed from this storekeeper
	productsDispensed: DispensedProductsConnection!
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type StorekeepersConnection {
	totalCount: Int!
	edges: [StorekeepersEdge]
	pageInfo: PageInfo!
}

type StorekeepersEdge {
	cursor: ID!
	node: Storekeeper
}
`, BuiltIn: false},
	{Name: "graph/schema/type/student.graphqls", Input: `type Student {
	# Id of the student
	id: ID!
	# Name of the student
	name: String
	# Nemis ID of the student
	nemisNo: String
	# NHIF status
	nhifStatus: Boolean
	# Birth Certificate Number of the student
	bCertNo: String
	# Student nick name
	nickName: String
	# date of birth
	dob: Time
	# hobies
	hobies: String
	# role models
	roleModels: String
	# careers in mind
	careers: String
	# personal motto
	motto: String
	# student blood group
	bloodGroup: String
	# self explanatory
	bestFriend: String
	# landuages spoken
	languages: String
	#students favourites
	game: String
	subject: String
	book: String
	quote: String
	animal: String
	device: String
	# student thumbnail
	thumbnail: String
	# time student was entered to RESS
	createdAt: Time
	# All guardians currently watching the student in the system
	guardians: UsersConnection!
	# current grade of the student
	grade: Grade
	# payments to the student fee account
	payments: PaymentsConnection!
	# lesson attendance objects
	attendance: AttendanceConnection!
	# daily role call
	roleCall: StudentinStudentoutConnection!
	# books lent to said student
	lends: LendsConnection!
	# Examination scores of the student
	scores: ScoresConnection!
	# diaries to guradian
	diaries: DiariesConnection!
	# Quick answers
	sharemeal: Boolean
	greetstranger: Boolean
	firstaider: Boolean
	# school object
	school: School
}

type StudentsConnection {
	totalCount: Int!
	edges: [StudentsEdge]
	pageInfo: PageInfo!
}

type StudentsEdge {
	cursor: ID!
	node: Student
}
`, BuiltIn: false},
	{Name: "graph/schema/type/subject.graphqls", Input: `type Subject {
	# School ID
	id: ID!
	# School Name
	name: String
	# department: Department Object
	department: Department!
	# exam scores for said subject
	scores: ScoresConnection!
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type SubjectsConnection {
	totalCount: Int!
	edges: [SubjectsEdge]
	pageInfo: PageInfo!
}

type SubjectsEdge {
	cursor: ID!
	node: Subject
}
`, BuiltIn: false},
	{Name: "graph/schema/type/supplier.graphqls", Input: `type Supplier {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# Products associated to this user
	products: ProductsConnection!
	# all payments occustrated by this user
	payments: PaymentsConnection!
	# visits to school
	visits: VisitorsConnection!
	# school that added supplier to system
	school: School
}

type SuppliersConnection {
	totalCount: Int!
	edges: [SuppliersEdge]
	pageInfo: PageInfo!
}

type SuppliersEdge {
	cursor: ID!
	node: Supplier
}
`, BuiltIn: false},
	{Name: "graph/schema/type/thread.graphqls", Input: `type Thread {
	# Msg ID
	id: ID!
	# new thread?
	new: Boolean
	# messages in this thread
	messages: MessagesConnection!
	# school: School Object
	school: School!
	# self-explanatory
	createdAt: Time
}

type ThreadsConnection {
	totalCount: Int!
	edges: [ThreadsEdge]
	pageInfo: PageInfo!
}

type ThreadsEdge {
	cursor: ID!
	node: Thread
}
`, BuiltIn: false},
	{Name: "graph/schema/type/time.graphqls", Input: `scalar Time`, BuiltIn: false},
	{Name: "graph/schema/type/timeTable.graphqls", Input: `# timeTable type .
type TimeTable {
	# tt ID
	id: ID!
	# day of lesson on calendar
	day: String!
	# in future or in the past
	done: Boolean!
	# lesson involved
	lesson1: Lesson!
	lesson2: Lesson!
	lesson3: Lesson!
	lesson4: Lesson!
	lesson5: Lesson!
	lesson6: Lesson!
	lesson7: Lesson!
	lesson8: Lesson!
	# Grade of said lesson
	grade: Grade!
	# School where the lesson belongs to
	school: School!
	# self-explanatory
	createdAt: Time
}

type TimeTablesConnection {
	totalCount: Int!
	edges: [TimeTablesEdge]
	pageInfo: PageInfo!
}

type TimeTablesEdge {
	cursor: ID!
	node: TimeTable
}
`, BuiltIn: false},
	{Name: "graph/schema/type/topic.graphqls", Input: `type Topic {
	# ID
	id: ID!
	# Strand or topic of the lesson
	strand: String
	# SubStrand or subtopic of the lesson
	subStrand: String
	# expected Outcomes from the lesson
	outComes: String
	# Experiences from the lesson
	experiences: String
	# Inquiries of the lesson
	inquiries: String
	# Competencies to be obtained by student
	competencies: String
	# LifeSkills acquired
	lifeSkills: String
	# ESD DRR of the lesson
	eSDDRR: String
	# Values acquired
	values: String
	# OtherAreas affected
	otherAreas: String
	# CommunityActivities to accompany the lesson
	communityActivities: String
	# NonFormalActivity accompanying the lesson
	nonFormalActivity: String
	# Assessment of the student
	assessment: String
	# SchoolEmail
	school: School
	# CreatedAt
	createdAt: Time
}

type TopicsConnection {
	totalCount: Int!
	edges: [TopicsEdge]
	pageInfo: PageInfo!
}

type TopicsEdge {
	cursor: ID!
	node: Topic
}
`, BuiltIn: false},
	{Name: "graph/schema/type/tutor.graphqls", Input: `type Tutor {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# User gender
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# time table lessons associated with this tutor
	timeTableLessons: LessonsConnection!
	# diaries composed
	diaries: DiariesConnection!
	# personal archives
	archives(objType: archiveTypeEnum): ArchivesConnection!
	# admin checkin-checkout connections
	checkinCheckouts: CheckinCheckoutConnection!
	# QR pass-code
	pass: Pass
	# School ID
	school: School
}

type TutorsConnection {
	totalCount: Int!
	edges: [TutorsEdge]
	pageInfo: PageInfo!
}

type TutorsEdge {
	cursor: ID!
	node: Tutor
}
`, BuiltIn: false},
	{Name: "graph/schema/type/upload.graphqls", Input: `scalar Upload
`, BuiltIn: false},
	{Name: "graph/schema/type/user.graphqls", Input: `type User {
	# Id of the user
	id: ID!
	# Salute before name
	salute: String
	# Both names of the user
	name: String
	# National ID number of the user
	iDno: String
	# NHIF number of the user
	nHIFno: String
	# Cell phone number of the user
	cell: String
	# User electronic mail address
	email: String
	# gender of user
	gender: String
	# User roles
	roles: String
	# if user is SemiFormal Staff member
	semiFormal: Boolean
	# thumbnail uri
	thumbNail: String
	# Post Office Box Number
	addrPoBox: String
	# Postal code
	addrPostalCode: String
	# Residing town
	addrDistrict: String
	# Residing county
	addrCounty: String
	# Nigga nationality
	addrNationality: String
	# User machine IP address
	ipAddress: String
	# Time this user instance was created in RESS
	createdAt: Time
	# Students associated to this user
	students: StudentsConnection!
	# all payments occustrated by this user
	payments(first: Int, after: String): PaymentsConnection!
	# messages to the school
	messages: MessagesConnection!
	# essenes
	essenes: EssenesConnection!
	# School ID
	school: School
}

type UsersConnection {
	totalCount: Int!
	edges: [UsersEdge]
	pageInfo: PageInfo!
}

type UsersEdge {
	cursor: ID!
	node: User
}
`, BuiltIn: false},
	{Name: "graph/schema/type/visitor.graphqls", Input: `type Visitor {
	# Id of visitor
	id: ID!
	# Salute before name
	salute: String
	# Both names of visitor
	name: String
	# National ID number of the user
	iDno: String
	# Visitor's cell
	cell: String
	# Visitor's email
	email: String
	# Office to visit
	visiting: String
	# Purpose of visit
	purpose: String
	# Vehicle visitor is with if any
	vehicle: String
	# Other belongings to be noted
	belongings: String
	# Time in
	timeIn: Time
	# Of course hatalala
	timeOut: Time
	# Thumb scan as sugnature
	thumbScan: String
	# How many times visitor has signed this book
	visitingFreq: Float
	# Time this user instance was created in RESS
	authorizedBy: Admin!
	# School gate man incharge
	createdAt: Time
	# School ID
	school: School
}

type VisitorsConnection {
	totalCount: Int!
	edges: [VisitorsEdge]
	pageInfo: PageInfo!
}

type VisitorsEdge {
	cursor: ID!
	node: Visitor
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Accountant_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Admin_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Grade_students_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	return args, nil
}

func (ec *executionContext) field_Guardian_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Librarian_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Manager_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_AddExam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg1
	var arg2 model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg2, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_AddFee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg0, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["year"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["year"] = arg1
	var arg2 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg2, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["semester"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semester"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["semester"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_AddProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 float64
	if tmp, ok := rawArgs["Cost"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Cost"))
		arg1, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Cost"] = arg1
	var arg2 float64
	if tmp, ok := rawArgs["Quantity"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
		arg2, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Quantity"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["Supplier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Supplier"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Supplier"] = arg3
	var arg4 model.ProductCategoryEnum
	if tmp, ok := rawArgs["Category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
		arg4, err = ec.unmarshalNproductCategoryEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Category"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["ReceivedOn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReceivedOn"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ReceivedOn"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["ReceivedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReceivedBy"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ReceivedBy"] = arg6
	var arg7 float64
	if tmp, ok := rawArgs["AllowedMinimum"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AllowedMinimum"))
		arg7, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AllowedMinimum"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_AddRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userEmail"] = arg0
	var arg1 model.RolesEnum
	if tmp, ok := rawArgs["roleName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleName"))
		arg1, err = ec.unmarshalNrolesEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_AddScore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := rawArgs["score"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
		arg0, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["studentNemis"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentNemis"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentNemis"] = arg1
	var arg2 model.SubjectEnum
	if tmp, ok := rawArgs["subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
		arg2, err = ec.unmarshalNsubjectEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subject"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["examID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examID"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["examID"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_AddStudentGuardian_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["studentNemis"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentNemis"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentNemis"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["guardianEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("guardianEmail"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["guardianEmail"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_AddTimeTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Day"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Day"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Lesson1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson1"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson1"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["Lesson2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson2"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson2"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["Lesson3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson3"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson3"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["Lesson4"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson4"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson4"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["Lesson5"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson5"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson5"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["Lesson6"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson6"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson6"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["Lesson7"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson7"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson7"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["Lesson8"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lesson8"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lesson8"] = arg8
	var arg9 model.GradeEnum
	if tmp, ok := rawArgs["Grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Grade"))
		arg9, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Grade"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg10
	return args, nil
}

func (ec *executionContext) field_Mutation_AddTopic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lesson"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["strand"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strand"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["strand"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["subStrand"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subStrand"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subStrand"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["outComes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outComes"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["outComes"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["experiences"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("experiences"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["experiences"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["inquiries"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inquiries"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inquiries"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["competencies"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competencies"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["competencies"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["lifeSkills"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lifeSkills"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lifeSkills"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["ESDDRR"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ESDDRR"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ESDDRR"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["values"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
		arg9, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["values"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["otherAreas"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherAreas"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otherAreas"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["communityActivities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityActivities"))
		arg11, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityActivities"] = arg11
	var arg12 string
	if tmp, ok := rawArgs["nonFormalActivity"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFormalActivity"))
		arg12, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nonFormalActivity"] = arg12
	var arg13 string
	if tmp, ok := rawArgs["assessment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment"))
		arg13, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["assessment"] = arg13
	var arg14 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg14, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg14
	return args, nil
}

func (ec *executionContext) field_Mutation_AttendLesson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nemisID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nemisID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nemisID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["lessonID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessonID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lessonID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_ConfirmLessonAttended_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["attendanceID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attendanceID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attendanceID"] = arg0
	var arg1 graphql.Upload
	if tmp, ok := rawArgs["StudentGIF"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StudentGIF"))
		arg1, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["StudentGIF"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_ConfirmPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["PayID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PayID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["PayID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DelAnnounceUserConn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DelAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["announcementID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announcementID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["announcementID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelAttendance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["attendanceID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attendanceID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attendanceID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelBook_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["bookID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bookID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bookID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelCico_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["cicoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cicoID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cicoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deptID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deptID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deptID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["diaryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diaryID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["diaryID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelDispensedProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["disProductID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disProductID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["disProductID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelEssene_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["esseneID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("esseneID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["esseneID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DelExam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["examID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["examID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelFee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["feeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feeID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["feeID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gradeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gradeID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelLend_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lendID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lendID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lendID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelLesson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lssnID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lssnID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lssnID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msgID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msgID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelParentingCulture_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ParentingCultureID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ParentingCultureID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ParentingCultureID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["prodID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prodID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["prodID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["schoolID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DelScore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scoreID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scoreID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scoreID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelSiso_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["sisoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sisoID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sisoID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelStudent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nemisID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nemisID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nemisID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelSubject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subjectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subjectID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelThread_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["threadID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("threadID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["threadID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DelTimeTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ttableID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ttableID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ttableID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelUserDiaryConn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DelUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userEmail"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DelVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["visitorID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitorID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitorID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DeletedByName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["DeletedByMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeletedByMail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DeletedByMail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_DispenseProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Category"] = arg1
	var arg2 float64
	if tmp, ok := rawArgs["Quantity"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
		arg2, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Quantity"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["DispenseTo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DispenseTo"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DispenseTo"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["DispensedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DispensedBy"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DispensedBy"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_LendOut_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["bookIsbn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bookIsbn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bookIsbn"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["received_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("received_on"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["received_on"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["due_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("due_on"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["due_on"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["student"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("student"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["student"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["librarian"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("librarian"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["librarian"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_NewCulture_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Title"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Title"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Instructions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Instructions"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Instructions"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["Story"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Story"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Story"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["Quiz"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quiz"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Quiz"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["Lessons"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Lessons"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Lessons"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["Culture"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Culture"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Culture"] = arg5
	var arg6 model.GradeEnum
	if tmp, ok := rawArgs["Grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Grade"))
		arg6, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Grade"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_NewDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["TutorRemarks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TutorRemarks"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["TutorRemarks"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Student"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Student"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Student"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["SchoolRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolRequest"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolRequest"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["TutorMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TutorMail"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["TutorMail"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_NewEssene_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["UserMail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UserMail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UserMail"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_NewPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PaymentTypeEnum
	if tmp, ok := rawArgs["paytype"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paytype"))
		arg0, err = ec.unmarshalNpaymentTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paytype"] = arg0
	var arg1 model.PaymentForEnum
	if tmp, ok := rawArgs["payFor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payFor"))
		arg1, err = ec.unmarshalNpaymentForEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payFor"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["receiver"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiver"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receiver"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg4
	var arg5 model.AccEnum
	if tmp, ok := rawArgs["account"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
		arg5, err = ec.unmarshalNaccEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["account"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["payeemail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payeemail"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payeemail"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_PromoteStudent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GradeEnum
	if tmp, ok := rawArgs["Grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Grade"))
		arg0, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Grade"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["StudentNemisID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StudentNemisID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["StudentNemisID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_ReadAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["AnnounceID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AnnounceID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AnnounceID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["User"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("User"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["User"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["Read"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Read"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Read"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_ReceiveBook_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lendId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lendId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lendId"] = arg0
	var arg1 model.ConditionEnum
	if tmp, ok := rawArgs["condition"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
		arg1, err = ec.unmarshalNconditionEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐConditionEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["condition"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RestoreRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userEmail"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_SendAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Topic"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Topic"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Topic"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["By"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("By"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["By"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["Message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Message"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Message"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_SendMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Topic"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Topic"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Topic"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Text"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["User"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("User"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["User"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["Thread"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Thread"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Thread"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["School"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("School"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["School"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_ViewDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["GuardianEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GuardianEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["GuardianEmail"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["DiaryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DiaryID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["DiaryID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_VisitorCheckout_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["visitorID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitorID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitorID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addBook_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["isbn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isbn"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isbn"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["authors"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authors"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authors"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["revision"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("revision"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["revision"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_addDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeptEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNdeptEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["hod"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hod"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hod"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	var arg1 model.FileTypeEnum
	if tmp, ok := rawArgs["fileType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileType"))
		arg1, err = ec.unmarshalNfileTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐFileTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fileType"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["requiredByID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredByID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requiredByID"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["uploader"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uploader"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["uploader"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["fileURI"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileURI"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fileURI"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_addGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GradeEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["stream"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stream"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stream"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["classTeacher"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classTeacher"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["classTeacher"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["motto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("motto"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["motto"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_addLesson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg1
	var arg2 model.PeriodEnum
	if tmp, ok := rawArgs["timeDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeDate"))
		arg2, err = ec.unmarshalNperiodEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeDate"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["tutorEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tutorEmail"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tutorEmail"] = arg3
	var arg4 model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg4, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg4
	var arg5 model.SubjectEnum
	if tmp, ok := rawArgs["subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
		arg5, err = ec.unmarshalNsubjectEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subject"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["start"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["stop"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stop"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stop"] = arg7
	var arg8 float64
	if tmp, ok := rawArgs["duration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
		arg8, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["duration"] = arg8
	var arg9 bool
	if tmp, ok := rawArgs["done"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("done"))
		arg9, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["done"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["remarks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remarks"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg11, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg11
	return args, nil
}

func (ec *executionContext) field_Mutation_addSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["motto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("motto"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["motto"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["website"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["website"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["addrPoBox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrPoBox"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrPoBox"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["addrPostalCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrPostalCode"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrPostalCode"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["addrTown"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrTown"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrTown"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["addrCounty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrCounty"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrCounty"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["addrCountry"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrCountry"))
		arg9, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrCountry"] = arg9
	return args, nil
}

func (ec *executionContext) field_Mutation_addStudent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nemisNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nemisNo"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nemisNo"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["nhifStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nhifStatus"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nhifStatus"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["bCertNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bCertNo"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bCertNo"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["nickName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nickName"] = arg4
	var arg5 time.Time
	if tmp, ok := rawArgs["dob"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
		arg5, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dob"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["hoby1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby1"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby1"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["hoby2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby2"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby2"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["hoby3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby3"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby3"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["roleModel1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel1"))
		arg9, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel1"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["roleModel2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel2"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel2"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["roleModel3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel3"))
		arg11, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel3"] = arg11
	var arg12 string
	if tmp, ok := rawArgs["career1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career1"))
		arg12, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career1"] = arg12
	var arg13 string
	if tmp, ok := rawArgs["career2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career2"))
		arg13, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career2"] = arg13
	var arg14 string
	if tmp, ok := rawArgs["career3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career3"))
		arg14, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career3"] = arg14
	var arg15 string
	if tmp, ok := rawArgs["Motto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Motto"))
		arg15, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Motto"] = arg15
	var arg16 string
	if tmp, ok := rawArgs["BloodGroup"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BloodGroup"))
		arg16, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["BloodGroup"] = arg16
	var arg17 string
	if tmp, ok := rawArgs["BestFriend"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BestFriend"))
		arg17, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["BestFriend"] = arg17
	var arg18 string
	if tmp, ok := rawArgs["language1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language1"))
		arg18, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language1"] = arg18
	var arg19 string
	if tmp, ok := rawArgs["language2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language2"))
		arg19, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language2"] = arg19
	var arg20 string
	if tmp, ok := rawArgs["language3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language3"))
		arg20, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language3"] = arg20
	var arg21 string
	if tmp, ok := rawArgs["Game"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Game"))
		arg21, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Game"] = arg21
	var arg22 string
	if tmp, ok := rawArgs["Subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
		arg22, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Subject"] = arg22
	var arg23 string
	if tmp, ok := rawArgs["Book"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Book"))
		arg23, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Book"] = arg23
	var arg24 string
	if tmp, ok := rawArgs["Quote"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quote"))
		arg24, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Quote"] = arg24
	var arg25 string
	if tmp, ok := rawArgs["Animal"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Animal"))
		arg25, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Animal"] = arg25
	var arg26 string
	if tmp, ok := rawArgs["Device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Device"))
		arg26, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Device"] = arg26
	var arg27 model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg27, err = ec.unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg27
	var arg28 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg28, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg28
	var arg29 string
	if tmp, ok := rawArgs["parent"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
		arg29, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parent"] = arg29
	var arg30 float64
	if tmp, ok := rawArgs["fees"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fees"))
		arg30, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fees"] = arg30
	var arg31 bool
	if tmp, ok := rawArgs["sharemeal"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sharemeal"))
		arg31, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sharemeal"] = arg31
	var arg32 bool
	if tmp, ok := rawArgs["greetstranger"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greetstranger"))
		arg32, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["greetstranger"] = arg32
	var arg33 bool
	if tmp, ok := rawArgs["firstaider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstaider"))
		arg33, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["firstaider"] = arg33
	return args, nil
}

func (ec *executionContext) field_Mutation_addSubject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SubjectEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNsubjectEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 model.DeptEnum
	if tmp, ok := rawArgs["department"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
		arg1, err = ec.unmarshalNdeptEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	var arg2 model.SaluteEnum
	if tmp, ok := rawArgs["salute"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salute"))
		arg2, err = ec.unmarshalNsaluteEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["salute"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["IDno"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IDno"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IDno"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["NHIFno"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NHIFno"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["NHIFno"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["cell"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cell"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cell"] = arg6
	var arg7 model.GenderEnum
	if tmp, ok := rawArgs["gender"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
		arg7, err = ec.unmarshalNgenderEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGenderEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gender"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["addr_poBox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr_poBox"))
		arg9, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr_poBox"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["addr_postalCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr_postalCode"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr_postalCode"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["addr_district"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr_district"))
		arg11, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr_district"] = arg11
	var arg12 string
	if tmp, ok := rawArgs["addr_county"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr_county"))
		arg12, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr_county"] = arg12
	var arg13 string
	if tmp, ok := rawArgs["addr_nationality"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr_nationality"))
		arg13, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr_nationality"] = arg13
	return args, nil
}

func (ec *executionContext) field_Mutation_editAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["announcementID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announcementID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["announcementID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["topic"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["announcerEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announcerEmail"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["announcerEmail"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_editBook_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["bookID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bookID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bookID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["isbn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isbn"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isbn"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["authors"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authors"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authors"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["revision"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("revision"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["revision"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editCulture_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ParentingCultureID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ParentingCultureID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ParentingCultureID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["storyTitle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storyTitle"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["storyTitle"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["instructions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instructions"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["instructions"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["story"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("story"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["story"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["quiz"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quiz"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quiz"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["lessonsLearnt"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessonsLearnt"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lessonsLearnt"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["cultureTaught"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cultureTaught"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cultureTaught"] = arg6
	var arg7 *model.GradeEnum
	if tmp, ok := rawArgs["gradeToReceive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeToReceive"))
		arg7, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gradeToReceive"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_editDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deptID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deptID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deptID"] = arg0
	var arg1 *model.DeptEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOdeptEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["hodEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hodEmail"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hodEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_editDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["diaryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diaryID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["diaryID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["remarks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remarks"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["studentNemis"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentNemis"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentNemis"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["request"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("request"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["request"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["tutorEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tutorEmail"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tutorEmail"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editDispensedProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["disProductID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disProductID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["disProductID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["productName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productName"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["quantity"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quantity"] = arg2
	var arg3 *model.ProductCategoryEnum
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg3, err = ec.unmarshalOproductCategoryEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["dispensedTo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispensedTo"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispensedTo"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["dispensedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispensedBy"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispensedBy"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_editExam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["examID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["examID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 *model.GradeEnum
	if tmp, ok := rawArgs["gradeName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeName"))
		arg3, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gradeName"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_editFee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["feeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feeID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["feeID"] = arg0
	var arg1 *model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg1, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["year"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["year"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg3
	var arg4 *model.SenesterEnum
	if tmp, ok := rawArgs["semester"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semester"))
		arg4, err = ec.unmarshalOsenesterEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSenesterEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["semester"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gradeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gradeID"] = arg0
	var arg1 *model.GradeEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["stream"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stream"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stream"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["classTeacher"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classTeacher"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["classTeacher"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["gradeMotto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeMotto"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gradeMotto"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editLesson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lssnID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lssnID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lssnID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 *model.PeriodEnum
	if tmp, ok := rawArgs["timedate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timedate"))
		arg3, err = ec.unmarshalOperiodEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timedate"] = arg3
	var arg4 *model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg4, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg4
	var arg5 *model.SubjectEnum
	if tmp, ok := rawArgs["subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
		arg5, err = ec.unmarshalOsubjectEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subject"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["start"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["start"] = arg6
	var arg7 *time.Time
	if tmp, ok := rawArgs["stop"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stop"))
		arg7, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stop"] = arg7
	var arg8 *float64
	if tmp, ok := rawArgs["duration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
		arg8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["duration"] = arg8
	var arg9 *bool
	if tmp, ok := rawArgs["done"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("done"))
		arg9, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["done"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["remarks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remarks"] = arg10
	var arg11 *string
	if tmp, ok := rawArgs["tutorEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tutorEmail"))
		arg11, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tutorEmail"] = arg11
	return args, nil
}

func (ec *executionContext) field_Mutation_editMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msgID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msgID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msgID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["topic"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["text"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["userEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userEmail"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["threadID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("threadID"))
		arg4, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["threadID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editNewsletter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["newsletterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newsletterID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newsletterID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["mainTopic"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainTopic"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainTopic"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["topicOne"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicOne"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topicOne"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["textOne"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textOne"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["textOne"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["topicTwo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicTwo"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topicTwo"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["textTwo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textTwo"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["textTwo"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["topicThree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicThree"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topicThree"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["textThree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textThree"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["textThree"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["topicFour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicFour"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topicFour"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["textFour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textFour"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["textFour"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["topicFive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicFive"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topicFive"] = arg10
	var arg11 *string
	if tmp, ok := rawArgs["textFive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textFive"))
		arg11, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["textFive"] = arg11
	var arg12 *string
	if tmp, ok := rawArgs["rubberStampURL"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rubberStampURL"))
		arg12, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rubberStampURL"] = arg12
	return args, nil
}

func (ec *executionContext) field_Mutation_editPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payID"] = arg0
	var arg1 *model.PaymentTypeEnum
	if tmp, ok := rawArgs["paymentType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentType"))
		arg1, err = ec.unmarshalOpaymentTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paymentType"] = arg1
	var arg2 *model.PaymentForEnum
	if tmp, ok := rawArgs["payingFor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payingFor"))
		arg2, err = ec.unmarshalOpaymentForEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payingFor"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["receiverEmailNemisid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverEmailNemisid"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receiverEmailNemisid"] = arg3
	var arg4 *float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg4
	var arg5 *time.Time
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg5, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg5
	var arg6 *model.AccEnum
	if tmp, ok := rawArgs["account"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
		arg6, err = ec.unmarshalOaccEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["account"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["payeeEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payeeEmail"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payeeEmail"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_editProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["prodID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prodID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["prodID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["cost"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cost"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["quantity"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
		arg3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quantity"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["supplier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supplier"] = arg4
	var arg5 *model.ProductCategoryEnum
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg5, err = ec.unmarshalOproductCategoryEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["receivedOn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivedOn"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receivedOn"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["receivedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receivedBy"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["receivedBy"] = arg7
	var arg8 *float64
	if tmp, ok := rawArgs["minimumQty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minimumQty"))
		arg8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["minimumQty"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_editSchool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["schoolID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["motto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("motto"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["motto"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["website"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["website"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["poBox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poBox"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["poBox"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["poCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poCode"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["poCode"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["district"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["district"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["county"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["county"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["country"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["country"] = arg10
	return args, nil
}

func (ec *executionContext) field_Mutation_editScore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scoreID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scoreID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scoreID"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["score"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["studentNemisID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentNemisID"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentNemisID"] = arg2
	var arg3 *model.SubjectEnum
	if tmp, ok := rawArgs["subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
		arg3, err = ec.unmarshalOsubjectEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subject"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["examID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examID"))
		arg4, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["examID"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editStudent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["stdID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stdID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stdID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["nemisNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nemisNo"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nemisNo"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["nhif"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nhif"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nhif"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["bCertNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bCertNo"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bCertNo"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["nickName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nickName"] = arg5
	var arg6 *time.Time
	if tmp, ok := rawArgs["dateOfBirth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
		arg6, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dateOfBirth"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["hoby1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby1"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby1"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["hoby2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby2"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby2"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["hoby3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hoby3"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hoby3"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["roleModel1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel1"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel1"] = arg10
	var arg11 *string
	if tmp, ok := rawArgs["roleModel2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel2"))
		arg11, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel2"] = arg11
	var arg12 *string
	if tmp, ok := rawArgs["roleModel3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleModel3"))
		arg12, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleModel3"] = arg12
	var arg13 *string
	if tmp, ok := rawArgs["career1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career1"))
		arg13, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career1"] = arg13
	var arg14 *string
	if tmp, ok := rawArgs["career2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career2"))
		arg14, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career2"] = arg14
	var arg15 *string
	if tmp, ok := rawArgs["career3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career3"))
		arg15, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["career3"] = arg15
	var arg16 *string
	if tmp, ok := rawArgs["personalMotto"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("personalMotto"))
		arg16, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["personalMotto"] = arg16
	var arg17 *string
	if tmp, ok := rawArgs["bloodGroup"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bloodGroup"))
		arg17, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bloodGroup"] = arg17
	var arg18 *string
	if tmp, ok := rawArgs["bestFriend"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bestFriend"))
		arg18, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bestFriend"] = arg18
	var arg19 *string
	if tmp, ok := rawArgs["language1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language1"))
		arg19, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language1"] = arg19
	var arg20 *string
	if tmp, ok := rawArgs["language2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language2"))
		arg20, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language2"] = arg20
	var arg21 *string
	if tmp, ok := rawArgs["language3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language3"))
		arg21, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language3"] = arg21
	var arg22 *string
	if tmp, ok := rawArgs["quickAnswer1"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quickAnswer1"))
		arg22, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quickAnswer1"] = arg22
	var arg23 *string
	if tmp, ok := rawArgs["quickAnswer2"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quickAnswer2"))
		arg23, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quickAnswer2"] = arg23
	var arg24 *string
	if tmp, ok := rawArgs["quickAnswer3"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quickAnswer3"))
		arg24, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quickAnswer3"] = arg24
	var arg25 *string
	if tmp, ok := rawArgs["favGame"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favGame"))
		arg25, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favGame"] = arg25
	var arg26 *string
	if tmp, ok := rawArgs["favSubject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favSubject"))
		arg26, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favSubject"] = arg26
	var arg27 *string
	if tmp, ok := rawArgs["favBook"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favBook"))
		arg27, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favBook"] = arg27
	var arg28 *string
	if tmp, ok := rawArgs["favQuote"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favQuote"))
		arg28, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favQuote"] = arg28
	var arg29 *string
	if tmp, ok := rawArgs["favAnimal"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favAnimal"))
		arg29, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favAnimal"] = arg29
	var arg30 *string
	if tmp, ok := rawArgs["favAnimation"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favAnimation"))
		arg30, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favAnimation"] = arg30
	var arg31 *string
	if tmp, ok := rawArgs["favDevice"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favDevice"))
		arg31, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["favDevice"] = arg31
	return args, nil
}

func (ec *executionContext) field_Mutation_editSubject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subjectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subjectID"] = arg0
	var arg1 *model.SubjectEnum
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOsubjectEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 *model.DeptEnum
	if tmp, ok := rawArgs["departmentName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentName"))
		arg2, err = ec.unmarshalOdeptEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["departmentName"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["weeklyLessons"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weeklyLessons"))
		arg3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["weeklyLessons"] = arg3
	var arg4 *float64
	if tmp, ok := rawArgs["lessonDuration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessonDuration"))
		arg4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lessonDuration"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_editTimeTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ttableID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ttableID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ttableID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["day"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["done"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("done"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["done"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["lesson1ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson1ID"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson1ID"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["lesson2ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson2ID"))
		arg4, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson2ID"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["lesson3ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson3ID"))
		arg5, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson3ID"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["lesson4ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson4ID"))
		arg6, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson4ID"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["lesson5ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson5ID"))
		arg7, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson5ID"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["lesson6ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson6ID"))
		arg8, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson6ID"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["lesson7ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson7ID"))
		arg9, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson7ID"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["lesson8ID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lesson8ID"))
		arg10, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lesson8ID"] = arg10
	var arg11 *model.GradeEnum
	if tmp, ok := rawArgs["grade"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
		arg11, err = ec.unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["grade"] = arg11
	return args, nil
}

func (ec *executionContext) field_Mutation_editUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 *model.SaluteEnum
	if tmp, ok := rawArgs["salute"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salute"))
		arg1, err = ec.unmarshalOsaluteEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["salute"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["iDNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iDNo"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["iDNo"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["nhifNo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nhifNo"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nhifNo"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["cell"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cell"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cell"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["poBox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poBox"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["poBox"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["poCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poCode"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["poCode"] = arg9
	var arg10 *string
	if tmp, ok := rawArgs["district"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
		arg10, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["district"] = arg10
	var arg11 *string
	if tmp, ok := rawArgs["county"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county"))
		arg11, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["county"] = arg11
	var arg12 *string
	if tmp, ok := rawArgs["nationality"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
		arg12, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nationality"] = arg12
	var arg13 *model.RolesEnum
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg13, err = ec.unmarshalOrolesEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg13
	return args, nil
}

func (ec *executionContext) field_Mutation_editVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["visitorID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitorID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitorID"] = arg0
	var arg1 *model.SaluteEnum
	if tmp, ok := rawArgs["salute"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salute"))
		arg1, err = ec.unmarshalOsaluteEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["salute"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["iDNO"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iDNO"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["iDNO"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["cell"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cell"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cell"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["visitingOffice"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitingOffice"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitingOffice"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["purpose"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purpose"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["purpose"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["vehicle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle"] = arg8
	var arg9 *string
	if tmp, ok := rawArgs["belongings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("belongings"))
		arg9, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["belongings"] = arg9
	var arg10 *time.Time
	if tmp, ok := rawArgs["timeIn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeIn"))
		arg10, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeIn"] = arg10
	var arg11 *time.Time
	if tmp, ok := rawArgs["timeOut"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeOut"))
		arg11, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeOut"] = arg11
	var arg12 *string
	if tmp, ok := rawArgs["thumbScan"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbScan"))
		arg12, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["thumbScan"] = arg12
	var arg13 *float64
	if tmp, ok := rawArgs["visitingFreq"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitingFreq"))
		arg13, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitingFreq"] = arg13
	var arg14 *string
	if tmp, ok := rawArgs["authBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authBy"))
		arg14, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authBy"] = arg14
	return args, nil
}

func (ec *executionContext) field_Mutation_newVisitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Salute"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Salute"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Salute"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["Name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Name"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["IDno"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IDno"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IDno"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["Cell"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Cell"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Cell"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["Email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Email"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["Visiting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Visiting"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Visiting"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["Purpose"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Purpose"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Purpose"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["Vehicle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Vehicle"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Vehicle"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["Belongings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Belongings"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Belongings"] = arg8
	var arg9 float64
	if tmp, ok := rawArgs["VisitingFreq"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VisitingFreq"))
		arg9, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["VisitingFreq"] = arg9
	var arg10 string
	if tmp, ok := rawArgs["AuthorizedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthorizedBy"))
		arg10, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["AuthorizedBy"] = arg10
	var arg11 string
	if tmp, ok := rawArgs["SchoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SchoolEmail"))
		arg11, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SchoolEmail"] = arg11
	return args, nil
}

func (ec *executionContext) field_Mutation_staffCheckin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["workerEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workerEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workerEmail"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["authorizedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorizedBy"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authorizedBy"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_staffCheckout_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["cicoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cicoID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cicoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentCheckin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nemisID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nemisID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nemisID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["schoolEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("schoolEmail"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["schoolEmail"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_studentCheckout_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["sisoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sisoID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sisoID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getQR_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_school_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["text"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_startTimeKeeper_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["school"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("school"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["school"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["clearPasses"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPasses"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clearPasses"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	return args, nil
}

func (ec *executionContext) field_School_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Storekeeper_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tutor_archives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ArchiveTypeEnum
	if tmp, ok := rawArgs["objType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objType"))
		arg0, err = ec.unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objType"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_payments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Accountant_id(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_salute(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_name(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_IDno(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_NHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_cell(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_email(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_gender(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_roles(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_authorizedPayments(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalOPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_archives(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Accountant_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_pass(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Accountant_school(ctx context.Context, field graphql.CollectedField, obj *model.Accountant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Accountant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountantsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.AccountantsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountantsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountantsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.AccountantsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountantsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AccountantsEdge)
	fc.Result = res
	return ec.marshalOAccountantsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountantsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.AccountantsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountantsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountantsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.AccountantsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountantsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountantsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.AccountantsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountantsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Accountant)
	fc.Result = res
	return ec.marshalOAccountant2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountant(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_id(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_salute(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_name(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_cell(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_email(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_gender(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_roles(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_visitors(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visitors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VisitorsConnection)
	fc.Result = res
	return ec.marshalNVisitorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_authorizedWorkers(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedWorkers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_messages(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MessagesConnection)
	fc.Result = res
	return ec.marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_archives(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Admin_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_pass(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Admin_school(ctx context.Context, field graphql.CollectedField, obj *model.Admin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Admin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdminsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.AdminsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdminsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdminsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.AdminsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdminsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AdminsEdge)
	fc.Result = res
	return ec.marshalOAdminsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AdminsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.AdminsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdminsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AdminsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.AdminsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdminsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdminsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.AdminsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdminsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalOAdmin2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_id(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_topic(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_by(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.By, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_message(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_receipients(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receipients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UsersConnection)
	fc.Result = res
	return ec.marshalOUsersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_school(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Announcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.AnnouncementConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnnouncementConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.AnnouncementConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnnouncementConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnnouncementEdge)
	fc.Result = res
	return ec.marshalOAnnouncementEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.AnnouncementConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnnouncementConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.AnnouncementEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnnouncementEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.AnnouncementEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnnouncementEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Announcement)
	fc.Result = res
	return ec.marshalOAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_id(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_type(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field1(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field2(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field3(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field4(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field5(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field6(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field7(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field8(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field9(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field10(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field11(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field11, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field12(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field12, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field13(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field13, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field14(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field14, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field15(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field15, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field16(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field16, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field17(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field17, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field18(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field18, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field19(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field19, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_field20(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field20, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_deletedByName(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_deletedByMail(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByMail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Archive_School(ctx context.Context, field graphql.CollectedField, obj *model.Archive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Archive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchivesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ArchivesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArchivesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchivesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ArchivesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArchivesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ArchivesEdge)
	fc.Result = res
	return ec.marshalOArchivesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchivesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ArchivesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArchivesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchivesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ArchivesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArchivesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ArchivesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ArchivesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArchivesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Archive)
	fc.Result = res
	return ec.marshalOArchive2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchive(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_id(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_student(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_lesson(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_present(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Present, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_confirmed(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_confirmation(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StaticFile)
	fc.Result = res
	return ec.marshalOStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_school(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Attendance_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Attendance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Attendance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AttendanceConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.AttendanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttendanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AttendanceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.AttendanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttendanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttendanceEdge)
	fc.Result = res
	return ec.marshalOAttendanceEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AttendanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.AttendanceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttendanceConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AttendanceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.AttendanceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttendanceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttendanceEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.AttendanceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttendanceEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attendance)
	fc.Result = res
	return ec.marshalOAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_id(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_name(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_isbn(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Isbn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_authors(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_revision(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_lends(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lends, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LendsConnection)
	fc.Result = res
	return ec.marshalNLendsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_school(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Book_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Book) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Book",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BooksConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.BooksConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BooksConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BooksConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.BooksConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BooksConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BooksEdge)
	fc.Result = res
	return ec.marshalOBooksEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _BooksConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.BooksConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BooksConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _BooksEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.BooksEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BooksEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BooksEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.BooksEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BooksEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Book)
	fc.Result = res
	return ec.marshalOBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_id(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_worker(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Worker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_timeIn(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_inSchool(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InSchool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_timeOut(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_authorizedBy(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_school(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckout_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckoutConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckoutConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CheckinCheckoutEdge)
	fc.Result = res
	return ec.marshalOCheckinCheckoutEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckoutConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckoutEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckoutEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckoutEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckinCheckoutEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CheckinCheckoutEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckinCheckoutEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckout)
	fc.Result = res
	return ec.marshalOCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_id(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_title(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_instructions(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_story(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Story, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_quiz(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quiz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_lessons(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lessons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_culture(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Culture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_grade(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_school(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Culture_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Culture) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Culture",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CulturesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.CulturesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CulturesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CulturesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.CulturesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CulturesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CulturesEdge)
	fc.Result = res
	return ec.marshalOCulturesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CulturesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.CulturesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CulturesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CulturesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.CulturesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CulturesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CulturesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.CulturesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CulturesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Culture)
	fc.Result = res
	return ec.marshalOCulture2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulture(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_name(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_hod(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tutor)
	fc.Result = res
	return ec.marshalNTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_subjects(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SubjectsConnection)
	fc.Result = res
	return ec.marshalNSubjectsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_tutors(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tutors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TutorsConnection)
	fc.Result = res
	return ec.marshalNTutorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_school(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DepartmentsEdge)
	fc.Result = res
	return ec.marshalODepartmentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _DiariesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.DiariesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DiariesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DiariesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.DiariesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DiariesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DiariesEdge)
	fc.Result = res
	return ec.marshalODiariesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _DiariesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.DiariesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DiariesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _DiariesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.DiariesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DiariesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DiariesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.DiariesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DiariesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Diary)
	fc.Result = res
	return ec.marshalODiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_id(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_remarks(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_student(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalNStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_request(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Request, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_tutor(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tutor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tutor)
	fc.Result = res
	return ec.marshalNTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_seenBy(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeenBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GuardiansConnection)
	fc.Result = res
	return ec.marshalOGuardiansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_school(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Diary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Diary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Diary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_product(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_quantity(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_category(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ProductCategoryEnum)
	fc.Result = res
	return ec.marshalNproductCategoryEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_dispenseTo(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DispenseTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_dispensedBy(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DispensedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Storekeeper)
	fc.Result = res
	return ec.marshalOStorekeeper2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeeper(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_school(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProduct",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProductsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProductsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DispensedProductsEdge)
	fc.Result = res
	return ec.marshalODispensedProductsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProductsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProductsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProductsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProductsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DispensedProductsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.DispensedProductsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DispensedProductsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DispensedProduct)
	fc.Result = res
	return ec.marshalODispensedProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Essene_id(ctx context.Context, field graphql.CollectedField, obj *model.Essene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Essene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Essene_user(ctx context.Context, field graphql.CollectedField, obj *model.Essene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Essene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Essene_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Essene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Essene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Essene_school(ctx context.Context, field graphql.CollectedField, obj *model.Essene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Essene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _EssenesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.EssenesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EssenesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EssenesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.EssenesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EssenesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EssenesEdge)
	fc.Result = res
	return ec.marshalOEssenesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _EssenesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.EssenesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EssenesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EssenesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.EssenesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EssenesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EssenesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.EssenesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EssenesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Essene)
	fc.Result = res
	return ec.marshalOEssene2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssene(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_id(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_name(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_date(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_grade(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalNGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_scores(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ScoresConnection)
	fc.Result = res
	return ec.marshalNScoresConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Exam_school(ctx context.Context, field graphql.CollectedField, obj *model.Exam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Exam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _ExamsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ExamsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExamsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ExamsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ExamsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExamsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ExamsEdge)
	fc.Result = res
	return ec.marshalOExamsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ExamsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ExamsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExamsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ExamsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ExamsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExamsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExamsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ExamsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExamsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Exam)
	fc.Result = res
	return ec.marshalOExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_id(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_grade(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_year(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_semester(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Semester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_amount(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_school(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Fee_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Fee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FeesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.FeesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FeesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.FeesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FeesEdge)
	fc.Result = res
	return ec.marshalOFeesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FeesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.FeesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FeesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.FeesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FeesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.FeesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Fee)
	fc.Result = res
	return ec.marshalOFee2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFee(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_id(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_name(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_stream(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_classTeacher(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClassTeacher, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tutor)
	fc.Result = res
	return ec.marshalNTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_motto(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Motto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_fees(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FeesConnection)
	fc.Result = res
	return ec.marshalNFeesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_students(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Grade_students_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentsConnection)
	fc.Result = res
	return ec.marshalNStudentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_studentsInClass(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentsInClass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentoutConnection)
	fc.Result = res
	return ec.marshalNStudentinStudentoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_lessons(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lessons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LessonsConnection)
	fc.Result = res
	return ec.marshalNLessonsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_exams(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exams, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ExamsConnection)
	fc.Result = res
	return ec.marshalNExamsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_timeTables(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeTables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TimeTablesConnection)
	fc.Result = res
	return ec.marshalNTimeTablesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_cultures(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cultures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CulturesConnection)
	fc.Result = res
	return ec.marshalNCulturesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_school(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Grade_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GradesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.GradesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GradesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GradesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.GradesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GradesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GradesEdge)
	fc.Result = res
	return ec.marshalOGradesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _GradesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.GradesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GradesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GradesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.GradesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GradesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GradesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.GradesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GradesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_id(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_salute(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_name(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_cell(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_email(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_gender(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_roles(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_students(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentsConnection)
	fc.Result = res
	return ec.marshalNStudentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_payments(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_visits(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VisitorsConnection)
	fc.Result = res
	return ec.marshalNVisitorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_messages(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MessagesConnection)
	fc.Result = res
	return ec.marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_viwedDiaries(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViwedDiaries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiariesConnection)
	fc.Result = res
	return ec.marshalNDiariesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_archives(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Guardian_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Guardian_school(ctx context.Context, field graphql.CollectedField, obj *model.Guardian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Guardian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _GuardiansConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.GuardiansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GuardiansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GuardiansConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.GuardiansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GuardiansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GuardiansEdge)
	fc.Result = res
	return ec.marshalOGuardiansEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _GuardiansConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.GuardiansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GuardiansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GuardiansEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.GuardiansEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GuardiansEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GuardiansEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.GuardiansEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GuardiansEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Guardian)
	fc.Result = res
	return ec.marshalOGuardian2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardian(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_id(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_received_on(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_due_on(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_handed_over_on(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandedOverOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_handed_over(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandedOver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_librarian(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Librarian, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Librarian)
	fc.Result = res
	return ec.marshalOLibrarian2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrarian(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_book(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Book, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Book)
	fc.Result = res
	return ec.marshalOBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_condition(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_student(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_school(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lend_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Lend) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lend",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LendsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.LendsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LendsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LendsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.LendsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LendsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LendsEdge)
	fc.Result = res
	return ec.marshalOLendsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LendsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.LendsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LendsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LendsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.LendsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LendsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LendsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.LendsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LendsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lend)
	fc.Result = res
	return ec.marshalOLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_id(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_name(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_date(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_timeDate(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_start(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_stop(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_duration(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_done(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Done, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_files(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StaticFilesConnection)
	fc.Result = res
	return ec.marshalOStaticFilesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_remarks(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_subject(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subject)
	fc.Result = res
	return ec.marshalOSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_topic(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_tutor(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tutor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_grade(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_school(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lesson_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LessonsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.LessonsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LessonsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LessonsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.LessonsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LessonsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LessonsEdge)
	fc.Result = res
	return ec.marshalOLessonsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LessonsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.LessonsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LessonsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LessonsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.LessonsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LessonsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LessonsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.LessonsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LessonsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_id(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_salute(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_name(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_cell(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_email(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_gender(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_roles(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_lendsAuthorized(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LendsAuthorized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LendsConnection)
	fc.Result = res
	return ec.marshalNLendsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_archives(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Librarian_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_pass(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Librarian_school(ctx context.Context, field graphql.CollectedField, obj *model.Librarian) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Librarian",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _LibrariansConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.LibrariansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LibrariansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LibrariansConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.LibrariansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LibrariansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LibrariansEdge)
	fc.Result = res
	return ec.marshalOLibrariansEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LibrariansConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.LibrariansConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LibrariansConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LibrariansEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.LibrariansEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LibrariansEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LibrariansEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.LibrariansEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LibrariansEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Librarian)
	fc.Result = res
	return ec.marshalOLibrarian2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrarian(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_id(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_salute(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_name(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_cell(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_email(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_gender(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_roles(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_messages(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MessagesConnection)
	fc.Result = res
	return ec.marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_authorizedPayments(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalOPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_archives(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Manager_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_pass(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_school(ctx context.Context, field graphql.CollectedField, obj *model.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagersConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ManagersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagersConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ManagersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ManagersEdge)
	fc.Result = res
	return ec.marshalOManagersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagersConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ManagersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagersEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ManagersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagersEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ManagersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManagersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Manager)
	fc.Result = res
	return ec.marshalOManager2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManager(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_id(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_topic(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_text(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_returnUser(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReturnUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_thread(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thread, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_delivered(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivered, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_school(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Message_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MessagesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.MessagesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessagesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MessagesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.MessagesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessagesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MessagesEdge)
	fc.Result = res
	return ec.marshalOMessagesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _MessagesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.MessagesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessagesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MessagesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.MessagesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessagesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MessagesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.MessagesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MessagesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addFile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFile(rctx, args["file"].(graphql.Upload), args["fileType"].(model.FileTypeEnum), args["requiredByID"].(string), args["uploader"].(string), args["fileURI"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StaticFile)
	fc.Result = res
	return ec.marshalOStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUser(rctx, args["email"].(string), args["password"].(string), args["salute"].(model.SaluteEnum), args["name"].(string), args["IDno"].(string), args["NHIFno"].(string), args["cell"].(string), args["gender"].(model.GenderEnum), args["school"].(string), args["addr_poBox"].(string), args["addr_postalCode"].(string), args["addr_district"].(string), args["addr_county"].(string), args["addr_nationality"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addStudent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddStudent(rctx, args["name"].(string), args["nemisNo"].(string), args["nhifStatus"].(bool), args["bCertNo"].(string), args["nickName"].(string), args["dob"].(time.Time), args["hoby1"].(string), args["hoby2"].(string), args["hoby3"].(string), args["roleModel1"].(string), args["roleModel2"].(string), args["roleModel3"].(string), args["career1"].(string), args["career2"].(string), args["career3"].(string), args["Motto"].(string), args["BloodGroup"].(string), args["BestFriend"].(string), args["language1"].(string), args["language2"].(string), args["language3"].(string), args["Game"].(string), args["Subject"].(string), args["Book"].(string), args["Quote"].(string), args["Animal"].(string), args["Device"].(string), args["grade"].(model.GradeEnum), args["school"].(string), args["parent"].(string), args["fees"].(float64), args["sharemeal"].(bool), args["greetstranger"].(bool), args["firstaider"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSchool_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSchool(rctx, args["name"].(string), args["motto"].(string), args["phone"].(string), args["email"].(string), args["website"].(string), args["addrPoBox"].(string), args["addrPostalCode"].(string), args["addrTown"].(string), args["addrCounty"].(string), args["addrCountry"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddDepartment(rctx, args["name"].(model.DeptEnum), args["hod"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSubject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSubject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSubject(rctx, args["name"].(model.SubjectEnum), args["department"].(model.DeptEnum), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subject)
	fc.Result = res
	return ec.marshalOSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addGrade_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddGrade(rctx, args["name"].(model.GradeEnum), args["stream"].(string), args["classTeacher"].(string), args["motto"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addLesson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddLesson(rctx, args["name"].(string), args["date"].(string), args["timeDate"].(model.PeriodEnum), args["tutorEmail"].(string), args["grade"].(model.GradeEnum), args["subject"].(model.SubjectEnum), args["start"].(string), args["stop"].(string), args["duration"].(float64), args["done"].(bool), args["remarks"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddTopic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTopic(rctx, args["lesson"].(string), args["strand"].(string), args["subStrand"].(string), args["outComes"].(string), args["experiences"].(string), args["inquiries"].(string), args["competencies"].(string), args["lifeSkills"].(string), args["ESDDRR"].(string), args["values"].(string), args["otherAreas"].(string), args["communityActivities"].(string), args["nonFormalActivity"].(string), args["assessment"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addBook(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addBook_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddBook(rctx, args["name"].(string), args["isbn"].(string), args["authors"].(string), args["revision"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Book)
	fc.Result = res
	return ec.marshalOBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_LendOut(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_LendOut_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LendOut(rctx, args["bookIsbn"].(string), args["received_on"].(string), args["due_on"].(string), args["student"].(string), args["librarian"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lend)
	fc.Result = res
	return ec.marshalOLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ReceiveBook(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ReceiveBook_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReceiveBook(rctx, args["lendId"].(string), args["condition"].(model.ConditionEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lend)
	fc.Result = res
	return ec.marshalOLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddFee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddFee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFee(rctx, args["grade"].(model.GradeEnum), args["year"].(string), args["amount"].(float64), args["semester"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Fee)
	fc.Result = res
	return ec.marshalOFee2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFee(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NewPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NewPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewPayment(rctx, args["paytype"].(model.PaymentTypeEnum), args["payFor"].(model.PaymentForEnum), args["receiver"].(string), args["amount"].(float64), args["date"].(string), args["account"].(model.AccEnum), args["payeemail"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddExam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddExam_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddExam(rctx, args["name"].(string), args["date"].(string), args["grade"].(model.GradeEnum), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Exam)
	fc.Result = res
	return ec.marshalOExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddScore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddScore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddScore(rctx, args["score"].(float64), args["studentNemis"].(string), args["subject"].(model.SubjectEnum), args["examID"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Score)
	fc.Result = res
	return ec.marshalOScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddTimeTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddTimeTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTimeTable(rctx, args["Day"].(string), args["Lesson1"].(string), args["Lesson2"].(string), args["Lesson3"].(string), args["Lesson4"].(string), args["Lesson5"].(string), args["Lesson6"].(string), args["Lesson7"].(string), args["Lesson8"].(string), args["Grade"].(model.GradeEnum), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeTable)
	fc.Result = res
	return ec.marshalOTimeTable2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTable(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_newVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_newVisitor_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewVisitor(rctx, args["Salute"].(string), args["Name"].(string), args["IDno"].(string), args["Cell"].(string), args["Email"].(string), args["Visiting"].(string), args["Purpose"].(string), args["Vehicle"].(string), args["Belongings"].(string), args["VisitingFreq"].(float64), args["AuthorizedBy"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalOVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NewDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NewDiary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewDiary(rctx, args["TutorRemarks"].(string), args["Student"].(string), args["SchoolRequest"].(string), args["TutorMail"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Diary)
	fc.Result = res
	return ec.marshalODiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ViewDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ViewDiary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ViewDiary(rctx, args["GuardianEmail"].(string), args["DiaryID"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Diary)
	fc.Result = res
	return ec.marshalODiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddProduct(rctx, args["Name"].(string), args["Cost"].(float64), args["Quantity"].(float64), args["Supplier"].(string), args["Category"].(model.ProductCategoryEnum), args["ReceivedOn"].(string), args["ReceivedBy"].(string), args["AllowedMinimum"].(float64), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DispenseProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DispenseProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DispenseProduct(rctx, args["Name"].(string), args["Category"].(string), args["Quantity"].(float64), args["DispenseTo"].(string), args["DispensedBy"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NewCulture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NewCulture_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewCulture(rctx, args["Title"].(string), args["Instructions"].(string), args["Story"].(string), args["Quiz"].(string), args["Lessons"].(string), args["Culture"].(string), args["Grade"].(model.GradeEnum), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Culture)
	fc.Result = res
	return ec.marshalOCulture2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulture(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NewEssene(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NewEssene_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewEssene(rctx, args["UserMail"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Essene)
	fc.Result = res
	return ec.marshalOEssene2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssene(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studentCheckin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studentCheckin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentCheckin(rctx, args["nemisID"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentout)
	fc.Result = res
	return ec.marshalOStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studentCheckout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studentCheckout_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentCheckout(rctx, args["sisoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentout)
	fc.Result = res
	return ec.marshalOStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_staffCheckin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_staffCheckin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffCheckin(rctx, args["workerEmail"].(string), args["authorizedBy"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckout)
	fc.Result = res
	return ec.marshalOCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_staffCheckout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_staffCheckout_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffCheckout(rctx, args["cicoID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckout)
	fc.Result = res
	return ec.marshalOCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SendAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SendAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendAnnouncement(rctx, args["Topic"].(string), args["By"].(string), args["Message"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Announcement)
	fc.Result = res
	return ec.marshalOAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ReadAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ReadAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReadAnnouncement(rctx, args["AnnounceID"].(string), args["User"].(string), args["Read"].(bool), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Announcement)
	fc.Result = res
	return ec.marshalOAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SendMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SendMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendMessage(rctx, args["Topic"].(string), args["Text"].(string), args["User"].(string), args["Thread"].(string), args["School"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_VisitorCheckout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_VisitorCheckout_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VisitorCheckout(rctx, args["visitorID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalOVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddRole(rctx, args["userEmail"].(string), args["roleName"].(model.RolesEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RestoreRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RestoreRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RestoreRoles(rctx, args["userEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_PromoteStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_PromoteStudent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PromoteStudent(rctx, args["Grade"].(model.GradeEnum), args["StudentNemisID"].(string), args["SchoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConfirmPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ConfirmPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfirmPayment(rctx, args["PayID"].(string), args["Email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConfirmLessonAttended(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ConfirmLessonAttended_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfirmLessonAttended(rctx, args["attendanceID"].(string), args["StudentGIF"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attendance)
	fc.Result = res
	return ec.marshalOAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AttendLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AttendLesson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AttendLesson(rctx, args["nemisID"].(string), args["lessonID"].(string), args["school"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attendance)
	fc.Result = res
	return ec.marshalOAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_AddStudentGuardian(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_AddStudentGuardian_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddStudentGuardian(rctx, args["studentNemis"].(string), args["guardianEmail"].(string), args["schoolEmail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelAnnouncement(rctx, args["announcementID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelAnnounceUserConn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelAnnounceUserConn_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelAnnounceUserConn(rctx, args["connID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelAttendance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelAttendance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelAttendance(rctx, args["attendanceID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelBook(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelBook_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelBook(rctx, args["bookID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelCico(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelCico_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelCico(rctx, args["cicoID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelSiso(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelSiso_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelSiso(rctx, args["sisoID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelParentingCulture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelParentingCulture_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelParentingCulture(rctx, args["ParentingCultureID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelDepartment(rctx, args["deptID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelDiary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelDiary(rctx, args["diaryID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelUserDiaryConn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelUserDiaryConn_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelUserDiaryConn(rctx, args["connID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelDispensedProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelDispensedProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelDispensedProduct(rctx, args["disProductID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelProduct(rctx, args["prodID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelEssene(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelEssene_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelEssene(rctx, args["esseneID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelExam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelExam_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelExam(rctx, args["examID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelFee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelFee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelFee(rctx, args["feeID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelGrade_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelGrade(rctx, args["gradeID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelLend(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelLend_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelLend(rctx, args["lendID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelLesson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelLesson(rctx, args["lssnID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelMessage(rctx, args["msgID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelPayment(rctx, args["payID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelSchool_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelSchool(rctx, args["schoolID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelScore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelScore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelScore(rctx, args["scoreID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelStudent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelStudent(rctx, args["nemisID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelSubject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelSubject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelSubject(rctx, args["subjectID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelThread(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelThread_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelThread(rctx, args["threadID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelTimeTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelTimeTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelTimeTable(rctx, args["ttableID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelUser(rctx, args["userEmail"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DelVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DelVisitor_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DelVisitor(rctx, args["visitorID"].(string), args["DeletedByName"].(string), args["DeletedByMail"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditAnnouncement(rctx, args["announcementID"].(string), args["topic"].(*string), args["announcerEmail"].(*string), args["message"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Announcement)
	fc.Result = res
	return ec.marshalOAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editBook(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editBook_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditBook(rctx, args["bookID"].(string), args["name"].(*string), args["isbn"].(*string), args["authors"].(*string), args["revision"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Book)
	fc.Result = res
	return ec.marshalOBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editCulture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editCulture_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditCulture(rctx, args["ParentingCultureID"].(string), args["storyTitle"].(*string), args["instructions"].(*string), args["story"].(*string), args["quiz"].(*string), args["lessonsLearnt"].(*string), args["cultureTaught"].(*string), args["gradeToReceive"].(*model.GradeEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Culture)
	fc.Result = res
	return ec.marshalOCulture2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulture(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditDepartment(rctx, args["deptID"].(string), args["name"].(*model.DeptEnum), args["hodEmail"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editDiary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditDiary(rctx, args["diaryID"].(string), args["remarks"].(*string), args["studentNemis"].(*string), args["request"].(*string), args["tutorEmail"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Diary)
	fc.Result = res
	return ec.marshalODiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editDispensedProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editDispensedProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditDispensedProduct(rctx, args["disProductID"].(string), args["productName"].(*string), args["quantity"].(*float64), args["category"].(*model.ProductCategoryEnum), args["dispensedTo"].(*string), args["dispensedBy"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DispensedProduct)
	fc.Result = res
	return ec.marshalODispensedProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditProduct(rctx, args["prodID"].(string), args["name"].(*string), args["cost"].(*float64), args["quantity"].(*float64), args["supplier"].(*string), args["category"].(*model.ProductCategoryEnum), args["receivedOn"].(*string), args["receivedBy"].(*string), args["minimumQty"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editExam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editExam_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditExam(rctx, args["examID"].(string), args["name"].(*string), args["date"].(*time.Time), args["gradeName"].(*model.GradeEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Exam)
	fc.Result = res
	return ec.marshalOExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editFee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editFee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditFee(rctx, args["feeID"].(string), args["grade"].(*model.GradeEnum), args["year"].(*string), args["amount"].(*float64), args["semester"].(*model.SenesterEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Fee)
	fc.Result = res
	return ec.marshalOFee2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFee(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editGrade_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditGrade(rctx, args["gradeID"].(string), args["name"].(*model.GradeEnum), args["stream"].(*string), args["classTeacher"].(*string), args["gradeMotto"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editNewsletter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editNewsletter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditNewsletter(rctx, args["newsletterID"].(string), args["mainTopic"].(*string), args["topicOne"].(*string), args["textOne"].(*string), args["topicTwo"].(*string), args["textTwo"].(*string), args["topicThree"].(*string), args["textThree"].(*string), args["topicFour"].(*string), args["textFour"].(*string), args["topicFive"].(*string), args["textFive"].(*string), args["rubberStampURL"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Newsletter)
	fc.Result = res
	return ec.marshalONewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editLesson_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditLesson(rctx, args["lssnID"].(string), args["name"].(*string), args["date"].(*time.Time), args["timedate"].(*model.PeriodEnum), args["grade"].(*model.GradeEnum), args["subject"].(*model.SubjectEnum), args["start"].(*time.Time), args["stop"].(*time.Time), args["duration"].(*float64), args["done"].(*bool), args["remarks"].(*string), args["tutorEmail"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditMessage(rctx, args["msgID"].(string), args["topic"].(*string), args["text"].(*string), args["userEmail"].(*string), args["threadID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditPayment(rctx, args["payID"].(string), args["paymentType"].(*model.PaymentTypeEnum), args["payingFor"].(*model.PaymentForEnum), args["receiverEmailNemisid"].(*string), args["amount"].(*float64), args["date"].(*time.Time), args["account"].(*model.AccEnum), args["payeeEmail"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editSchool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editSchool_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditSchool(rctx, args["schoolID"].(string), args["name"].(*string), args["motto"].(*string), args["phone"].(*string), args["email"].(*string), args["website"].(*string), args["poBox"].(*string), args["poCode"].(*string), args["district"].(*string), args["county"].(*string), args["country"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editScore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editScore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditScore(rctx, args["scoreID"].(string), args["score"].(*float64), args["studentNemisID"].(*string), args["subject"].(*model.SubjectEnum), args["examID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Score)
	fc.Result = res
	return ec.marshalOScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editStudent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditStudent(rctx, args["stdID"].(string), args["name"].(*string), args["nemisNo"].(*string), args["nhif"].(*string), args["bCertNo"].(*string), args["nickName"].(*string), args["dateOfBirth"].(*time.Time), args["hoby1"].(*string), args["hoby2"].(*string), args["hoby3"].(*string), args["roleModel1"].(*string), args["roleModel2"].(*string), args["roleModel3"].(*string), args["career1"].(*string), args["career2"].(*string), args["career3"].(*string), args["personalMotto"].(*string), args["bloodGroup"].(*string), args["bestFriend"].(*string), args["language1"].(*string), args["language2"].(*string), args["language3"].(*string), args["quickAnswer1"].(*string), args["quickAnswer2"].(*string), args["quickAnswer3"].(*string), args["favGame"].(*string), args["favSubject"].(*string), args["favBook"].(*string), args["favQuote"].(*string), args["favAnimal"].(*string), args["favAnimation"].(*string), args["favDevice"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editSubject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editSubject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditSubject(rctx, args["subjectID"].(string), args["name"].(*model.SubjectEnum), args["departmentName"].(*model.DeptEnum), args["weeklyLessons"].(*float64), args["lessonDuration"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subject)
	fc.Result = res
	return ec.marshalOSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editTimeTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editTimeTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditTimeTable(rctx, args["ttableID"].(string), args["day"].(*string), args["done"].(*bool), args["lesson1ID"].(*string), args["lesson2ID"].(*string), args["lesson3ID"].(*string), args["lesson4ID"].(*string), args["lesson5ID"].(*string), args["lesson6ID"].(*string), args["lesson7ID"].(*string), args["lesson8ID"].(*string), args["grade"].(*model.GradeEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeTable)
	fc.Result = res
	return ec.marshalOTimeTable2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTable(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditUser(rctx, args["userID"].(string), args["salute"].(*model.SaluteEnum), args["name"].(*string), args["iDNo"].(*string), args["nhifNo"].(*string), args["cell"].(*string), args["email"].(*string), args["password"].(*string), args["poBox"].(*string), args["poCode"].(*string), args["district"].(*string), args["county"].(*string), args["nationality"].(*string), args["roles"].(*model.RolesEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editVisitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editVisitor_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditVisitor(rctx, args["visitorID"].(string), args["salute"].(*model.SaluteEnum), args["name"].(*string), args["iDNO"].(*string), args["cell"].(*string), args["email"].(*string), args["visitingOffice"].(*string), args["purpose"].(*string), args["vehicle"].(*string), args["belongings"].(*string), args["timeIn"].(*time.Time), args["timeOut"].(*time.Time), args["thumbScan"].(*string), args["visitingFreq"].(*float64), args["authBy"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalOVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_id(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_mainTopic(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainTopic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_topicOne(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_textOne(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_topicTwo(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicTwo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_textTwo(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextTwo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_topicThree(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicThree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_textThree(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextThree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_topicFour(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicFour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_textFour(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextFour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_topicFive(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicFive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_textFive(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextFive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_staticFiles(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaticFiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StaticFilesConnection)
	fc.Result = res
	return ec.marshalNStaticFilesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_rubberStamp(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RubberStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StaticFile)
	fc.Result = res
	return ec.marshalNStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_school(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Newsletter_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Newsletter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Newsletter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewsletterConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.NewsletterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewsletterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NewsletterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.NewsletterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewsletterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.NewslettersEdge)
	fc.Result = res
	return ec.marshalONewslettersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewslettersEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _NewsletterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.NewsletterConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewsletterConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _NewslettersEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.NewslettersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewslettersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewslettersEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.NewslettersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewslettersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Newsletter)
	fc.Result = res
	return ec.marshalONewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pass_worker(ctx context.Context, field graphql.CollectedField, obj *model.Pass) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Pass",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Worker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _Pass_pass(ctx context.Context, field graphql.CollectedField, obj *model.Pass) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Pass",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pass_active(ctx context.Context, field graphql.CollectedField, obj *model.Pass) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Pass",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pass_school(ctx context.Context, field graphql.CollectedField, obj *model.Pass) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Pass",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _PassesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.PassesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PassesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PassesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.PassesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PassesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PassesEdge)
	fc.Result = res
	return ec.marshalOPassesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _PassesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.PassesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PassesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PassesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.PassesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PassesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PassesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.PassesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PassesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_id(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentype(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_payingfor(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payingfor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_receiveruser(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receiveruser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_receiverstudent(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receiverstudent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_amount(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_date(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_account(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_payee(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_status(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_school(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.PaymentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.PaymentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PaymentsEdge)
	fc.Result = res
	return ec.marshalOPaymentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.PaymentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.PaymentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.PaymentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_cost(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_quantity(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_supplier(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_category(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductCategoryEnum)
	fc.Result = res
	return ec.marshalOproductCategoryEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_receivedOn(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_receivedBy(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Storekeeper)
	fc.Result = res
	return ec.marshalNStorekeeper2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeeper(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_allowedMinimum(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedMinimum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_dispensed(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dispensed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DispensedProductsConnection)
	fc.Result = res
	return ec.marshalNDispensedProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_school(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductsEdge)
	fc.Result = res
	return ec.marshalOProductsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ProductsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ProductsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_search(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_search_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Search(rctx, args["text"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SearchResult)
	fc.Result = res
	return ec.marshalNSearchResult2ᚕkanmaaᚑbackendᚋgraphᚋmodelᚐSearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_school(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_school_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().School(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_startTimeKeeper(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_startTimeKeeper_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StartTimeKeeper(rctx, args["school"].(string), args["clearPasses"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getQR(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getQR_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetQr(rctx, args["email"].(string), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["first"].(*int), args["after"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UsersConnection)
	fc.Result = res
	return ec.marshalNUsersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _School_id(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _School_name(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_motto(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Motto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_assets(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_phone(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_email(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_website(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_addrTown(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrTown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_addrCountry(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _School_announcements(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Announcements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AnnouncementConnection)
	fc.Result = res
	return ec.marshalNAnnouncementConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_administrators(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Administrators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdminsConnection)
	fc.Result = res
	return ec.marshalNAdminsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_managers(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Managers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ManagersConnection)
	fc.Result = res
	return ec.marshalNManagersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_accountants(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Accountants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccountantsConnection)
	fc.Result = res
	return ec.marshalNAccountantsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_librarians(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Librarians, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LibrariansConnection)
	fc.Result = res
	return ec.marshalNLibrariansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_tutors(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tutors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TutorsConnection)
	fc.Result = res
	return ec.marshalNTutorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_storekeepers(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storekeepers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorekeepersConnection)
	fc.Result = res
	return ec.marshalNStorekeepersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_guardians(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Guardians, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GuardiansConnection)
	fc.Result = res
	return ec.marshalNGuardiansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_suppliers(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppliers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SuppliersConnection)
	fc.Result = res
	return ec.marshalNSuppliersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_staff(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Staff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StaffConnection)
	fc.Result = res
	return ec.marshalNStaffConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_payments(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_grades(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GradesConnection)
	fc.Result = res
	return ec.marshalNGradesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_examinations(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Examinations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ExamsConnection)
	fc.Result = res
	return ec.marshalNExamsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_books(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Books, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BooksConnection)
	fc.Result = res
	return ec.marshalNBooksConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_store(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Store, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductsConnection)
	fc.Result = res
	return ec.marshalNProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_departments(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Departments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentsConnection)
	fc.Result = res
	return ec.marshalNDepartmentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_timetables(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timetables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TimeTablesConnection)
	fc.Result = res
	return ec.marshalNTimeTablesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_students(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentsConnection)
	fc.Result = res
	return ec.marshalNStudentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_studentsInSchool(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentsInSchool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentoutConnection)
	fc.Result = res
	return ec.marshalNStudentinStudentoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_studentDiaries(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentDiaries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiariesConnection)
	fc.Result = res
	return ec.marshalNDiariesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_workersInSchool(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkersInSchool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_visitors(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visitors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VisitorsConnection)
	fc.Result = res
	return ec.marshalNVisitorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_suggestionBox(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuggestionBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ThreadsConnection)
	fc.Result = res
	return ec.marshalNThreadsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_lessons(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lessons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LessonsConnection)
	fc.Result = res
	return ec.marshalNLessonsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_fees(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FeesConnection)
	fc.Result = res
	return ec.marshalNFeesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_cultures(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cultures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CulturesConnection)
	fc.Result = res
	return ec.marshalNCulturesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_newsletters(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Newsletters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewsletterConnection)
	fc.Result = res
	return ec.marshalNNewsletterConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_passes(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PassesConnection)
	fc.Result = res
	return ec.marshalNPassesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_essenes(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Essenes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EssenesConnection)
	fc.Result = res
	return ec.marshalNEssenesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_archives(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_School_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _School_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.School) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "School",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SchoolConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SchoolConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SchoolConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SchoolConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SchoolConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SchoolConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SchoolEdge)
	fc.Result = res
	return ec.marshalOSchoolEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchoolEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _SchoolConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SchoolConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SchoolConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SchoolEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SchoolEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SchoolEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SchoolEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SchoolEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SchoolEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_id(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_score(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_student(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalNStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_subject(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Subject)
	fc.Result = res
	return ec.marshalNSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_exam(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Exam)
	fc.Result = res
	return ec.marshalNExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ScoresConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ScoresConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScoresConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ScoresConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ScoresConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScoresConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ScoresEdge)
	fc.Result = res
	return ec.marshalOScoresEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ScoresConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ScoresConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScoresConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ScoresEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ScoresEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScoresEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ScoresEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ScoresEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScoresEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Score)
	fc.Result = res
	return ec.marshalOScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_id(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_salute(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_name(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_cell(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_email(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_roles(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_staff(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Staff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_pass(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Staff_school(ctx context.Context, field graphql.CollectedField, obj *model.Staff) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StaffConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaffConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StaffConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaffConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StaffEdge)
	fc.Result = res
	return ec.marshalOStaffEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StaffConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaffConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StaffEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaffEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StaffEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaffEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_id(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_fileURI(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_fileType(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_lesson(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_newsletter(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Newsletter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Newsletter)
	fc.Result = res
	return ec.marshalNNewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_uploader(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Uploader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFile_school(ctx context.Context, field graphql.CollectedField, obj *model.StaticFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFilesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StaticFilesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFilesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFilesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StaticFilesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFilesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StaticFilesEdge)
	fc.Result = res
	return ec.marshalOStaticFilesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFilesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StaticFilesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFilesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFilesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StaticFilesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFilesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StaticFilesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StaticFilesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StaticFilesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StaticFile)
	fc.Result = res
	return ec.marshalOStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_id(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_balance(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_confirmed(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_confirmedOn(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_confirmedBy(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Status_school(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StatusConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatusConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StatusConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatusConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StatusEdge)
	fc.Result = res
	return ec.marshalOStatusEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatusEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StatusConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatusConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StatusEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatusEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StatusEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StatusEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatusEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_id(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_salute(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_name(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_cell(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_email(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_gender(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_roles(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_products(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductsConnection)
	fc.Result = res
	return ec.marshalNProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_productsDispensed(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductsDispensed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DispensedProductsConnection)
	fc.Result = res
	return ec.marshalNDispensedProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_archives(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Storekeeper_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_pass(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Storekeeper_school(ctx context.Context, field graphql.CollectedField, obj *model.Storekeeper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storekeeper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StorekeepersConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StorekeepersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorekeepersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StorekeepersConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StorekeepersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorekeepersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorekeepersEdge)
	fc.Result = res
	return ec.marshalOStorekeepersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StorekeepersConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StorekeepersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorekeepersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StorekeepersEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StorekeepersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorekeepersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StorekeepersEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StorekeepersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorekeepersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Storekeeper)
	fc.Result = res
	return ec.marshalOStorekeeper2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeeper(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_id(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_name(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_nemisNo(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NemisNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_nhifStatus(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NhifStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_bCertNo(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BCertNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_nickName(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NickName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_dob(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_hobies(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hobies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_roleModels(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_careers(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Careers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_motto(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Motto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_bloodGroup(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BloodGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_bestFriend(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BestFriend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_languages(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Languages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_game(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_subject(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_book(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Book, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_quote(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_animal(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Animal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_device(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_thumbnail(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_guardians(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Guardians, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UsersConnection)
	fc.Result = res
	return ec.marshalNUsersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_grade(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_payments(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_attendance(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attendance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AttendanceConnection)
	fc.Result = res
	return ec.marshalNAttendanceConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_roleCall(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleCall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentoutConnection)
	fc.Result = res
	return ec.marshalNStudentinStudentoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_lends(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lends, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LendsConnection)
	fc.Result = res
	return ec.marshalNLendsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_scores(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ScoresConnection)
	fc.Result = res
	return ec.marshalNScoresConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_diaries(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diaries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiariesConnection)
	fc.Result = res
	return ec.marshalNDiariesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_sharemeal(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sharemeal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_greetstranger(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greetstranger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_firstaider(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstaider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Student_school(ctx context.Context, field graphql.CollectedField, obj *model.Student) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_student(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_timeIn(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_inSchool(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InSchool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_timeOut(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_school(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentout_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentout) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentout",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentoutConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentoutConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StudentinStudentoutEdge)
	fc.Result = res
	return ec.marshalOStudentinStudentoutEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentoutConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentoutConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentoutConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentoutEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentoutEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentoutEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentinStudentoutEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StudentinStudentoutEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentinStudentoutEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StudentinStudentout)
	fc.Result = res
	return ec.marshalOStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.StudentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.StudentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StudentsEdge)
	fc.Result = res
	return ec.marshalOStudentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StudentsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.StudentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StudentsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.StudentsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StudentsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_id(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_name(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_department(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_scores(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ScoresConnection)
	fc.Result = res
	return ec.marshalNScoresConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_school(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Subject_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Subject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SubjectsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SubjectsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubjectsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubjectsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SubjectsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubjectsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubjectsEdge)
	fc.Result = res
	return ec.marshalOSubjectsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _SubjectsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SubjectsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubjectsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SubjectsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SubjectsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubjectsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubjectsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SubjectsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubjectsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Subject)
	fc.Result = res
	return ec.marshalOSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_paymentMade(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().PaymentMade(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Payment)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_lessonAttended(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().LessonAttended(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Attendance)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_examScored(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ExamScored(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Score)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_nuLessonIn5(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NuLessonIn5(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Lesson)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_studentHasArrived(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StudentHasArrived(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.StudentinStudentout)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_studentHasDeparted(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StudentHasDeparted(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.StudentinStudentout)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_paymentConfirmed(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().PaymentConfirmed(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Status)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNStatus2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_bookAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().BookAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Book)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_bookLentout(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().BookLentout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Lend)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_bookReceivedBack(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().BookReceivedBack(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Lend)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_productAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ProductAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Product)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_productDispensed(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ProductDispensed(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DispensedProduct)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNDispensedProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_diaryAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DiaryAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Diary)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNDiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_diarySeen(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DiarySeen(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Diary)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNDiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_workerHasArrived(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().WorkerHasArrived(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.CheckinCheckout)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_workerHasDeparted(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().WorkerHasDeparted(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.CheckinCheckout)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_visitorCheckedin(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VisitorCheckedin(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Visitor)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_visitorCheckedout(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VisitorCheckedout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Visitor)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_announceAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AnnounceAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Announcement)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_newsletterAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NewsletterAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Newsletter)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNNewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_lessonAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().LessonAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Lesson)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_studentAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StudentAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Student)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_userAdded(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().UserAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.User)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_itemArchived(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ItemArchived(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Archive)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNArchive2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchive(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_attendanceConfirmed(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AttendanceConfirmed(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Attendance)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_salute(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_name(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_cell(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_email(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_gender(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_roles(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_products(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductsConnection)
	fc.Result = res
	return ec.marshalNProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_payments(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_visits(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VisitorsConnection)
	fc.Result = res
	return ec.marshalNVisitorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_school(ctx context.Context, field graphql.CollectedField, obj *model.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.SuppliersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuppliersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.SuppliersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuppliersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SuppliersEdge)
	fc.Result = res
	return ec.marshalOSuppliersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SuppliersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuppliersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.SuppliersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuppliersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.SuppliersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuppliersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Thread_id(ctx context.Context, field graphql.CollectedField, obj *model.Thread) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Thread",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Thread_new(ctx context.Context, field graphql.CollectedField, obj *model.Thread) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Thread",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Thread_messages(ctx context.Context, field graphql.CollectedField, obj *model.Thread) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Thread",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MessagesConnection)
	fc.Result = res
	return ec.marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Thread_school(ctx context.Context, field graphql.CollectedField, obj *model.Thread) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Thread",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Thread_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Thread) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Thread",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ThreadsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.ThreadsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ThreadsEdge)
	fc.Result = res
	return ec.marshalOThreadsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ThreadsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.ThreadsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThreadsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.ThreadsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThreadsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Thread)
	fc.Result = res
	return ec.marshalOThread2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThread(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_id(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_day(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_done(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Done, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson1(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson2(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson3(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson4(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson5(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson6(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson7(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_lesson8(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lesson8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lesson)
	fc.Result = res
	return ec.marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_grade(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalNGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_school(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTable_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TimeTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTablesConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.TimeTablesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTablesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTablesConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.TimeTablesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTablesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TimeTablesEdge)
	fc.Result = res
	return ec.marshalOTimeTablesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTablesConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.TimeTablesConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTablesConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTablesEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.TimeTablesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTablesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeTablesEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.TimeTablesEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimeTablesEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeTable)
	fc.Result = res
	return ec.marshalOTimeTable2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTable(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_id(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_strand(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_subStrand(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubStrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_outComes(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutComes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_experiences(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experiences, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_inquiries(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inquiries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_competencies(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_lifeSkills(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LifeSkills, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_eSDDRR(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ESddrr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_values(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_otherAreas(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherAreas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_communityActivities(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityActivities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_nonFormalActivity(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFormalActivity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_assessment(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_school(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topic_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TopicsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.TopicsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TopicsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TopicsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.TopicsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TopicsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TopicsEdge)
	fc.Result = res
	return ec.marshalOTopicsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopicsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TopicsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.TopicsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TopicsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TopicsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.TopicsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TopicsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TopicsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.TopicsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TopicsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Topic)
	fc.Result = res
	return ec.marshalOTopic2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopic(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_id(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_salute(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_name(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_cell(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_email(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_gender(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_roles(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_timeTableLessons(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeTableLessons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LessonsConnection)
	fc.Result = res
	return ec.marshalNLessonsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_diaries(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diaries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DiariesConnection)
	fc.Result = res
	return ec.marshalNDiariesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_archives(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tutor_archives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ArchivesConnection)
	fc.Result = res
	return ec.marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_checkinCheckouts(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckinCheckouts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CheckinCheckoutConnection)
	fc.Result = res
	return ec.marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_pass(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pass)
	fc.Result = res
	return ec.marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx, field.Selections, res)
}

func (ec *executionContext) _Tutor_school(ctx context.Context, field graphql.CollectedField, obj *model.Tutor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tutor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _TutorsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.TutorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TutorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TutorsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.TutorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TutorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TutorsEdge)
	fc.Result = res
	return ec.marshalOTutorsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TutorsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.TutorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TutorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TutorsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.TutorsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TutorsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TutorsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.TutorsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TutorsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tutor)
	fc.Result = res
	return ec.marshalOTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_salute(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_iDno(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_nHIFno(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NHIFno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_cell(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_gender(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_semiFormal(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SemiFormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_thumbNail(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbNail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_addrPoBox(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_addrPostalCode(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrPostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_addrDistrict(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_addrCounty(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_addrNationality(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrNationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_students(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StudentsConnection)
	fc.Result = res
	return ec.marshalNStudentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_payments(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_payments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentsConnection)
	fc.Result = res
	return ec.marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_messages(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MessagesConnection)
	fc.Result = res
	return ec.marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_essenes(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Essenes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EssenesConnection)
	fc.Result = res
	return ec.marshalNEssenesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_school(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.UsersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UsersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.UsersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UsersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UsersEdge)
	fc.Result = res
	return ec.marshalOUsersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.UsersConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UsersConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.UsersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UsersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.UsersEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UsersEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_id(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_salute(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_name(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_iDno(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDno, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_cell(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_email(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_visiting(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visiting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_purpose(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purpose, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_belongings(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Belongings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_timeIn(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_timeOut(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_thumbScan(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbScan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_visitingFreq(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitingFreq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_authorizedBy(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Admin)
	fc.Result = res
	return ec.marshalNAdmin2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Visitor_school(ctx context.Context, field graphql.CollectedField, obj *model.Visitor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Visitor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.School, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.School)
	fc.Result = res
	return ec.marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitorsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.VisitorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitorsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.VisitorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VisitorsEdge)
	fc.Result = res
	return ec.marshalOVisitorsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitorsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.VisitorsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitorsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitorsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.VisitorsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitorsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitorsEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.VisitorsEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitorsEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Visitor)
	fc.Result = res
	return ec.marshalOVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _SearchResult(ctx context.Context, sel ast.SelectionSet, obj model.SearchResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Announcement:
		return ec._Announcement(ctx, sel, &obj)
	case *model.Announcement:
		if obj == nil {
			return graphql.Null
		}
		return ec._Announcement(ctx, sel, obj)
	case model.Attendance:
		return ec._Attendance(ctx, sel, &obj)
	case *model.Attendance:
		if obj == nil {
			return graphql.Null
		}
		return ec._Attendance(ctx, sel, obj)
	case model.Book:
		return ec._Book(ctx, sel, &obj)
	case *model.Book:
		if obj == nil {
			return graphql.Null
		}
		return ec._Book(ctx, sel, obj)
	case model.Culture:
		return ec._Culture(ctx, sel, &obj)
	case *model.Culture:
		if obj == nil {
			return graphql.Null
		}
		return ec._Culture(ctx, sel, obj)
	case model.Department:
		return ec._Department(ctx, sel, &obj)
	case *model.Department:
		if obj == nil {
			return graphql.Null
		}
		return ec._Department(ctx, sel, obj)
	case model.Exam:
		return ec._Exam(ctx, sel, &obj)
	case *model.Exam:
		if obj == nil {
			return graphql.Null
		}
		return ec._Exam(ctx, sel, obj)
	case model.Fee:
		return ec._Fee(ctx, sel, &obj)
	case *model.Fee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Fee(ctx, sel, obj)
	case model.Grade:
		return ec._Grade(ctx, sel, &obj)
	case *model.Grade:
		if obj == nil {
			return graphql.Null
		}
		return ec._Grade(ctx, sel, obj)
	case model.Lend:
		return ec._Lend(ctx, sel, &obj)
	case *model.Lend:
		if obj == nil {
			return graphql.Null
		}
		return ec._Lend(ctx, sel, obj)
	case model.Lesson:
		return ec._Lesson(ctx, sel, &obj)
	case *model.Lesson:
		if obj == nil {
			return graphql.Null
		}
		return ec._Lesson(ctx, sel, obj)
	case model.Message:
		return ec._Message(ctx, sel, &obj)
	case *model.Message:
		if obj == nil {
			return graphql.Null
		}
		return ec._Message(ctx, sel, obj)
	case model.Payment:
		return ec._Payment(ctx, sel, &obj)
	case *model.Payment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Payment(ctx, sel, obj)
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.Score:
		return ec._Score(ctx, sel, &obj)
	case *model.Score:
		if obj == nil {
			return graphql.Null
		}
		return ec._Score(ctx, sel, obj)
	case model.Student:
		return ec._Student(ctx, sel, &obj)
	case *model.Student:
		if obj == nil {
			return graphql.Null
		}
		return ec._Student(ctx, sel, obj)
	case model.Subject:
		return ec._Subject(ctx, sel, &obj)
	case *model.Subject:
		if obj == nil {
			return graphql.Null
		}
		return ec._Subject(ctx, sel, obj)
	case model.TimeTable:
		return ec._TimeTable(ctx, sel, &obj)
	case *model.TimeTable:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimeTable(ctx, sel, obj)
	case model.Topic:
		return ec._Topic(ctx, sel, &obj)
	case *model.Topic:
		if obj == nil {
			return graphql.Null
		}
		return ec._Topic(ctx, sel, obj)
	case model.User:
		return ec._User(ctx, sel, &obj)
	case *model.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case model.Visitor:
		return ec._Visitor(ctx, sel, &obj)
	case *model.Visitor:
		if obj == nil {
			return graphql.Null
		}
		return ec._Visitor(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountantImplementors = []string{"Accountant"}

func (ec *executionContext) _Accountant(ctx context.Context, sel ast.SelectionSet, obj *model.Accountant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Accountant")
		case "id":
			out.Values[i] = ec._Accountant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Accountant_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Accountant_name(ctx, field, obj)
		case "IDno":
			out.Values[i] = ec._Accountant_IDno(ctx, field, obj)
		case "NHIFno":
			out.Values[i] = ec._Accountant_NHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Accountant_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Accountant_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Accountant_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Accountant_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Accountant_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Accountant_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Accountant_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Accountant_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Accountant_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Accountant_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Accountant_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Accountant_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Accountant_createdAt(ctx, field, obj)
		case "authorizedPayments":
			out.Values[i] = ec._Accountant_authorizedPayments(ctx, field, obj)
		case "archives":
			out.Values[i] = ec._Accountant_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Accountant_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Accountant_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Accountant_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountantsConnectionImplementors = []string{"AccountantsConnection"}

func (ec *executionContext) _AccountantsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.AccountantsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountantsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountantsConnection")
		case "totalCount":
			out.Values[i] = ec._AccountantsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._AccountantsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AccountantsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountantsEdgeImplementors = []string{"AccountantsEdge"}

func (ec *executionContext) _AccountantsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.AccountantsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountantsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountantsEdge")
		case "cursor":
			out.Values[i] = ec._AccountantsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AccountantsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminImplementors = []string{"Admin"}

func (ec *executionContext) _Admin(ctx context.Context, sel ast.SelectionSet, obj *model.Admin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Admin")
		case "id":
			out.Values[i] = ec._Admin_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Admin_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Admin_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Admin_iDno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Admin_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Admin_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Admin_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Admin_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Admin_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Admin_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Admin_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Admin_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Admin_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Admin_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Admin_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Admin_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Admin_createdAt(ctx, field, obj)
		case "visitors":
			out.Values[i] = ec._Admin_visitors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authorizedWorkers":
			out.Values[i] = ec._Admin_authorizedWorkers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messages":
			out.Values[i] = ec._Admin_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._Admin_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Admin_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Admin_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Admin_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminsConnectionImplementors = []string{"AdminsConnection"}

func (ec *executionContext) _AdminsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.AdminsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminsConnection")
		case "totalCount":
			out.Values[i] = ec._AdminsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._AdminsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AdminsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminsEdgeImplementors = []string{"AdminsEdge"}

func (ec *executionContext) _AdminsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.AdminsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminsEdge")
		case "cursor":
			out.Values[i] = ec._AdminsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AdminsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var announcementImplementors = []string{"Announcement", "SearchResult"}

func (ec *executionContext) _Announcement(ctx context.Context, sel ast.SelectionSet, obj *model.Announcement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, announcementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Announcement")
		case "id":
			out.Values[i] = ec._Announcement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic":
			out.Values[i] = ec._Announcement_topic(ctx, field, obj)
		case "by":
			out.Values[i] = ec._Announcement_by(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Announcement_message(ctx, field, obj)
		case "receipients":
			out.Values[i] = ec._Announcement_receipients(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Announcement_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Announcement_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var announcementConnectionImplementors = []string{"AnnouncementConnection"}

func (ec *executionContext) _AnnouncementConnection(ctx context.Context, sel ast.SelectionSet, obj *model.AnnouncementConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, announcementConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnouncementConnection")
		case "totalCount":
			out.Values[i] = ec._AnnouncementConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._AnnouncementConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AnnouncementConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var announcementEdgeImplementors = []string{"AnnouncementEdge"}

func (ec *executionContext) _AnnouncementEdge(ctx context.Context, sel ast.SelectionSet, obj *model.AnnouncementEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, announcementEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnouncementEdge")
		case "cursor":
			out.Values[i] = ec._AnnouncementEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AnnouncementEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var archiveImplementors = []string{"Archive"}

func (ec *executionContext) _Archive(ctx context.Context, sel ast.SelectionSet, obj *model.Archive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, archiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Archive")
		case "id":
			out.Values[i] = ec._Archive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Archive_type(ctx, field, obj)
		case "field1":
			out.Values[i] = ec._Archive_field1(ctx, field, obj)
		case "field2":
			out.Values[i] = ec._Archive_field2(ctx, field, obj)
		case "field3":
			out.Values[i] = ec._Archive_field3(ctx, field, obj)
		case "field4":
			out.Values[i] = ec._Archive_field4(ctx, field, obj)
		case "field5":
			out.Values[i] = ec._Archive_field5(ctx, field, obj)
		case "field6":
			out.Values[i] = ec._Archive_field6(ctx, field, obj)
		case "field7":
			out.Values[i] = ec._Archive_field7(ctx, field, obj)
		case "field8":
			out.Values[i] = ec._Archive_field8(ctx, field, obj)
		case "field9":
			out.Values[i] = ec._Archive_field9(ctx, field, obj)
		case "field10":
			out.Values[i] = ec._Archive_field10(ctx, field, obj)
		case "field11":
			out.Values[i] = ec._Archive_field11(ctx, field, obj)
		case "field12":
			out.Values[i] = ec._Archive_field12(ctx, field, obj)
		case "field13":
			out.Values[i] = ec._Archive_field13(ctx, field, obj)
		case "field14":
			out.Values[i] = ec._Archive_field14(ctx, field, obj)
		case "field15":
			out.Values[i] = ec._Archive_field15(ctx, field, obj)
		case "field16":
			out.Values[i] = ec._Archive_field16(ctx, field, obj)
		case "field17":
			out.Values[i] = ec._Archive_field17(ctx, field, obj)
		case "field18":
			out.Values[i] = ec._Archive_field18(ctx, field, obj)
		case "field19":
			out.Values[i] = ec._Archive_field19(ctx, field, obj)
		case "field20":
			out.Values[i] = ec._Archive_field20(ctx, field, obj)
		case "deletedByName":
			out.Values[i] = ec._Archive_deletedByName(ctx, field, obj)
		case "deletedByMail":
			out.Values[i] = ec._Archive_deletedByMail(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Archive_createdAt(ctx, field, obj)
		case "School":
			out.Values[i] = ec._Archive_School(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var archivesConnectionImplementors = []string{"ArchivesConnection"}

func (ec *executionContext) _ArchivesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ArchivesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, archivesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArchivesConnection")
		case "totalCount":
			out.Values[i] = ec._ArchivesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ArchivesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ArchivesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var archivesEdgeImplementors = []string{"ArchivesEdge"}

func (ec *executionContext) _ArchivesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ArchivesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, archivesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArchivesEdge")
		case "cursor":
			out.Values[i] = ec._ArchivesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ArchivesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attendanceImplementors = []string{"Attendance", "SearchResult"}

func (ec *executionContext) _Attendance(ctx context.Context, sel ast.SelectionSet, obj *model.Attendance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attendanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attendance")
		case "id":
			out.Values[i] = ec._Attendance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "student":
			out.Values[i] = ec._Attendance_student(ctx, field, obj)
		case "lesson":
			out.Values[i] = ec._Attendance_lesson(ctx, field, obj)
		case "present":
			out.Values[i] = ec._Attendance_present(ctx, field, obj)
		case "confirmed":
			out.Values[i] = ec._Attendance_confirmed(ctx, field, obj)
		case "confirmation":
			out.Values[i] = ec._Attendance_confirmation(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Attendance_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Attendance_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attendanceConnectionImplementors = []string{"AttendanceConnection"}

func (ec *executionContext) _AttendanceConnection(ctx context.Context, sel ast.SelectionSet, obj *model.AttendanceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attendanceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttendanceConnection")
		case "totalCount":
			out.Values[i] = ec._AttendanceConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._AttendanceConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AttendanceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attendanceEdgeImplementors = []string{"AttendanceEdge"}

func (ec *executionContext) _AttendanceEdge(ctx context.Context, sel ast.SelectionSet, obj *model.AttendanceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attendanceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttendanceEdge")
		case "cursor":
			out.Values[i] = ec._AttendanceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AttendanceEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bookImplementors = []string{"Book", "SearchResult"}

func (ec *executionContext) _Book(ctx context.Context, sel ast.SelectionSet, obj *model.Book) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bookImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Book")
		case "id":
			out.Values[i] = ec._Book_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Book_name(ctx, field, obj)
		case "isbn":
			out.Values[i] = ec._Book_isbn(ctx, field, obj)
		case "authors":
			out.Values[i] = ec._Book_authors(ctx, field, obj)
		case "revision":
			out.Values[i] = ec._Book_revision(ctx, field, obj)
		case "lends":
			out.Values[i] = ec._Book_lends(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Book_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Book_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var booksConnectionImplementors = []string{"BooksConnection"}

func (ec *executionContext) _BooksConnection(ctx context.Context, sel ast.SelectionSet, obj *model.BooksConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, booksConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BooksConnection")
		case "totalCount":
			out.Values[i] = ec._BooksConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._BooksConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BooksConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var booksEdgeImplementors = []string{"BooksEdge"}

func (ec *executionContext) _BooksEdge(ctx context.Context, sel ast.SelectionSet, obj *model.BooksEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, booksEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BooksEdge")
		case "cursor":
			out.Values[i] = ec._BooksEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._BooksEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkinCheckoutImplementors = []string{"CheckinCheckout"}

func (ec *executionContext) _CheckinCheckout(ctx context.Context, sel ast.SelectionSet, obj *model.CheckinCheckout) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkinCheckoutImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckinCheckout")
		case "id":
			out.Values[i] = ec._CheckinCheckout_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "worker":
			out.Values[i] = ec._CheckinCheckout_worker(ctx, field, obj)
		case "timeIn":
			out.Values[i] = ec._CheckinCheckout_timeIn(ctx, field, obj)
		case "inSchool":
			out.Values[i] = ec._CheckinCheckout_inSchool(ctx, field, obj)
		case "timeOut":
			out.Values[i] = ec._CheckinCheckout_timeOut(ctx, field, obj)
		case "authorizedBy":
			out.Values[i] = ec._CheckinCheckout_authorizedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._CheckinCheckout_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._CheckinCheckout_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkinCheckoutConnectionImplementors = []string{"CheckinCheckoutConnection"}

func (ec *executionContext) _CheckinCheckoutConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CheckinCheckoutConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkinCheckoutConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckinCheckoutConnection")
		case "totalCount":
			out.Values[i] = ec._CheckinCheckoutConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CheckinCheckoutConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CheckinCheckoutConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkinCheckoutEdgeImplementors = []string{"CheckinCheckoutEdge"}

func (ec *executionContext) _CheckinCheckoutEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CheckinCheckoutEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkinCheckoutEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckinCheckoutEdge")
		case "cursor":
			out.Values[i] = ec._CheckinCheckoutEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._CheckinCheckoutEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cultureImplementors = []string{"Culture", "SearchResult"}

func (ec *executionContext) _Culture(ctx context.Context, sel ast.SelectionSet, obj *model.Culture) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cultureImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Culture")
		case "id":
			out.Values[i] = ec._Culture_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Culture_title(ctx, field, obj)
		case "instructions":
			out.Values[i] = ec._Culture_instructions(ctx, field, obj)
		case "story":
			out.Values[i] = ec._Culture_story(ctx, field, obj)
		case "quiz":
			out.Values[i] = ec._Culture_quiz(ctx, field, obj)
		case "lessons":
			out.Values[i] = ec._Culture_lessons(ctx, field, obj)
		case "culture":
			out.Values[i] = ec._Culture_culture(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._Culture_grade(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Culture_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Culture_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var culturesConnectionImplementors = []string{"CulturesConnection"}

func (ec *executionContext) _CulturesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CulturesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, culturesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CulturesConnection")
		case "totalCount":
			out.Values[i] = ec._CulturesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CulturesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CulturesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var culturesEdgeImplementors = []string{"CulturesEdge"}

func (ec *executionContext) _CulturesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.CulturesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, culturesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CulturesEdge")
		case "cursor":
			out.Values[i] = ec._CulturesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._CulturesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentImplementors = []string{"Department", "SearchResult"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *model.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Department_name(ctx, field, obj)
		case "hod":
			out.Values[i] = ec._Department_hod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subjects":
			out.Values[i] = ec._Department_subjects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tutors":
			out.Values[i] = ec._Department_tutors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Department_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Department_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentsConnectionImplementors = []string{"DepartmentsConnection"}

func (ec *executionContext) _DepartmentsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentsConnection")
		case "totalCount":
			out.Values[i] = ec._DepartmentsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._DepartmentsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DepartmentsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentsEdgeImplementors = []string{"DepartmentsEdge"}

func (ec *executionContext) _DepartmentsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentsEdge")
		case "cursor":
			out.Values[i] = ec._DepartmentsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._DepartmentsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var diariesConnectionImplementors = []string{"DiariesConnection"}

func (ec *executionContext) _DiariesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DiariesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, diariesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiariesConnection")
		case "totalCount":
			out.Values[i] = ec._DiariesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._DiariesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DiariesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var diariesEdgeImplementors = []string{"DiariesEdge"}

func (ec *executionContext) _DiariesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.DiariesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, diariesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiariesEdge")
		case "cursor":
			out.Values[i] = ec._DiariesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._DiariesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var diaryImplementors = []string{"Diary"}

func (ec *executionContext) _Diary(ctx context.Context, sel ast.SelectionSet, obj *model.Diary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, diaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Diary")
		case "id":
			out.Values[i] = ec._Diary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._Diary_remarks(ctx, field, obj)
		case "student":
			out.Values[i] = ec._Diary_student(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "request":
			out.Values[i] = ec._Diary_request(ctx, field, obj)
		case "tutor":
			out.Values[i] = ec._Diary_tutor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seenBy":
			out.Values[i] = ec._Diary_seenBy(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Diary_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Diary_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispensedProductImplementors = []string{"DispensedProduct"}

func (ec *executionContext) _DispensedProduct(ctx context.Context, sel ast.SelectionSet, obj *model.DispensedProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispensedProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DispensedProduct")
		case "id":
			out.Values[i] = ec._DispensedProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "product":
			out.Values[i] = ec._DispensedProduct_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quantity":
			out.Values[i] = ec._DispensedProduct_quantity(ctx, field, obj)
		case "category":
			out.Values[i] = ec._DispensedProduct_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dispenseTo":
			out.Values[i] = ec._DispensedProduct_dispenseTo(ctx, field, obj)
		case "dispensedBy":
			out.Values[i] = ec._DispensedProduct_dispensedBy(ctx, field, obj)
		case "school":
			out.Values[i] = ec._DispensedProduct_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DispensedProduct_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispensedProductsConnectionImplementors = []string{"DispensedProductsConnection"}

func (ec *executionContext) _DispensedProductsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DispensedProductsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispensedProductsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DispensedProductsConnection")
		case "totalCount":
			out.Values[i] = ec._DispensedProductsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._DispensedProductsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DispensedProductsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispensedProductsEdgeImplementors = []string{"DispensedProductsEdge"}

func (ec *executionContext) _DispensedProductsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.DispensedProductsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispensedProductsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DispensedProductsEdge")
		case "cursor":
			out.Values[i] = ec._DispensedProductsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._DispensedProductsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var esseneImplementors = []string{"Essene"}

func (ec *executionContext) _Essene(ctx context.Context, sel ast.SelectionSet, obj *model.Essene) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, esseneImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Essene")
		case "id":
			out.Values[i] = ec._Essene_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Essene_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Essene_createdAt(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Essene_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var essenesConnectionImplementors = []string{"EssenesConnection"}

func (ec *executionContext) _EssenesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EssenesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, essenesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EssenesConnection")
		case "totalCount":
			out.Values[i] = ec._EssenesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._EssenesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._EssenesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var essenesEdgeImplementors = []string{"EssenesEdge"}

func (ec *executionContext) _EssenesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.EssenesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, essenesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EssenesEdge")
		case "cursor":
			out.Values[i] = ec._EssenesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._EssenesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var examImplementors = []string{"Exam", "SearchResult"}

func (ec *executionContext) _Exam(ctx context.Context, sel ast.SelectionSet, obj *model.Exam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, examImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Exam")
		case "id":
			out.Values[i] = ec._Exam_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Exam_name(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Exam_date(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._Exam_grade(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scores":
			out.Values[i] = ec._Exam_scores(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Exam_createdAt(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Exam_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var examsConnectionImplementors = []string{"ExamsConnection"}

func (ec *executionContext) _ExamsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ExamsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, examsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExamsConnection")
		case "totalCount":
			out.Values[i] = ec._ExamsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ExamsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ExamsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var examsEdgeImplementors = []string{"ExamsEdge"}

func (ec *executionContext) _ExamsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ExamsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, examsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExamsEdge")
		case "cursor":
			out.Values[i] = ec._ExamsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ExamsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feeImplementors = []string{"Fee", "SearchResult"}

func (ec *executionContext) _Fee(ctx context.Context, sel ast.SelectionSet, obj *model.Fee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fee")
		case "id":
			out.Values[i] = ec._Fee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":
			out.Values[i] = ec._Fee_grade(ctx, field, obj)
		case "year":
			out.Values[i] = ec._Fee_year(ctx, field, obj)
		case "semester":
			out.Values[i] = ec._Fee_semester(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Fee_amount(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Fee_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Fee_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feesConnectionImplementors = []string{"FeesConnection"}

func (ec *executionContext) _FeesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.FeesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeesConnection")
		case "totalCount":
			out.Values[i] = ec._FeesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._FeesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FeesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feesEdgeImplementors = []string{"FeesEdge"}

func (ec *executionContext) _FeesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.FeesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeesEdge")
		case "cursor":
			out.Values[i] = ec._FeesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FeesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gradeImplementors = []string{"Grade", "SearchResult"}

func (ec *executionContext) _Grade(ctx context.Context, sel ast.SelectionSet, obj *model.Grade) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Grade")
		case "id":
			out.Values[i] = ec._Grade_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Grade_name(ctx, field, obj)
		case "stream":
			out.Values[i] = ec._Grade_stream(ctx, field, obj)
		case "classTeacher":
			out.Values[i] = ec._Grade_classTeacher(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "motto":
			out.Values[i] = ec._Grade_motto(ctx, field, obj)
		case "fees":
			out.Values[i] = ec._Grade_fees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "students":
			out.Values[i] = ec._Grade_students(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentsInClass":
			out.Values[i] = ec._Grade_studentsInClass(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lessons":
			out.Values[i] = ec._Grade_lessons(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exams":
			out.Values[i] = ec._Grade_exams(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeTables":
			out.Values[i] = ec._Grade_timeTables(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cultures":
			out.Values[i] = ec._Grade_cultures(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Grade_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Grade_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gradesConnectionImplementors = []string{"GradesConnection"}

func (ec *executionContext) _GradesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.GradesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradesConnection")
		case "totalCount":
			out.Values[i] = ec._GradesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._GradesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._GradesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gradesEdgeImplementors = []string{"GradesEdge"}

func (ec *executionContext) _GradesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.GradesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradesEdge")
		case "cursor":
			out.Values[i] = ec._GradesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._GradesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var guardianImplementors = []string{"Guardian"}

func (ec *executionContext) _Guardian(ctx context.Context, sel ast.SelectionSet, obj *model.Guardian) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guardianImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Guardian")
		case "id":
			out.Values[i] = ec._Guardian_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Guardian_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Guardian_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Guardian_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Guardian_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Guardian_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Guardian_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Guardian_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Guardian_roles(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Guardian_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Guardian_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Guardian_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Guardian_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Guardian_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Guardian_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Guardian_createdAt(ctx, field, obj)
		case "students":
			out.Values[i] = ec._Guardian_students(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payments":
			out.Values[i] = ec._Guardian_payments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visits":
			out.Values[i] = ec._Guardian_visits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messages":
			out.Values[i] = ec._Guardian_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viwedDiaries":
			out.Values[i] = ec._Guardian_viwedDiaries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._Guardian_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Guardian_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var guardiansConnectionImplementors = []string{"GuardiansConnection"}

func (ec *executionContext) _GuardiansConnection(ctx context.Context, sel ast.SelectionSet, obj *model.GuardiansConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guardiansConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuardiansConnection")
		case "totalCount":
			out.Values[i] = ec._GuardiansConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._GuardiansConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._GuardiansConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var guardiansEdgeImplementors = []string{"GuardiansEdge"}

func (ec *executionContext) _GuardiansEdge(ctx context.Context, sel ast.SelectionSet, obj *model.GuardiansEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, guardiansEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GuardiansEdge")
		case "cursor":
			out.Values[i] = ec._GuardiansEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._GuardiansEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lendImplementors = []string{"Lend", "SearchResult"}

func (ec *executionContext) _Lend(ctx context.Context, sel ast.SelectionSet, obj *model.Lend) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lendImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lend")
		case "id":
			out.Values[i] = ec._Lend_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "received_on":
			out.Values[i] = ec._Lend_received_on(ctx, field, obj)
		case "due_on":
			out.Values[i] = ec._Lend_due_on(ctx, field, obj)
		case "handed_over_on":
			out.Values[i] = ec._Lend_handed_over_on(ctx, field, obj)
		case "handed_over":
			out.Values[i] = ec._Lend_handed_over(ctx, field, obj)
		case "librarian":
			out.Values[i] = ec._Lend_librarian(ctx, field, obj)
		case "book":
			out.Values[i] = ec._Lend_book(ctx, field, obj)
		case "condition":
			out.Values[i] = ec._Lend_condition(ctx, field, obj)
		case "student":
			out.Values[i] = ec._Lend_student(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Lend_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Lend_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lendsConnectionImplementors = []string{"LendsConnection"}

func (ec *executionContext) _LendsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.LendsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lendsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LendsConnection")
		case "totalCount":
			out.Values[i] = ec._LendsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LendsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LendsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lendsEdgeImplementors = []string{"LendsEdge"}

func (ec *executionContext) _LendsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.LendsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lendsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LendsEdge")
		case "cursor":
			out.Values[i] = ec._LendsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LendsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lessonImplementors = []string{"Lesson", "SearchResult"}

func (ec *executionContext) _Lesson(ctx context.Context, sel ast.SelectionSet, obj *model.Lesson) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lesson")
		case "id":
			out.Values[i] = ec._Lesson_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Lesson_name(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Lesson_date(ctx, field, obj)
		case "timeDate":
			out.Values[i] = ec._Lesson_timeDate(ctx, field, obj)
		case "start":
			out.Values[i] = ec._Lesson_start(ctx, field, obj)
		case "stop":
			out.Values[i] = ec._Lesson_stop(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._Lesson_duration(ctx, field, obj)
		case "done":
			out.Values[i] = ec._Lesson_done(ctx, field, obj)
		case "files":
			out.Values[i] = ec._Lesson_files(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._Lesson_remarks(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._Lesson_subject(ctx, field, obj)
		case "topic":
			out.Values[i] = ec._Lesson_topic(ctx, field, obj)
		case "tutor":
			out.Values[i] = ec._Lesson_tutor(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._Lesson_grade(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Lesson_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Lesson_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lessonsConnectionImplementors = []string{"LessonsConnection"}

func (ec *executionContext) _LessonsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.LessonsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LessonsConnection")
		case "totalCount":
			out.Values[i] = ec._LessonsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LessonsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LessonsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lessonsEdgeImplementors = []string{"LessonsEdge"}

func (ec *executionContext) _LessonsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.LessonsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LessonsEdge")
		case "cursor":
			out.Values[i] = ec._LessonsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LessonsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var librarianImplementors = []string{"Librarian"}

func (ec *executionContext) _Librarian(ctx context.Context, sel ast.SelectionSet, obj *model.Librarian) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, librarianImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Librarian")
		case "id":
			out.Values[i] = ec._Librarian_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Librarian_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Librarian_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Librarian_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Librarian_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Librarian_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Librarian_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Librarian_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Librarian_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Librarian_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Librarian_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Librarian_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Librarian_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Librarian_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Librarian_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Librarian_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Librarian_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Librarian_createdAt(ctx, field, obj)
		case "lendsAuthorized":
			out.Values[i] = ec._Librarian_lendsAuthorized(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._Librarian_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Librarian_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Librarian_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Librarian_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var librariansConnectionImplementors = []string{"LibrariansConnection"}

func (ec *executionContext) _LibrariansConnection(ctx context.Context, sel ast.SelectionSet, obj *model.LibrariansConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, librariansConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LibrariansConnection")
		case "totalCount":
			out.Values[i] = ec._LibrariansConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LibrariansConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LibrariansConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var librariansEdgeImplementors = []string{"LibrariansEdge"}

func (ec *executionContext) _LibrariansEdge(ctx context.Context, sel ast.SelectionSet, obj *model.LibrariansEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, librariansEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LibrariansEdge")
		case "cursor":
			out.Values[i] = ec._LibrariansEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LibrariansEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managerImplementors = []string{"Manager"}

func (ec *executionContext) _Manager(ctx context.Context, sel ast.SelectionSet, obj *model.Manager) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Manager")
		case "id":
			out.Values[i] = ec._Manager_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Manager_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Manager_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Manager_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Manager_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Manager_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Manager_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Manager_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Manager_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Manager_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Manager_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Manager_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Manager_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Manager_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Manager_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Manager_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Manager_ipAddress(ctx, field, obj)
		case "messages":
			out.Values[i] = ec._Manager_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authorizedPayments":
			out.Values[i] = ec._Manager_authorizedPayments(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Manager_createdAt(ctx, field, obj)
		case "archives":
			out.Values[i] = ec._Manager_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Manager_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Manager_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Manager_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managersConnectionImplementors = []string{"ManagersConnection"}

func (ec *executionContext) _ManagersConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ManagersConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managersConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagersConnection")
		case "totalCount":
			out.Values[i] = ec._ManagersConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ManagersConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ManagersConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managersEdgeImplementors = []string{"ManagersEdge"}

func (ec *executionContext) _ManagersEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ManagersEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managersEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagersEdge")
		case "cursor":
			out.Values[i] = ec._ManagersEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ManagersEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageImplementors = []string{"Message", "SearchResult"}

func (ec *executionContext) _Message(ctx context.Context, sel ast.SelectionSet, obj *model.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Message")
		case "id":
			out.Values[i] = ec._Message_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic":
			out.Values[i] = ec._Message_topic(ctx, field, obj)
		case "text":
			out.Values[i] = ec._Message_text(ctx, field, obj)
		case "returnUser":
			out.Values[i] = ec._Message_returnUser(ctx, field, obj)
		case "thread":
			out.Values[i] = ec._Message_thread(ctx, field, obj)
		case "delivered":
			out.Values[i] = ec._Message_delivered(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Message_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Message_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messagesConnectionImplementors = []string{"MessagesConnection"}

func (ec *executionContext) _MessagesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.MessagesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messagesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessagesConnection")
		case "totalCount":
			out.Values[i] = ec._MessagesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._MessagesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._MessagesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messagesEdgeImplementors = []string{"MessagesEdge"}

func (ec *executionContext) _MessagesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.MessagesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messagesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessagesEdge")
		case "cursor":
			out.Values[i] = ec._MessagesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._MessagesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "addFile":
			out.Values[i] = ec._Mutation_addFile(ctx, field)
		case "addUser":
			out.Values[i] = ec._Mutation_addUser(ctx, field)
		case "addStudent":
			out.Values[i] = ec._Mutation_addStudent(ctx, field)
		case "addSchool":
			out.Values[i] = ec._Mutation_addSchool(ctx, field)
		case "addDepartment":
			out.Values[i] = ec._Mutation_addDepartment(ctx, field)
		case "addSubject":
			out.Values[i] = ec._Mutation_addSubject(ctx, field)
		case "addGrade":
			out.Values[i] = ec._Mutation_addGrade(ctx, field)
		case "addLesson":
			out.Values[i] = ec._Mutation_addLesson(ctx, field)
		case "AddTopic":
			out.Values[i] = ec._Mutation_AddTopic(ctx, field)
		case "addBook":
			out.Values[i] = ec._Mutation_addBook(ctx, field)
		case "LendOut":
			out.Values[i] = ec._Mutation_LendOut(ctx, field)
		case "ReceiveBook":
			out.Values[i] = ec._Mutation_ReceiveBook(ctx, field)
		case "AddFee":
			out.Values[i] = ec._Mutation_AddFee(ctx, field)
		case "NewPayment":
			out.Values[i] = ec._Mutation_NewPayment(ctx, field)
		case "AddExam":
			out.Values[i] = ec._Mutation_AddExam(ctx, field)
		case "AddScore":
			out.Values[i] = ec._Mutation_AddScore(ctx, field)
		case "AddTimeTable":
			out.Values[i] = ec._Mutation_AddTimeTable(ctx, field)
		case "newVisitor":
			out.Values[i] = ec._Mutation_newVisitor(ctx, field)
		case "NewDiary":
			out.Values[i] = ec._Mutation_NewDiary(ctx, field)
		case "ViewDiary":
			out.Values[i] = ec._Mutation_ViewDiary(ctx, field)
		case "AddProduct":
			out.Values[i] = ec._Mutation_AddProduct(ctx, field)
		case "DispenseProduct":
			out.Values[i] = ec._Mutation_DispenseProduct(ctx, field)
		case "NewCulture":
			out.Values[i] = ec._Mutation_NewCulture(ctx, field)
		case "NewEssene":
			out.Values[i] = ec._Mutation_NewEssene(ctx, field)
		case "studentCheckin":
			out.Values[i] = ec._Mutation_studentCheckin(ctx, field)
		case "studentCheckout":
			out.Values[i] = ec._Mutation_studentCheckout(ctx, field)
		case "staffCheckin":
			out.Values[i] = ec._Mutation_staffCheckin(ctx, field)
		case "staffCheckout":
			out.Values[i] = ec._Mutation_staffCheckout(ctx, field)
		case "SendAnnouncement":
			out.Values[i] = ec._Mutation_SendAnnouncement(ctx, field)
		case "ReadAnnouncement":
			out.Values[i] = ec._Mutation_ReadAnnouncement(ctx, field)
		case "SendMessage":
			out.Values[i] = ec._Mutation_SendMessage(ctx, field)
		case "VisitorCheckout":
			out.Values[i] = ec._Mutation_VisitorCheckout(ctx, field)
		case "AddRole":
			out.Values[i] = ec._Mutation_AddRole(ctx, field)
		case "RestoreRoles":
			out.Values[i] = ec._Mutation_RestoreRoles(ctx, field)
		case "PromoteStudent":
			out.Values[i] = ec._Mutation_PromoteStudent(ctx, field)
		case "ConfirmPayment":
			out.Values[i] = ec._Mutation_ConfirmPayment(ctx, field)
		case "ConfirmLessonAttended":
			out.Values[i] = ec._Mutation_ConfirmLessonAttended(ctx, field)
		case "AttendLesson":
			out.Values[i] = ec._Mutation_AttendLesson(ctx, field)
		case "AddStudentGuardian":
			out.Values[i] = ec._Mutation_AddStudentGuardian(ctx, field)
		case "DelAnnouncement":
			out.Values[i] = ec._Mutation_DelAnnouncement(ctx, field)
		case "DelAnnounceUserConn":
			out.Values[i] = ec._Mutation_DelAnnounceUserConn(ctx, field)
		case "DelAttendance":
			out.Values[i] = ec._Mutation_DelAttendance(ctx, field)
		case "DelBook":
			out.Values[i] = ec._Mutation_DelBook(ctx, field)
		case "DelCico":
			out.Values[i] = ec._Mutation_DelCico(ctx, field)
		case "DelSiso":
			out.Values[i] = ec._Mutation_DelSiso(ctx, field)
		case "DelParentingCulture":
			out.Values[i] = ec._Mutation_DelParentingCulture(ctx, field)
		case "DelDepartment":
			out.Values[i] = ec._Mutation_DelDepartment(ctx, field)
		case "DelDiary":
			out.Values[i] = ec._Mutation_DelDiary(ctx, field)
		case "DelUserDiaryConn":
			out.Values[i] = ec._Mutation_DelUserDiaryConn(ctx, field)
		case "DelDispensedProduct":
			out.Values[i] = ec._Mutation_DelDispensedProduct(ctx, field)
		case "DelProduct":
			out.Values[i] = ec._Mutation_DelProduct(ctx, field)
		case "DelEssene":
			out.Values[i] = ec._Mutation_DelEssene(ctx, field)
		case "DelExam":
			out.Values[i] = ec._Mutation_DelExam(ctx, field)
		case "DelFee":
			out.Values[i] = ec._Mutation_DelFee(ctx, field)
		case "DelGrade":
			out.Values[i] = ec._Mutation_DelGrade(ctx, field)
		case "DelLend":
			out.Values[i] = ec._Mutation_DelLend(ctx, field)
		case "DelLesson":
			out.Values[i] = ec._Mutation_DelLesson(ctx, field)
		case "DelMessage":
			out.Values[i] = ec._Mutation_DelMessage(ctx, field)
		case "DelPayment":
			out.Values[i] = ec._Mutation_DelPayment(ctx, field)
		case "DelSchool":
			out.Values[i] = ec._Mutation_DelSchool(ctx, field)
		case "DelScore":
			out.Values[i] = ec._Mutation_DelScore(ctx, field)
		case "DelStudent":
			out.Values[i] = ec._Mutation_DelStudent(ctx, field)
		case "DelSubject":
			out.Values[i] = ec._Mutation_DelSubject(ctx, field)
		case "DelThread":
			out.Values[i] = ec._Mutation_DelThread(ctx, field)
		case "DelTimeTable":
			out.Values[i] = ec._Mutation_DelTimeTable(ctx, field)
		case "DelUser":
			out.Values[i] = ec._Mutation_DelUser(ctx, field)
		case "DelVisitor":
			out.Values[i] = ec._Mutation_DelVisitor(ctx, field)
		case "editAnnouncement":
			out.Values[i] = ec._Mutation_editAnnouncement(ctx, field)
		case "editBook":
			out.Values[i] = ec._Mutation_editBook(ctx, field)
		case "editCulture":
			out.Values[i] = ec._Mutation_editCulture(ctx, field)
		case "editDepartment":
			out.Values[i] = ec._Mutation_editDepartment(ctx, field)
		case "editDiary":
			out.Values[i] = ec._Mutation_editDiary(ctx, field)
		case "editDispensedProduct":
			out.Values[i] = ec._Mutation_editDispensedProduct(ctx, field)
		case "editProduct":
			out.Values[i] = ec._Mutation_editProduct(ctx, field)
		case "editExam":
			out.Values[i] = ec._Mutation_editExam(ctx, field)
		case "editFee":
			out.Values[i] = ec._Mutation_editFee(ctx, field)
		case "editGrade":
			out.Values[i] = ec._Mutation_editGrade(ctx, field)
		case "editNewsletter":
			out.Values[i] = ec._Mutation_editNewsletter(ctx, field)
		case "editLesson":
			out.Values[i] = ec._Mutation_editLesson(ctx, field)
		case "editMessage":
			out.Values[i] = ec._Mutation_editMessage(ctx, field)
		case "editPayment":
			out.Values[i] = ec._Mutation_editPayment(ctx, field)
		case "editSchool":
			out.Values[i] = ec._Mutation_editSchool(ctx, field)
		case "editScore":
			out.Values[i] = ec._Mutation_editScore(ctx, field)
		case "editStudent":
			out.Values[i] = ec._Mutation_editStudent(ctx, field)
		case "editSubject":
			out.Values[i] = ec._Mutation_editSubject(ctx, field)
		case "editTimeTable":
			out.Values[i] = ec._Mutation_editTimeTable(ctx, field)
		case "editUser":
			out.Values[i] = ec._Mutation_editUser(ctx, field)
		case "editVisitor":
			out.Values[i] = ec._Mutation_editVisitor(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newsletterImplementors = []string{"Newsletter"}

func (ec *executionContext) _Newsletter(ctx context.Context, sel ast.SelectionSet, obj *model.Newsletter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newsletterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Newsletter")
		case "id":
			out.Values[i] = ec._Newsletter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mainTopic":
			out.Values[i] = ec._Newsletter_mainTopic(ctx, field, obj)
		case "topicOne":
			out.Values[i] = ec._Newsletter_topicOne(ctx, field, obj)
		case "textOne":
			out.Values[i] = ec._Newsletter_textOne(ctx, field, obj)
		case "topicTwo":
			out.Values[i] = ec._Newsletter_topicTwo(ctx, field, obj)
		case "textTwo":
			out.Values[i] = ec._Newsletter_textTwo(ctx, field, obj)
		case "topicThree":
			out.Values[i] = ec._Newsletter_topicThree(ctx, field, obj)
		case "textThree":
			out.Values[i] = ec._Newsletter_textThree(ctx, field, obj)
		case "topicFour":
			out.Values[i] = ec._Newsletter_topicFour(ctx, field, obj)
		case "textFour":
			out.Values[i] = ec._Newsletter_textFour(ctx, field, obj)
		case "topicFive":
			out.Values[i] = ec._Newsletter_topicFive(ctx, field, obj)
		case "textFive":
			out.Values[i] = ec._Newsletter_textFive(ctx, field, obj)
		case "staticFiles":
			out.Values[i] = ec._Newsletter_staticFiles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rubberStamp":
			out.Values[i] = ec._Newsletter_rubberStamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Newsletter_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Newsletter_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newsletterConnectionImplementors = []string{"NewsletterConnection"}

func (ec *executionContext) _NewsletterConnection(ctx context.Context, sel ast.SelectionSet, obj *model.NewsletterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newsletterConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewsletterConnection")
		case "totalCount":
			out.Values[i] = ec._NewsletterConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._NewsletterConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._NewsletterConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newslettersEdgeImplementors = []string{"NewslettersEdge"}

func (ec *executionContext) _NewslettersEdge(ctx context.Context, sel ast.SelectionSet, obj *model.NewslettersEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newslettersEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewslettersEdge")
		case "cursor":
			out.Values[i] = ec._NewslettersEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._NewslettersEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passImplementors = []string{"Pass"}

func (ec *executionContext) _Pass(ctx context.Context, sel ast.SelectionSet, obj *model.Pass) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pass")
		case "worker":
			out.Values[i] = ec._Pass_worker(ctx, field, obj)
		case "pass":
			out.Values[i] = ec._Pass_pass(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Pass_active(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Pass_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passesConnectionImplementors = []string{"PassesConnection"}

func (ec *executionContext) _PassesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.PassesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PassesConnection")
		case "totalCount":
			out.Values[i] = ec._PassesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._PassesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PassesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passesEdgeImplementors = []string{"PassesEdge"}

func (ec *executionContext) _PassesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.PassesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PassesEdge")
		case "cursor":
			out.Values[i] = ec._PassesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._PassesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentImplementors = []string{"Payment", "SearchResult"}

func (ec *executionContext) _Payment(ctx context.Context, sel ast.SelectionSet, obj *model.Payment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payment")
		case "id":
			out.Values[i] = ec._Payment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentype":
			out.Values[i] = ec._Payment_paymentype(ctx, field, obj)
		case "payingfor":
			out.Values[i] = ec._Payment_payingfor(ctx, field, obj)
		case "receiveruser":
			out.Values[i] = ec._Payment_receiveruser(ctx, field, obj)
		case "receiverstudent":
			out.Values[i] = ec._Payment_receiverstudent(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Payment_amount(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Payment_date(ctx, field, obj)
		case "account":
			out.Values[i] = ec._Payment_account(ctx, field, obj)
		case "payee":
			out.Values[i] = ec._Payment_payee(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Payment_status(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Payment_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Payment_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentsConnectionImplementors = []string{"PaymentsConnection"}

func (ec *executionContext) _PaymentsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentsConnection")
		case "totalCount":
			out.Values[i] = ec._PaymentsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._PaymentsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PaymentsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentsEdgeImplementors = []string{"PaymentsEdge"}

func (ec *executionContext) _PaymentsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentsEdge")
		case "cursor":
			out.Values[i] = ec._PaymentsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._PaymentsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productImplementors = []string{"Product", "SearchResult"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *model.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Product_name(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._Product_cost(ctx, field, obj)
		case "quantity":
			out.Values[i] = ec._Product_quantity(ctx, field, obj)
		case "supplier":
			out.Values[i] = ec._Product_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._Product_category(ctx, field, obj)
		case "receivedOn":
			out.Values[i] = ec._Product_receivedOn(ctx, field, obj)
		case "receivedBy":
			out.Values[i] = ec._Product_receivedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowedMinimum":
			out.Values[i] = ec._Product_allowedMinimum(ctx, field, obj)
		case "dispensed":
			out.Values[i] = ec._Product_dispensed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Product_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Product_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productsConnectionImplementors = []string{"ProductsConnection"}

func (ec *executionContext) _ProductsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ProductsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductsConnection")
		case "totalCount":
			out.Values[i] = ec._ProductsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ProductsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProductsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productsEdgeImplementors = []string{"ProductsEdge"}

func (ec *executionContext) _ProductsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ProductsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductsEdge")
		case "cursor":
			out.Values[i] = ec._ProductsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ProductsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "search":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "school":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_school(ctx, field)
				return res
			})
		case "startTimeKeeper":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_startTimeKeeper(ctx, field)
				return res
			})
		case "getQR":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getQR(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var schoolImplementors = []string{"School"}

func (ec *executionContext) _School(ctx context.Context, sel ast.SelectionSet, obj *model.School) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, schoolImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("School")
		case "id":
			out.Values[i] = ec._School_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._School_name(ctx, field, obj)
		case "motto":
			out.Values[i] = ec._School_motto(ctx, field, obj)
		case "assets":
			out.Values[i] = ec._School_assets(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._School_phone(ctx, field, obj)
		case "email":
			out.Values[i] = ec._School_email(ctx, field, obj)
		case "website":
			out.Values[i] = ec._School_website(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._School_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._School_addrPostalCode(ctx, field, obj)
		case "addrTown":
			out.Values[i] = ec._School_addrTown(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._School_addrCounty(ctx, field, obj)
		case "addrCountry":
			out.Values[i] = ec._School_addrCountry(ctx, field, obj)
		case "announcements":
			out.Values[i] = ec._School_announcements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "administrators":
			out.Values[i] = ec._School_administrators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "managers":
			out.Values[i] = ec._School_managers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountants":
			out.Values[i] = ec._School_accountants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "librarians":
			out.Values[i] = ec._School_librarians(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tutors":
			out.Values[i] = ec._School_tutors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storekeepers":
			out.Values[i] = ec._School_storekeepers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "guardians":
			out.Values[i] = ec._School_guardians(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suppliers":
			out.Values[i] = ec._School_suppliers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staff":
			out.Values[i] = ec._School_staff(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payments":
			out.Values[i] = ec._School_payments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grades":
			out.Values[i] = ec._School_grades(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "examinations":
			out.Values[i] = ec._School_examinations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "books":
			out.Values[i] = ec._School_books(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "store":
			out.Values[i] = ec._School_store(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departments":
			out.Values[i] = ec._School_departments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timetables":
			out.Values[i] = ec._School_timetables(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "students":
			out.Values[i] = ec._School_students(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentsInSchool":
			out.Values[i] = ec._School_studentsInSchool(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentDiaries":
			out.Values[i] = ec._School_studentDiaries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workersInSchool":
			out.Values[i] = ec._School_workersInSchool(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visitors":
			out.Values[i] = ec._School_visitors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suggestionBox":
			out.Values[i] = ec._School_suggestionBox(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lessons":
			out.Values[i] = ec._School_lessons(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fees":
			out.Values[i] = ec._School_fees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cultures":
			out.Values[i] = ec._School_cultures(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newsletters":
			out.Values[i] = ec._School_newsletters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passes":
			out.Values[i] = ec._School_passes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "essenes":
			out.Values[i] = ec._School_essenes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._School_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._School_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var schoolConnectionImplementors = []string{"SchoolConnection"}

func (ec *executionContext) _SchoolConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SchoolConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, schoolConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SchoolConnection")
		case "totalCount":
			out.Values[i] = ec._SchoolConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._SchoolConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._SchoolConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var schoolEdgeImplementors = []string{"SchoolEdge"}

func (ec *executionContext) _SchoolEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SchoolEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, schoolEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SchoolEdge")
		case "cursor":
			out.Values[i] = ec._SchoolEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._SchoolEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scoreImplementors = []string{"Score", "SearchResult"}

func (ec *executionContext) _Score(ctx context.Context, sel ast.SelectionSet, obj *model.Score) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scoreImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Score")
		case "id":
			out.Values[i] = ec._Score_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._Score_score(ctx, field, obj)
		case "student":
			out.Values[i] = ec._Score_student(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subject":
			out.Values[i] = ec._Score_subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exam":
			out.Values[i] = ec._Score_exam(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Score_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scoresConnectionImplementors = []string{"ScoresConnection"}

func (ec *executionContext) _ScoresConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ScoresConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scoresConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScoresConnection")
		case "totalCount":
			out.Values[i] = ec._ScoresConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ScoresConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ScoresConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scoresEdgeImplementors = []string{"ScoresEdge"}

func (ec *executionContext) _ScoresEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ScoresEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scoresEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScoresEdge")
		case "cursor":
			out.Values[i] = ec._ScoresEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ScoresEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffImplementors = []string{"Staff"}

func (ec *executionContext) _Staff(ctx context.Context, sel ast.SelectionSet, obj *model.Staff) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Staff")
		case "id":
			out.Values[i] = ec._Staff_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Staff_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Staff_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Staff_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Staff_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Staff_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Staff_email(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Staff_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Staff_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Staff_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Staff_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Staff_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Staff_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Staff_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Staff_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Staff_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Staff_createdAt(ctx, field, obj)
		case "staff":
			out.Values[i] = ec._Staff_staff(ctx, field, obj)
		case "pass":
			out.Values[i] = ec._Staff_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Staff_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffConnectionImplementors = []string{"StaffConnection"}

func (ec *executionContext) _StaffConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StaffConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffConnection")
		case "totalCount":
			out.Values[i] = ec._StaffConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StaffConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StaffConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffEdgeImplementors = []string{"StaffEdge"}

func (ec *executionContext) _StaffEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StaffEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffEdge")
		case "cursor":
			out.Values[i] = ec._StaffEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StaffEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staticFileImplementors = []string{"StaticFile"}

func (ec *executionContext) _StaticFile(ctx context.Context, sel ast.SelectionSet, obj *model.StaticFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staticFileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaticFile")
		case "id":
			out.Values[i] = ec._StaticFile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileURI":
			out.Values[i] = ec._StaticFile_fileURI(ctx, field, obj)
		case "fileType":
			out.Values[i] = ec._StaticFile_fileType(ctx, field, obj)
		case "lesson":
			out.Values[i] = ec._StaticFile_lesson(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newsletter":
			out.Values[i] = ec._StaticFile_newsletter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploader":
			out.Values[i] = ec._StaticFile_uploader(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._StaticFile_createdAt(ctx, field, obj)
		case "school":
			out.Values[i] = ec._StaticFile_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staticFilesConnectionImplementors = []string{"StaticFilesConnection"}

func (ec *executionContext) _StaticFilesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StaticFilesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staticFilesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaticFilesConnection")
		case "totalCount":
			out.Values[i] = ec._StaticFilesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StaticFilesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StaticFilesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staticFilesEdgeImplementors = []string{"StaticFilesEdge"}

func (ec *executionContext) _StaticFilesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StaticFilesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staticFilesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaticFilesEdge")
		case "cursor":
			out.Values[i] = ec._StaticFilesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StaticFilesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statusImplementors = []string{"Status"}

func (ec *executionContext) _Status(ctx context.Context, sel ast.SelectionSet, obj *model.Status) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Status")
		case "id":
			out.Values[i] = ec._Status_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "balance":
			out.Values[i] = ec._Status_balance(ctx, field, obj)
		case "confirmed":
			out.Values[i] = ec._Status_confirmed(ctx, field, obj)
		case "confirmedOn":
			out.Values[i] = ec._Status_confirmedOn(ctx, field, obj)
		case "confirmedBy":
			out.Values[i] = ec._Status_confirmedBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Status_createdAt(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Status_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statusConnectionImplementors = []string{"StatusConnection"}

func (ec *executionContext) _StatusConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StatusConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatusConnection")
		case "totalCount":
			out.Values[i] = ec._StatusConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StatusConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StatusConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statusEdgeImplementors = []string{"StatusEdge"}

func (ec *executionContext) _StatusEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StatusEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatusEdge")
		case "cursor":
			out.Values[i] = ec._StatusEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StatusEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storekeeperImplementors = []string{"Storekeeper"}

func (ec *executionContext) _Storekeeper(ctx context.Context, sel ast.SelectionSet, obj *model.Storekeeper) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storekeeperImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Storekeeper")
		case "id":
			out.Values[i] = ec._Storekeeper_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Storekeeper_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Storekeeper_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Storekeeper_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Storekeeper_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Storekeeper_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Storekeeper_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Storekeeper_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Storekeeper_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Storekeeper_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Storekeeper_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Storekeeper_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Storekeeper_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Storekeeper_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Storekeeper_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Storekeeper_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Storekeeper_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Storekeeper_createdAt(ctx, field, obj)
		case "products":
			out.Values[i] = ec._Storekeeper_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productsDispensed":
			out.Values[i] = ec._Storekeeper_productsDispensed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._Storekeeper_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Storekeeper_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Storekeeper_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Storekeeper_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storekeepersConnectionImplementors = []string{"StorekeepersConnection"}

func (ec *executionContext) _StorekeepersConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StorekeepersConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storekeepersConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorekeepersConnection")
		case "totalCount":
			out.Values[i] = ec._StorekeepersConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StorekeepersConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StorekeepersConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storekeepersEdgeImplementors = []string{"StorekeepersEdge"}

func (ec *executionContext) _StorekeepersEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StorekeepersEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storekeepersEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorekeepersEdge")
		case "cursor":
			out.Values[i] = ec._StorekeepersEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StorekeepersEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentImplementors = []string{"Student", "SearchResult"}

func (ec *executionContext) _Student(ctx context.Context, sel ast.SelectionSet, obj *model.Student) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Student")
		case "id":
			out.Values[i] = ec._Student_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Student_name(ctx, field, obj)
		case "nemisNo":
			out.Values[i] = ec._Student_nemisNo(ctx, field, obj)
		case "nhifStatus":
			out.Values[i] = ec._Student_nhifStatus(ctx, field, obj)
		case "bCertNo":
			out.Values[i] = ec._Student_bCertNo(ctx, field, obj)
		case "nickName":
			out.Values[i] = ec._Student_nickName(ctx, field, obj)
		case "dob":
			out.Values[i] = ec._Student_dob(ctx, field, obj)
		case "hobies":
			out.Values[i] = ec._Student_hobies(ctx, field, obj)
		case "roleModels":
			out.Values[i] = ec._Student_roleModels(ctx, field, obj)
		case "careers":
			out.Values[i] = ec._Student_careers(ctx, field, obj)
		case "motto":
			out.Values[i] = ec._Student_motto(ctx, field, obj)
		case "bloodGroup":
			out.Values[i] = ec._Student_bloodGroup(ctx, field, obj)
		case "bestFriend":
			out.Values[i] = ec._Student_bestFriend(ctx, field, obj)
		case "languages":
			out.Values[i] = ec._Student_languages(ctx, field, obj)
		case "game":
			out.Values[i] = ec._Student_game(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._Student_subject(ctx, field, obj)
		case "book":
			out.Values[i] = ec._Student_book(ctx, field, obj)
		case "quote":
			out.Values[i] = ec._Student_quote(ctx, field, obj)
		case "animal":
			out.Values[i] = ec._Student_animal(ctx, field, obj)
		case "device":
			out.Values[i] = ec._Student_device(ctx, field, obj)
		case "thumbnail":
			out.Values[i] = ec._Student_thumbnail(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Student_createdAt(ctx, field, obj)
		case "guardians":
			out.Values[i] = ec._Student_guardians(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":
			out.Values[i] = ec._Student_grade(ctx, field, obj)
		case "payments":
			out.Values[i] = ec._Student_payments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attendance":
			out.Values[i] = ec._Student_attendance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleCall":
			out.Values[i] = ec._Student_roleCall(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lends":
			out.Values[i] = ec._Student_lends(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scores":
			out.Values[i] = ec._Student_scores(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diaries":
			out.Values[i] = ec._Student_diaries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sharemeal":
			out.Values[i] = ec._Student_sharemeal(ctx, field, obj)
		case "greetstranger":
			out.Values[i] = ec._Student_greetstranger(ctx, field, obj)
		case "firstaider":
			out.Values[i] = ec._Student_firstaider(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Student_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentinStudentoutImplementors = []string{"StudentinStudentout"}

func (ec *executionContext) _StudentinStudentout(ctx context.Context, sel ast.SelectionSet, obj *model.StudentinStudentout) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentinStudentoutImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentinStudentout")
		case "id":
			out.Values[i] = ec._StudentinStudentout_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "student":
			out.Values[i] = ec._StudentinStudentout_student(ctx, field, obj)
		case "timeIn":
			out.Values[i] = ec._StudentinStudentout_timeIn(ctx, field, obj)
		case "inSchool":
			out.Values[i] = ec._StudentinStudentout_inSchool(ctx, field, obj)
		case "timeOut":
			out.Values[i] = ec._StudentinStudentout_timeOut(ctx, field, obj)
		case "school":
			out.Values[i] = ec._StudentinStudentout_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._StudentinStudentout_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentinStudentoutConnectionImplementors = []string{"StudentinStudentoutConnection"}

func (ec *executionContext) _StudentinStudentoutConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StudentinStudentoutConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentinStudentoutConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentinStudentoutConnection")
		case "totalCount":
			out.Values[i] = ec._StudentinStudentoutConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StudentinStudentoutConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StudentinStudentoutConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentinStudentoutEdgeImplementors = []string{"StudentinStudentoutEdge"}

func (ec *executionContext) _StudentinStudentoutEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StudentinStudentoutEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentinStudentoutEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentinStudentoutEdge")
		case "cursor":
			out.Values[i] = ec._StudentinStudentoutEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StudentinStudentoutEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentsConnectionImplementors = []string{"StudentsConnection"}

func (ec *executionContext) _StudentsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StudentsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentsConnection")
		case "totalCount":
			out.Values[i] = ec._StudentsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StudentsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._StudentsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentsEdgeImplementors = []string{"StudentsEdge"}

func (ec *executionContext) _StudentsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.StudentsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentsEdge")
		case "cursor":
			out.Values[i] = ec._StudentsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._StudentsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subjectImplementors = []string{"Subject", "SearchResult"}

func (ec *executionContext) _Subject(ctx context.Context, sel ast.SelectionSet, obj *model.Subject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subjectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Subject")
		case "id":
			out.Values[i] = ec._Subject_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Subject_name(ctx, field, obj)
		case "department":
			out.Values[i] = ec._Subject_department(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scores":
			out.Values[i] = ec._Subject_scores(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Subject_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Subject_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subjectsConnectionImplementors = []string{"SubjectsConnection"}

func (ec *executionContext) _SubjectsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SubjectsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subjectsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubjectsConnection")
		case "totalCount":
			out.Values[i] = ec._SubjectsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._SubjectsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._SubjectsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subjectsEdgeImplementors = []string{"SubjectsEdge"}

func (ec *executionContext) _SubjectsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SubjectsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subjectsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubjectsEdge")
		case "cursor":
			out.Values[i] = ec._SubjectsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._SubjectsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "paymentMade":
		return ec._Subscription_paymentMade(ctx, fields[0])
	case "lessonAttended":
		return ec._Subscription_lessonAttended(ctx, fields[0])
	case "examScored":
		return ec._Subscription_examScored(ctx, fields[0])
	case "nuLessonIn5":
		return ec._Subscription_nuLessonIn5(ctx, fields[0])
	case "studentHasArrived":
		return ec._Subscription_studentHasArrived(ctx, fields[0])
	case "studentHasDeparted":
		return ec._Subscription_studentHasDeparted(ctx, fields[0])
	case "paymentConfirmed":
		return ec._Subscription_paymentConfirmed(ctx, fields[0])
	case "bookAdded":
		return ec._Subscription_bookAdded(ctx, fields[0])
	case "bookLentout":
		return ec._Subscription_bookLentout(ctx, fields[0])
	case "bookReceivedBack":
		return ec._Subscription_bookReceivedBack(ctx, fields[0])
	case "productAdded":
		return ec._Subscription_productAdded(ctx, fields[0])
	case "productDispensed":
		return ec._Subscription_productDispensed(ctx, fields[0])
	case "diaryAdded":
		return ec._Subscription_diaryAdded(ctx, fields[0])
	case "diarySeen":
		return ec._Subscription_diarySeen(ctx, fields[0])
	case "workerHasArrived":
		return ec._Subscription_workerHasArrived(ctx, fields[0])
	case "workerHasDeparted":
		return ec._Subscription_workerHasDeparted(ctx, fields[0])
	case "visitorCheckedin":
		return ec._Subscription_visitorCheckedin(ctx, fields[0])
	case "visitorCheckedout":
		return ec._Subscription_visitorCheckedout(ctx, fields[0])
	case "announceAdded":
		return ec._Subscription_announceAdded(ctx, fields[0])
	case "newsletterAdded":
		return ec._Subscription_newsletterAdded(ctx, fields[0])
	case "lessonAdded":
		return ec._Subscription_lessonAdded(ctx, fields[0])
	case "studentAdded":
		return ec._Subscription_studentAdded(ctx, fields[0])
	case "userAdded":
		return ec._Subscription_userAdded(ctx, fields[0])
	case "itemArchived":
		return ec._Subscription_itemArchived(ctx, fields[0])
	case "attendanceConfirmed":
		return ec._Subscription_attendanceConfirmed(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var supplierImplementors = []string{"Supplier"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *model.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Supplier_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Supplier_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Supplier_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Supplier_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Supplier_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Supplier_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Supplier_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Supplier_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Supplier_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Supplier_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Supplier_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Supplier_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Supplier_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Supplier_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Supplier_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Supplier_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Supplier_createdAt(ctx, field, obj)
		case "products":
			out.Values[i] = ec._Supplier_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payments":
			out.Values[i] = ec._Supplier_payments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visits":
			out.Values[i] = ec._Supplier_visits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Supplier_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suppliersConnectionImplementors = []string{"SuppliersConnection"}

func (ec *executionContext) _SuppliersConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SuppliersConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suppliersConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuppliersConnection")
		case "totalCount":
			out.Values[i] = ec._SuppliersConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._SuppliersConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._SuppliersConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suppliersEdgeImplementors = []string{"SuppliersEdge"}

func (ec *executionContext) _SuppliersEdge(ctx context.Context, sel ast.SelectionSet, obj *model.SuppliersEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suppliersEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuppliersEdge")
		case "cursor":
			out.Values[i] = ec._SuppliersEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._SuppliersEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var threadImplementors = []string{"Thread"}

func (ec *executionContext) _Thread(ctx context.Context, sel ast.SelectionSet, obj *model.Thread) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, threadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Thread")
		case "id":
			out.Values[i] = ec._Thread_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "new":
			out.Values[i] = ec._Thread_new(ctx, field, obj)
		case "messages":
			out.Values[i] = ec._Thread_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._Thread_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Thread_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var threadsConnectionImplementors = []string{"ThreadsConnection"}

func (ec *executionContext) _ThreadsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ThreadsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, threadsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThreadsConnection")
		case "totalCount":
			out.Values[i] = ec._ThreadsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ThreadsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ThreadsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var threadsEdgeImplementors = []string{"ThreadsEdge"}

func (ec *executionContext) _ThreadsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.ThreadsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, threadsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThreadsEdge")
		case "cursor":
			out.Values[i] = ec._ThreadsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ThreadsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeTableImplementors = []string{"TimeTable", "SearchResult"}

func (ec *executionContext) _TimeTable(ctx context.Context, sel ast.SelectionSet, obj *model.TimeTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeTableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeTable")
		case "id":
			out.Values[i] = ec._TimeTable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "day":
			out.Values[i] = ec._TimeTable_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "done":
			out.Values[i] = ec._TimeTable_done(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson1":
			out.Values[i] = ec._TimeTable_lesson1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson2":
			out.Values[i] = ec._TimeTable_lesson2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson3":
			out.Values[i] = ec._TimeTable_lesson3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson4":
			out.Values[i] = ec._TimeTable_lesson4(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson5":
			out.Values[i] = ec._TimeTable_lesson5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson6":
			out.Values[i] = ec._TimeTable_lesson6(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson7":
			out.Values[i] = ec._TimeTable_lesson7(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lesson8":
			out.Values[i] = ec._TimeTable_lesson8(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":
			out.Values[i] = ec._TimeTable_grade(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._TimeTable_school(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TimeTable_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeTablesConnectionImplementors = []string{"TimeTablesConnection"}

func (ec *executionContext) _TimeTablesConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TimeTablesConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeTablesConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeTablesConnection")
		case "totalCount":
			out.Values[i] = ec._TimeTablesConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TimeTablesConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TimeTablesConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeTablesEdgeImplementors = []string{"TimeTablesEdge"}

func (ec *executionContext) _TimeTablesEdge(ctx context.Context, sel ast.SelectionSet, obj *model.TimeTablesEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeTablesEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeTablesEdge")
		case "cursor":
			out.Values[i] = ec._TimeTablesEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._TimeTablesEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicImplementors = []string{"Topic", "SearchResult"}

func (ec *executionContext) _Topic(ctx context.Context, sel ast.SelectionSet, obj *model.Topic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topic")
		case "id":
			out.Values[i] = ec._Topic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "strand":
			out.Values[i] = ec._Topic_strand(ctx, field, obj)
		case "subStrand":
			out.Values[i] = ec._Topic_subStrand(ctx, field, obj)
		case "outComes":
			out.Values[i] = ec._Topic_outComes(ctx, field, obj)
		case "experiences":
			out.Values[i] = ec._Topic_experiences(ctx, field, obj)
		case "inquiries":
			out.Values[i] = ec._Topic_inquiries(ctx, field, obj)
		case "competencies":
			out.Values[i] = ec._Topic_competencies(ctx, field, obj)
		case "lifeSkills":
			out.Values[i] = ec._Topic_lifeSkills(ctx, field, obj)
		case "eSDDRR":
			out.Values[i] = ec._Topic_eSDDRR(ctx, field, obj)
		case "values":
			out.Values[i] = ec._Topic_values(ctx, field, obj)
		case "otherAreas":
			out.Values[i] = ec._Topic_otherAreas(ctx, field, obj)
		case "communityActivities":
			out.Values[i] = ec._Topic_communityActivities(ctx, field, obj)
		case "nonFormalActivity":
			out.Values[i] = ec._Topic_nonFormalActivity(ctx, field, obj)
		case "assessment":
			out.Values[i] = ec._Topic_assessment(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Topic_school(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Topic_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicsConnectionImplementors = []string{"TopicsConnection"}

func (ec *executionContext) _TopicsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TopicsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicsConnection")
		case "totalCount":
			out.Values[i] = ec._TopicsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TopicsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TopicsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicsEdgeImplementors = []string{"TopicsEdge"}

func (ec *executionContext) _TopicsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.TopicsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicsEdge")
		case "cursor":
			out.Values[i] = ec._TopicsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._TopicsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tutorImplementors = []string{"Tutor"}

func (ec *executionContext) _Tutor(ctx context.Context, sel ast.SelectionSet, obj *model.Tutor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tutorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tutor")
		case "id":
			out.Values[i] = ec._Tutor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Tutor_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Tutor_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Tutor_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._Tutor_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Tutor_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Tutor_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Tutor_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._Tutor_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._Tutor_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._Tutor_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._Tutor_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._Tutor_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._Tutor_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._Tutor_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._Tutor_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Tutor_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Tutor_createdAt(ctx, field, obj)
		case "timeTableLessons":
			out.Values[i] = ec._Tutor_timeTableLessons(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diaries":
			out.Values[i] = ec._Tutor_diaries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "archives":
			out.Values[i] = ec._Tutor_archives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkinCheckouts":
			out.Values[i] = ec._Tutor_checkinCheckouts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pass":
			out.Values[i] = ec._Tutor_pass(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Tutor_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tutorsConnectionImplementors = []string{"TutorsConnection"}

func (ec *executionContext) _TutorsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TutorsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tutorsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TutorsConnection")
		case "totalCount":
			out.Values[i] = ec._TutorsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TutorsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TutorsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tutorsEdgeImplementors = []string{"TutorsEdge"}

func (ec *executionContext) _TutorsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.TutorsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tutorsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TutorsEdge")
		case "cursor":
			out.Values[i] = ec._TutorsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._TutorsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User", "SearchResult"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._User_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._User_iDno(ctx, field, obj)
		case "nHIFno":
			out.Values[i] = ec._User_nHIFno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._User_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._User_gender(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._User_roles(ctx, field, obj)
		case "semiFormal":
			out.Values[i] = ec._User_semiFormal(ctx, field, obj)
		case "thumbNail":
			out.Values[i] = ec._User_thumbNail(ctx, field, obj)
		case "addrPoBox":
			out.Values[i] = ec._User_addrPoBox(ctx, field, obj)
		case "addrPostalCode":
			out.Values[i] = ec._User_addrPostalCode(ctx, field, obj)
		case "addrDistrict":
			out.Values[i] = ec._User_addrDistrict(ctx, field, obj)
		case "addrCounty":
			out.Values[i] = ec._User_addrCounty(ctx, field, obj)
		case "addrNationality":
			out.Values[i] = ec._User_addrNationality(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._User_ipAddress(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
		case "students":
			out.Values[i] = ec._User_students(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payments":
			out.Values[i] = ec._User_payments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messages":
			out.Values[i] = ec._User_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "essenes":
			out.Values[i] = ec._User_essenes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school":
			out.Values[i] = ec._User_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersConnectionImplementors = []string{"UsersConnection"}

func (ec *executionContext) _UsersConnection(ctx context.Context, sel ast.SelectionSet, obj *model.UsersConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersConnection")
		case "totalCount":
			out.Values[i] = ec._UsersConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._UsersConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._UsersConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersEdgeImplementors = []string{"UsersEdge"}

func (ec *executionContext) _UsersEdge(ctx context.Context, sel ast.SelectionSet, obj *model.UsersEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersEdge")
		case "cursor":
			out.Values[i] = ec._UsersEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._UsersEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var visitorImplementors = []string{"Visitor", "SearchResult"}

func (ec *executionContext) _Visitor(ctx context.Context, sel ast.SelectionSet, obj *model.Visitor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Visitor")
		case "id":
			out.Values[i] = ec._Visitor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salute":
			out.Values[i] = ec._Visitor_salute(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Visitor_name(ctx, field, obj)
		case "iDno":
			out.Values[i] = ec._Visitor_iDno(ctx, field, obj)
		case "cell":
			out.Values[i] = ec._Visitor_cell(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Visitor_email(ctx, field, obj)
		case "visiting":
			out.Values[i] = ec._Visitor_visiting(ctx, field, obj)
		case "purpose":
			out.Values[i] = ec._Visitor_purpose(ctx, field, obj)
		case "vehicle":
			out.Values[i] = ec._Visitor_vehicle(ctx, field, obj)
		case "belongings":
			out.Values[i] = ec._Visitor_belongings(ctx, field, obj)
		case "timeIn":
			out.Values[i] = ec._Visitor_timeIn(ctx, field, obj)
		case "timeOut":
			out.Values[i] = ec._Visitor_timeOut(ctx, field, obj)
		case "thumbScan":
			out.Values[i] = ec._Visitor_thumbScan(ctx, field, obj)
		case "visitingFreq":
			out.Values[i] = ec._Visitor_visitingFreq(ctx, field, obj)
		case "authorizedBy":
			out.Values[i] = ec._Visitor_authorizedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Visitor_createdAt(ctx, field, obj)
		case "school":
			out.Values[i] = ec._Visitor_school(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var visitorsConnectionImplementors = []string{"VisitorsConnection"}

func (ec *executionContext) _VisitorsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.VisitorsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitorsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitorsConnection")
		case "totalCount":
			out.Values[i] = ec._VisitorsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._VisitorsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._VisitorsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var visitorsEdgeImplementors = []string{"VisitorsEdge"}

func (ec *executionContext) _VisitorsEdge(ctx context.Context, sel ast.SelectionSet, obj *model.VisitorsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitorsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitorsEdge")
		case "cursor":
			out.Values[i] = ec._VisitorsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._VisitorsEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccountantsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsConnection(ctx context.Context, sel ast.SelectionSet, v *model.AccountantsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountantsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAdmin2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v *model.Admin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Admin(ctx, sel, v)
}

func (ec *executionContext) marshalNAdminsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsConnection(ctx context.Context, sel ast.SelectionSet, v *model.AdminsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdminsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAnnouncement2kanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v model.Announcement) graphql.Marshaler {
	return ec._Announcement(ctx, sel, &v)
}

func (ec *executionContext) marshalNAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v *model.Announcement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Announcement(ctx, sel, v)
}

func (ec *executionContext) marshalNAnnouncementConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementConnection(ctx context.Context, sel ast.SelectionSet, v *model.AnnouncementConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AnnouncementConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNArchive2kanmaaᚑbackendᚋgraphᚋmodelᚐArchive(ctx context.Context, sel ast.SelectionSet, v model.Archive) graphql.Marshaler {
	return ec._Archive(ctx, sel, &v)
}

func (ec *executionContext) marshalNArchive2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchive(ctx context.Context, sel ast.SelectionSet, v *model.Archive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Archive(ctx, sel, v)
}

func (ec *executionContext) marshalNArchivesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesConnection(ctx context.Context, sel ast.SelectionSet, v *model.ArchivesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ArchivesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNAttendance2kanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx context.Context, sel ast.SelectionSet, v model.Attendance) graphql.Marshaler {
	return ec._Attendance(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx context.Context, sel ast.SelectionSet, v *model.Attendance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Attendance(ctx, sel, v)
}

func (ec *executionContext) marshalNAttendanceConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceConnection(ctx context.Context, sel ast.SelectionSet, v *model.AttendanceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AttendanceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNBook2kanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx context.Context, sel ast.SelectionSet, v model.Book) graphql.Marshaler {
	return ec._Book(ctx, sel, &v)
}

func (ec *executionContext) marshalNBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx context.Context, sel ast.SelectionSet, v *model.Book) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Book(ctx, sel, v)
}

func (ec *executionContext) marshalNBooksConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksConnection(ctx context.Context, sel ast.SelectionSet, v *model.BooksConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BooksConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCheckinCheckout2kanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx context.Context, sel ast.SelectionSet, v model.CheckinCheckout) graphql.Marshaler {
	return ec._CheckinCheckout(ctx, sel, &v)
}

func (ec *executionContext) marshalNCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx context.Context, sel ast.SelectionSet, v *model.CheckinCheckout) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckinCheckout(ctx, sel, v)
}

func (ec *executionContext) marshalNCheckinCheckoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutConnection(ctx context.Context, sel ast.SelectionSet, v *model.CheckinCheckoutConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckinCheckoutConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCulturesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesConnection(ctx context.Context, sel ast.SelectionSet, v *model.CulturesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CulturesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsConnection(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDiariesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesConnection(ctx context.Context, sel ast.SelectionSet, v *model.DiariesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DiariesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNDiary2kanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx context.Context, sel ast.SelectionSet, v model.Diary) graphql.Marshaler {
	return ec._Diary(ctx, sel, &v)
}

func (ec *executionContext) marshalNDiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx context.Context, sel ast.SelectionSet, v *model.Diary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Diary(ctx, sel, v)
}

func (ec *executionContext) marshalNDispensedProduct2kanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx context.Context, sel ast.SelectionSet, v model.DispensedProduct) graphql.Marshaler {
	return ec._DispensedProduct(ctx, sel, &v)
}

func (ec *executionContext) marshalNDispensedProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx context.Context, sel ast.SelectionSet, v *model.DispensedProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DispensedProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNDispensedProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsConnection(ctx context.Context, sel ast.SelectionSet, v *model.DispensedProductsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DispensedProductsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNEssenesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesConnection(ctx context.Context, sel ast.SelectionSet, v *model.EssenesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EssenesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx context.Context, sel ast.SelectionSet, v *model.Exam) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Exam(ctx, sel, v)
}

func (ec *executionContext) marshalNExamsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsConnection(ctx context.Context, sel ast.SelectionSet, v *model.ExamsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExamsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFeesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesConnection(ctx context.Context, sel ast.SelectionSet, v *model.FeesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FeesConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx context.Context, sel ast.SelectionSet, v *model.Grade) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Grade(ctx, sel, v)
}

func (ec *executionContext) marshalNGradesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesConnection(ctx context.Context, sel ast.SelectionSet, v *model.GradesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GradesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNGuardiansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansConnection(ctx context.Context, sel ast.SelectionSet, v *model.GuardiansConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GuardiansConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLend2kanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx context.Context, sel ast.SelectionSet, v model.Lend) graphql.Marshaler {
	return ec._Lend(ctx, sel, &v)
}

func (ec *executionContext) marshalNLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx context.Context, sel ast.SelectionSet, v *model.Lend) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lend(ctx, sel, v)
}

func (ec *executionContext) marshalNLendsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsConnection(ctx context.Context, sel ast.SelectionSet, v *model.LendsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LendsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNLesson2kanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v model.Lesson) graphql.Marshaler {
	return ec._Lesson(ctx, sel, &v)
}

func (ec *executionContext) marshalNLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v *model.Lesson) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lesson(ctx, sel, v)
}

func (ec *executionContext) marshalNLessonsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsConnection(ctx context.Context, sel ast.SelectionSet, v *model.LessonsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LessonsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNLibrariansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansConnection(ctx context.Context, sel ast.SelectionSet, v *model.LibrariansConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LibrariansConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNManagersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersConnection(ctx context.Context, sel ast.SelectionSet, v *model.ManagersConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManagersConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMessagesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesConnection(ctx context.Context, sel ast.SelectionSet, v *model.MessagesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MessagesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNNewsletter2kanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx context.Context, sel ast.SelectionSet, v model.Newsletter) graphql.Marshaler {
	return ec._Newsletter(ctx, sel, &v)
}

func (ec *executionContext) marshalNNewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx context.Context, sel ast.SelectionSet, v *model.Newsletter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Newsletter(ctx, sel, v)
}

func (ec *executionContext) marshalNNewsletterConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletterConnection(ctx context.Context, sel ast.SelectionSet, v *model.NewsletterConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewsletterConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPassesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesConnection(ctx context.Context, sel ast.SelectionSet, v *model.PassesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PassesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPayment2kanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v model.Payment) graphql.Marshaler {
	return ec._Payment(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v *model.Payment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx context.Context, sel ast.SelectionSet, v *model.PaymentsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2kanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v model.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNProductsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsConnection(ctx context.Context, sel ast.SelectionSet, v *model.ProductsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx context.Context, sel ast.SelectionSet, v *model.School) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._School(ctx, sel, v)
}

func (ec *executionContext) marshalNScore2kanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx context.Context, sel ast.SelectionSet, v model.Score) graphql.Marshaler {
	return ec._Score(ctx, sel, &v)
}

func (ec *executionContext) marshalNScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx context.Context, sel ast.SelectionSet, v *model.Score) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Score(ctx, sel, v)
}

func (ec *executionContext) marshalNScoresConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresConnection(ctx context.Context, sel ast.SelectionSet, v *model.ScoresConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScoresConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResult2ᚕkanmaaᚑbackendᚋgraphᚋmodelᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v []model.SearchResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSearchResult2kanmaaᚑbackendᚋgraphᚋmodelᚐSearchResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNStaffConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffConnection(ctx context.Context, sel ast.SelectionSet, v *model.StaffConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaffConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx context.Context, sel ast.SelectionSet, v *model.StaticFile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaticFile(ctx, sel, v)
}

func (ec *executionContext) marshalNStaticFilesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesConnection(ctx context.Context, sel ast.SelectionSet, v *model.StaticFilesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaticFilesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStatus2kanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v model.Status) graphql.Marshaler {
	return ec._Status(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatus2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v *model.Status) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Status(ctx, sel, v)
}

func (ec *executionContext) marshalNStorekeeper2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeeper(ctx context.Context, sel ast.SelectionSet, v *model.Storekeeper) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Storekeeper(ctx, sel, v)
}

func (ec *executionContext) marshalNStorekeepersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersConnection(ctx context.Context, sel ast.SelectionSet, v *model.StorekeepersConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StorekeepersConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNStudent2kanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx context.Context, sel ast.SelectionSet, v model.Student) graphql.Marshaler {
	return ec._Student(ctx, sel, &v)
}

func (ec *executionContext) marshalNStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx context.Context, sel ast.SelectionSet, v *model.Student) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Student(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentinStudentout2kanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx context.Context, sel ast.SelectionSet, v model.StudentinStudentout) graphql.Marshaler {
	return ec._StudentinStudentout(ctx, sel, &v)
}

func (ec *executionContext) marshalNStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx context.Context, sel ast.SelectionSet, v *model.StudentinStudentout) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StudentinStudentout(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentinStudentoutConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutConnection(ctx context.Context, sel ast.SelectionSet, v *model.StudentinStudentoutConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StudentinStudentoutConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsConnection(ctx context.Context, sel ast.SelectionSet, v *model.StudentsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StudentsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx context.Context, sel ast.SelectionSet, v *model.Subject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Subject(ctx, sel, v)
}

func (ec *executionContext) marshalNSubjectsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsConnection(ctx context.Context, sel ast.SelectionSet, v *model.SubjectsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SubjectsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNSupplier2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *model.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalNSuppliersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersConnection(ctx context.Context, sel ast.SelectionSet, v *model.SuppliersConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SuppliersConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNThreadsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsConnection(ctx context.Context, sel ast.SelectionSet, v *model.ThreadsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ThreadsConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimeTablesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesConnection(ctx context.Context, sel ast.SelectionSet, v *model.TimeTablesConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TimeTablesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx context.Context, sel ast.SelectionSet, v *model.Tutor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Tutor(ctx, sel, v)
}

func (ec *executionContext) marshalNTutorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsConnection(ctx context.Context, sel ast.SelectionSet, v *model.TutorsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TutorsConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2kanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUsersConnection2kanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx context.Context, sel ast.SelectionSet, v model.UsersConnection) graphql.Marshaler {
	return ec._UsersConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx context.Context, sel ast.SelectionSet, v *model.UsersConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNVisitor2kanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v model.Visitor) graphql.Marshaler {
	return ec._Visitor(ctx, sel, &v)
}

func (ec *executionContext) marshalNVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v *model.Visitor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Visitor(ctx, sel, v)
}

func (ec *executionContext) marshalNVisitorsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsConnection(ctx context.Context, sel ast.SelectionSet, v *model.VisitorsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VisitorsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNaccEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx context.Context, v interface{}) (model.AccEnum, error) {
	var res model.AccEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNaccEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx context.Context, sel ast.SelectionSet, v model.AccEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNconditionEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐConditionEnum(ctx context.Context, v interface{}) (model.ConditionEnum, error) {
	var res model.ConditionEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNconditionEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐConditionEnum(ctx context.Context, sel ast.SelectionSet, v model.ConditionEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdeptEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx context.Context, v interface{}) (model.DeptEnum, error) {
	var res model.DeptEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdeptEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx context.Context, sel ast.SelectionSet, v model.DeptEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNfileTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐFileTypeEnum(ctx context.Context, v interface{}) (model.FileTypeEnum, error) {
	var res model.FileTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNfileTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐFileTypeEnum(ctx context.Context, sel ast.SelectionSet, v model.FileTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNgenderEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGenderEnum(ctx context.Context, v interface{}) (model.GenderEnum, error) {
	var res model.GenderEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNgenderEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGenderEnum(ctx context.Context, sel ast.SelectionSet, v model.GenderEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx context.Context, v interface{}) (model.GradeEnum, error) {
	var res model.GradeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNgradeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx context.Context, sel ast.SelectionSet, v model.GradeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNpaymentForEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx context.Context, v interface{}) (model.PaymentForEnum, error) {
	var res model.PaymentForEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpaymentForEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx context.Context, sel ast.SelectionSet, v model.PaymentForEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNpaymentTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx context.Context, v interface{}) (model.PaymentTypeEnum, error) {
	var res model.PaymentTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpaymentTypeEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx context.Context, sel ast.SelectionSet, v model.PaymentTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNperiodEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx context.Context, v interface{}) (model.PeriodEnum, error) {
	var res model.PeriodEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNperiodEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx context.Context, sel ast.SelectionSet, v model.PeriodEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNproductCategoryEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx context.Context, v interface{}) (model.ProductCategoryEnum, error) {
	var res model.ProductCategoryEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNproductCategoryEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx context.Context, sel ast.SelectionSet, v model.ProductCategoryEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNrolesEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx context.Context, v interface{}) (model.RolesEnum, error) {
	var res model.RolesEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNrolesEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx context.Context, sel ast.SelectionSet, v model.RolesEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsaluteEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx context.Context, v interface{}) (model.SaluteEnum, error) {
	var res model.SaluteEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsaluteEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx context.Context, sel ast.SelectionSet, v model.SaluteEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsubjectEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx context.Context, v interface{}) (model.SubjectEnum, error) {
	var res model.SubjectEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubjectEnum2kanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx context.Context, sel ast.SelectionSet, v model.SubjectEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOAccountant2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountant(ctx context.Context, sel ast.SelectionSet, v *model.Accountant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Accountant(ctx, sel, v)
}

func (ec *executionContext) marshalOAccountantsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.AccountantsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccountantsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccountantsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccountantsEdge(ctx context.Context, sel ast.SelectionSet, v *model.AccountantsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountantsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOAdmin2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdmin(ctx context.Context, sel ast.SelectionSet, v *model.Admin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Admin(ctx, sel, v)
}

func (ec *executionContext) marshalOAdminsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.AdminsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdminsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAdminsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAdminsEdge(ctx context.Context, sel ast.SelectionSet, v *model.AdminsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdminsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnouncement2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v *model.Announcement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Announcement(ctx, sel, v)
}

func (ec *executionContext) marshalOAnnouncementEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementEdge(ctx context.Context, sel ast.SelectionSet, v []*model.AnnouncementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnnouncementEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnnouncementEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAnnouncementEdge(ctx context.Context, sel ast.SelectionSet, v *model.AnnouncementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnnouncementEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOArchive2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchive(ctx context.Context, sel ast.SelectionSet, v *model.Archive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Archive(ctx, sel, v)
}

func (ec *executionContext) marshalOArchivesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ArchivesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOArchivesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOArchivesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchivesEdge(ctx context.Context, sel ast.SelectionSet, v *model.ArchivesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArchivesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOAttendance2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendance(ctx context.Context, sel ast.SelectionSet, v *model.Attendance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attendance(ctx, sel, v)
}

func (ec *executionContext) marshalOAttendanceEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceEdge(ctx context.Context, sel ast.SelectionSet, v []*model.AttendanceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttendanceEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAttendanceEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAttendanceEdge(ctx context.Context, sel ast.SelectionSet, v *model.AttendanceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AttendanceEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOBook2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBook(ctx context.Context, sel ast.SelectionSet, v *model.Book) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Book(ctx, sel, v)
}

func (ec *executionContext) marshalOBooksEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksEdge(ctx context.Context, sel ast.SelectionSet, v []*model.BooksEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBooksEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBooksEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐBooksEdge(ctx context.Context, sel ast.SelectionSet, v *model.BooksEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BooksEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCheckinCheckout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckout(ctx context.Context, sel ast.SelectionSet, v *model.CheckinCheckout) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckinCheckout(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckinCheckoutEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutEdge(ctx context.Context, sel ast.SelectionSet, v []*model.CheckinCheckoutEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCheckinCheckoutEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCheckinCheckoutEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCheckinCheckoutEdge(ctx context.Context, sel ast.SelectionSet, v *model.CheckinCheckoutEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckinCheckoutEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOCulture2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulture(ctx context.Context, sel ast.SelectionSet, v *model.Culture) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Culture(ctx, sel, v)
}

func (ec *executionContext) marshalOCulturesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.CulturesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCulturesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCulturesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐCulturesEdge(ctx context.Context, sel ast.SelectionSet, v *model.CulturesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CulturesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalODepartment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.DepartmentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODepartmentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODepartmentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDepartmentsEdge(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalODiariesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.DiariesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODiariesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODiariesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiariesEdge(ctx context.Context, sel ast.SelectionSet, v *model.DiariesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DiariesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalODiary2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDiary(ctx context.Context, sel ast.SelectionSet, v *model.Diary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Diary(ctx, sel, v)
}

func (ec *executionContext) marshalODispensedProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProduct(ctx context.Context, sel ast.SelectionSet, v *model.DispensedProduct) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DispensedProduct(ctx, sel, v)
}

func (ec *executionContext) marshalODispensedProductsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.DispensedProductsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODispensedProductsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODispensedProductsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDispensedProductsEdge(ctx context.Context, sel ast.SelectionSet, v *model.DispensedProductsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DispensedProductsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOEssene2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssene(ctx context.Context, sel ast.SelectionSet, v *model.Essene) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Essene(ctx, sel, v)
}

func (ec *executionContext) marshalOEssenesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.EssenesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEssenesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEssenesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐEssenesEdge(ctx context.Context, sel ast.SelectionSet, v *model.EssenesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EssenesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOExam2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExam(ctx context.Context, sel ast.SelectionSet, v *model.Exam) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Exam(ctx, sel, v)
}

func (ec *executionContext) marshalOExamsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ExamsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOExamsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOExamsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐExamsEdge(ctx context.Context, sel ast.SelectionSet, v *model.ExamsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExamsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFee2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFee(ctx context.Context, sel ast.SelectionSet, v *model.Fee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Fee(ctx, sel, v)
}

func (ec *executionContext) marshalOFeesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.FeesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFeesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐFeesEdge(ctx context.Context, sel ast.SelectionSet, v *model.FeesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FeesEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGrade2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGrade(ctx context.Context, sel ast.SelectionSet, v *model.Grade) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Grade(ctx, sel, v)
}

func (ec *executionContext) marshalOGradesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.GradesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGradesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGradesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradesEdge(ctx context.Context, sel ast.SelectionSet, v *model.GradesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GradesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOGuardian2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardian(ctx context.Context, sel ast.SelectionSet, v *model.Guardian) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Guardian(ctx, sel, v)
}

func (ec *executionContext) marshalOGuardiansConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansConnection(ctx context.Context, sel ast.SelectionSet, v *model.GuardiansConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GuardiansConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOGuardiansEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansEdge(ctx context.Context, sel ast.SelectionSet, v []*model.GuardiansEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGuardiansEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGuardiansEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGuardiansEdge(ctx context.Context, sel ast.SelectionSet, v *model.GuardiansEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GuardiansEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOLend2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLend(ctx context.Context, sel ast.SelectionSet, v *model.Lend) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lend(ctx, sel, v)
}

func (ec *executionContext) marshalOLendsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.LendsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLendsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLendsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLendsEdge(ctx context.Context, sel ast.SelectionSet, v *model.LendsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LendsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOLesson2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v *model.Lesson) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lesson(ctx, sel, v)
}

func (ec *executionContext) marshalOLessonsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.LessonsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLessonsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLessonsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLessonsEdge(ctx context.Context, sel ast.SelectionSet, v *model.LessonsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LessonsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOLibrarian2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrarian(ctx context.Context, sel ast.SelectionSet, v *model.Librarian) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Librarian(ctx, sel, v)
}

func (ec *executionContext) marshalOLibrariansEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansEdge(ctx context.Context, sel ast.SelectionSet, v []*model.LibrariansEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLibrariansEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLibrariansEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐLibrariansEdge(ctx context.Context, sel ast.SelectionSet, v *model.LibrariansEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LibrariansEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOManager2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManager(ctx context.Context, sel ast.SelectionSet, v *model.Manager) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Manager(ctx, sel, v)
}

func (ec *executionContext) marshalOManagersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ManagersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOManagersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOManagersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐManagersEdge(ctx context.Context, sel ast.SelectionSet, v *model.ManagersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ManagersEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOMessage2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessage(ctx context.Context, sel ast.SelectionSet, v *model.Message) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalOMessagesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.MessagesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMessagesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMessagesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐMessagesEdge(ctx context.Context, sel ast.SelectionSet, v *model.MessagesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessagesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalONewsletter2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewsletter(ctx context.Context, sel ast.SelectionSet, v *model.Newsletter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Newsletter(ctx, sel, v)
}

func (ec *executionContext) marshalONewslettersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewslettersEdge(ctx context.Context, sel ast.SelectionSet, v []*model.NewslettersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONewslettersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewslettersEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONewslettersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐNewslettersEdge(ctx context.Context, sel ast.SelectionSet, v *model.NewslettersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewslettersEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOPass2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPass(ctx context.Context, sel ast.SelectionSet, v *model.Pass) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Pass(ctx, sel, v)
}

func (ec *executionContext) marshalOPassesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.PassesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPassesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPassesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPassesEdge(ctx context.Context, sel ast.SelectionSet, v *model.PassesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PassesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOPayment2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v *model.Payment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentsConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsConnection(ctx context.Context, sel ast.SelectionSet, v *model.PaymentsConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.PaymentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPaymentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPaymentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentsEdge(ctx context.Context, sel ast.SelectionSet, v *model.PaymentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOProduct2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalOProductsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ProductsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductsEdge(ctx context.Context, sel ast.SelectionSet, v *model.ProductsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOSchool2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchool(ctx context.Context, sel ast.SelectionSet, v *model.School) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._School(ctx, sel, v)
}

func (ec *executionContext) marshalOSchoolEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchoolEdge(ctx context.Context, sel ast.SelectionSet, v []*model.SchoolEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSchoolEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchoolEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSchoolEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSchoolEdge(ctx context.Context, sel ast.SelectionSet, v *model.SchoolEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SchoolEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOScore2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScore(ctx context.Context, sel ast.SelectionSet, v *model.Score) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Score(ctx, sel, v)
}

func (ec *executionContext) marshalOScoresEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ScoresEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScoresEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOScoresEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐScoresEdge(ctx context.Context, sel ast.SelectionSet, v *model.ScoresEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScoresEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOSearchResult2kanmaaᚑbackendᚋgraphᚋmodelᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v model.SearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOStaff2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaff(ctx context.Context, sel ast.SelectionSet, v *model.Staff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Staff(ctx, sel, v)
}

func (ec *executionContext) marshalOStaffEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StaffEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStaffEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStaffEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaffEdge(ctx context.Context, sel ast.SelectionSet, v *model.StaffEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StaffEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOStaticFile2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFile(ctx context.Context, sel ast.SelectionSet, v *model.StaticFile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StaticFile(ctx, sel, v)
}

func (ec *executionContext) marshalOStaticFilesConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesConnection(ctx context.Context, sel ast.SelectionSet, v *model.StaticFilesConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StaticFilesConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStaticFilesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StaticFilesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStaticFilesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStaticFilesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStaticFilesEdge(ctx context.Context, sel ast.SelectionSet, v *model.StaticFilesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StaticFilesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOStatus2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v *model.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Status(ctx, sel, v)
}

func (ec *executionContext) marshalOStatusEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatusEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StatusEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStatusEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatusEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStatusEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStatusEdge(ctx context.Context, sel ast.SelectionSet, v *model.StatusEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StatusEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOStorekeeper2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeeper(ctx context.Context, sel ast.SelectionSet, v *model.Storekeeper) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Storekeeper(ctx, sel, v)
}

func (ec *executionContext) marshalOStorekeepersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StorekeepersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStorekeepersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStorekeepersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStorekeepersEdge(ctx context.Context, sel ast.SelectionSet, v *model.StorekeepersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StorekeepersEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOStudent2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudent(ctx context.Context, sel ast.SelectionSet, v *model.Student) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Student(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentinStudentout2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentout(ctx context.Context, sel ast.SelectionSet, v *model.StudentinStudentout) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentinStudentout(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentinStudentoutEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StudentinStudentoutEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStudentinStudentoutEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStudentinStudentoutEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentinStudentoutEdge(ctx context.Context, sel ast.SelectionSet, v *model.StudentinStudentoutEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentinStudentoutEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.StudentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStudentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStudentsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐStudentsEdge(ctx context.Context, sel ast.SelectionSet, v *model.StudentsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOSubject2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubject(ctx context.Context, sel ast.SelectionSet, v *model.Subject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Subject(ctx, sel, v)
}

func (ec *executionContext) marshalOSubjectsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.SubjectsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSubjectsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSubjectsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectsEdge(ctx context.Context, sel ast.SelectionSet, v *model.SubjectsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubjectsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOSupplier2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *model.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalOSuppliersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersEdge(ctx context.Context, sel ast.SelectionSet, v []*model.SuppliersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSuppliersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSuppliersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSuppliersEdge(ctx context.Context, sel ast.SelectionSet, v *model.SuppliersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SuppliersEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOThread2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThread(ctx context.Context, sel ast.SelectionSet, v *model.Thread) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Thread(ctx, sel, v)
}

func (ec *executionContext) marshalOThreadsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.ThreadsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOThreadsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOThreadsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐThreadsEdge(ctx context.Context, sel ast.SelectionSet, v *model.ThreadsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ThreadsEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOTimeTable2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTable(ctx context.Context, sel ast.SelectionSet, v *model.TimeTable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeTable(ctx, sel, v)
}

func (ec *executionContext) marshalOTimeTablesEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesEdge(ctx context.Context, sel ast.SelectionSet, v []*model.TimeTablesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTimeTablesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTimeTablesEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTimeTablesEdge(ctx context.Context, sel ast.SelectionSet, v *model.TimeTablesEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeTablesEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOTopic2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v *model.Topic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalOTopicsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopicsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.TopicsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTopicsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopicsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTopicsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTopicsEdge(ctx context.Context, sel ast.SelectionSet, v *model.TopicsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopicsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOTutor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutor(ctx context.Context, sel ast.SelectionSet, v *model.Tutor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tutor(ctx, sel, v)
}

func (ec *executionContext) marshalOTutorsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.TutorsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTutorsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTutorsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐTutorsEdge(ctx context.Context, sel ast.SelectionSet, v *model.TutorsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TutorsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOUser2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUsersConnection2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersConnection(ctx context.Context, sel ast.SelectionSet, v *model.UsersConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UsersConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOUsersEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersEdge(ctx context.Context, sel ast.SelectionSet, v []*model.UsersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUsersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUsersEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐUsersEdge(ctx context.Context, sel ast.SelectionSet, v *model.UsersEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UsersEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOVisitor2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitor(ctx context.Context, sel ast.SelectionSet, v *model.Visitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Visitor(ctx, sel, v)
}

func (ec *executionContext) marshalOVisitorsEdge2ᚕᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsEdge(ctx context.Context, sel ast.SelectionSet, v []*model.VisitorsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVisitorsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVisitorsEdge2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐVisitorsEdge(ctx context.Context, sel ast.SelectionSet, v *model.VisitorsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VisitorsEdge(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOaccEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx context.Context, v interface{}) (*model.AccEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AccEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOaccEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐAccEnum(ctx context.Context, sel ast.SelectionSet, v *model.AccEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx context.Context, v interface{}) (*model.ArchiveTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ArchiveTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOarchiveTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐArchiveTypeEnum(ctx context.Context, sel ast.SelectionSet, v *model.ArchiveTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOdeptEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx context.Context, v interface{}) (*model.DeptEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DeptEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdeptEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐDeptEnum(ctx context.Context, sel ast.SelectionSet, v *model.DeptEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx context.Context, v interface{}) (*model.GradeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.GradeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgradeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐGradeEnum(ctx context.Context, sel ast.SelectionSet, v *model.GradeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpaymentForEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx context.Context, v interface{}) (*model.PaymentForEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PaymentForEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpaymentForEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentForEnum(ctx context.Context, sel ast.SelectionSet, v *model.PaymentForEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpaymentTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx context.Context, v interface{}) (*model.PaymentTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PaymentTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpaymentTypeEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPaymentTypeEnum(ctx context.Context, sel ast.SelectionSet, v *model.PaymentTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOperiodEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx context.Context, v interface{}) (*model.PeriodEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PeriodEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOperiodEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐPeriodEnum(ctx context.Context, sel ast.SelectionSet, v *model.PeriodEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOproductCategoryEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx context.Context, v interface{}) (*model.ProductCategoryEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProductCategoryEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOproductCategoryEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐProductCategoryEnum(ctx context.Context, sel ast.SelectionSet, v *model.ProductCategoryEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOrolesEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx context.Context, v interface{}) (*model.RolesEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RolesEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOrolesEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐRolesEnum(ctx context.Context, sel ast.SelectionSet, v *model.RolesEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsaluteEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx context.Context, v interface{}) (*model.SaluteEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SaluteEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsaluteEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSaluteEnum(ctx context.Context, sel ast.SelectionSet, v *model.SaluteEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsenesterEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSenesterEnum(ctx context.Context, v interface{}) (*model.SenesterEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SenesterEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsenesterEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSenesterEnum(ctx context.Context, sel ast.SelectionSet, v *model.SenesterEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOsubjectEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx context.Context, v interface{}) (*model.SubjectEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SubjectEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubjectEnum2ᚖkanmaaᚑbackendᚋgraphᚋmodelᚐSubjectEnum(ctx context.Context, sel ast.SelectionSet, v *model.SubjectEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
